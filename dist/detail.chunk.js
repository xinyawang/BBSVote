webpackJsonp([1],[,,,,,function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n!function () {\n  var d3 = {\n    version: "3.5.17"\n  };\n  var d3_arraySlice = [].slice,\n      d3_array = function d3_array(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function d3_array(list) {\n        var i = list.length,\n            array = new Array(i);\n        while (i--) {\n          array[i] = list[i];\n        }return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function () {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype,\n          d3_element_setAttribute = d3_element_prototype.setAttribute,\n          d3_element_setAttributeNS = d3_element_prototype.setAttributeNS,\n          d3_style_prototype = this.CSSStyleDeclaration.prototype,\n          d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function (name, value) {\n        d3_element_setAttribute.call(this, name, value + "");\n      };\n      d3_element_prototype.setAttributeNS = function (space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + "");\n      };\n      d3_style_prototype.setProperty = function (name, value, priority) {\n        d3_style_setProperty.call(this, name, value + "", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function (a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function (array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if ((b = array[i]) != null && b >= b) {\n          a = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = array[i]) != null && a > b) a = b;\n      }\n    } else {\n      while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null && b >= b) {\n          a = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n      }\n    }\n    return a;\n  };\n  d3.max = function (array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if ((b = array[i]) != null && b >= b) {\n          a = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = array[i]) != null && b > a) a = b;\n      }\n    } else {\n      while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null && b >= b) {\n          a = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n      }\n    }\n    return a;\n  };\n  d3.extent = function (array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if ((b = array[i]) != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = array[i]) != null) {\n          if (a > b) a = b;\n          if (c < b) c = b;\n        }\n      }\n    } else {\n      while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }while (++i < n) {\n        if ((b = f.call(array, array[i], i)) != null) {\n          if (a > b) a = b;\n          if (c < b) c = b;\n        }\n      }\n    }\n    return [a, c];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function (array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = +array[i])) s += a;\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n      }\n    }\n    return s;\n  };\n  d3.mean = function (array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) s += a;else --j;\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a;else --j;\n      }\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function (values, p) {\n    var H = (values.length - 1) * p + 1,\n        h = Math.floor(H),\n        v = +values[h - 1],\n        e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function (array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n      }\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function (array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function () {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function left(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        }\n        return lo;\n      },\n      right: function right(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function (f) {\n    return d3_bisector(f.length === 1 ? function (d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function (array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0,\n        t,\n        i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function (array, indexes) {\n    var i = indexes.length,\n        permutes = new Array(i);\n    while (i--) {\n      permutes[i] = array[indexes[i]];\n    }return permutes;\n  };\n  d3.pairs = function (array) {\n    var i = 0,\n        n = array.length - 1,\n        p0,\n        p1 = array[0],\n        pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) {\n      pairs[i] = [p0 = p1, p1 = array[++i]];\n    }return pairs;\n  };\n  d3.transpose = function (matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function () {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function (map) {\n    var keys = [];\n    for (var key in map) {\n      keys.push(key);\n    }return keys;\n  };\n  d3.values = function (map) {\n    var values = [];\n    for (var key in map) {\n      values.push(map[key]);\n    }return values;\n  };\n  d3.entries = function (map) {\n    var entries = [];\n    for (var key in map) {\n      entries.push({\n        key: key,\n        value: map[key]\n      });\n    }return entries;\n  };\n  d3.merge = function (arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n    while (++i < n) {\n      j += arrays[i].length;\n    }merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function (start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error("infinite range");\n    var range = [],\n        k = d3_range_integerScale(abs(step)),\n        i = -1,\n        j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) {\n      range.push(j / k);\n    } else while ((j = start + step * ++i) < stop) {\n      range.push(j / k);\n    }return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) {\n      k *= 10;\n    }return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function (object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function (key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n      if (arguments.length === 1) while (++i < n) {\n        map.set(i, object[i]);\n      } else while (++i < n) {\n        map.set(f.call(object, o = object[i], i), o);\n      }\n    } else {\n      for (var key in object) {\n        map.set(key, object[key]);\n      }\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = "__proto__",\n      d3_map_zero = "\\x00";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function get(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function set(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function values() {\n      var values = [];\n      for (var key in this._) {\n        values.push(this._[key]);\n      }return values;\n    },\n    entries: function entries() {\n      var entries = [];\n      for (var key in this._) {\n        entries.push({\n          key: d3_map_unescape(key),\n          value: this._[key]\n        });\n      }return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function forEach(f) {\n      for (var key in this._) {\n        f.call(this, d3_map_unescape(key), this._[key]);\n      }\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) {\n      keys.push(d3_map_unescape(key));\n    }return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) {\n      ++size;\n    }return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) {\n      return false;\n    }return true;\n  }\n  d3.nest = function () {\n    var nest = {},\n        keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          object,\n          setter,\n          valuesByKey = new d3_Map(),\n          values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [object]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function setter(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function setter(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [],\n          sortKey = sortKeys[depth++];\n      map.forEach(function (key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function (a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function (array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function (array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function (d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function (order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function (order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function (f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function (array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) {\n      set.add(array[i]);\n    }return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function add(key) {\n      this._[d3_map_escape(key += "")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function forEach(f) {\n      for (var key in this._) {\n        f.call(this, d3_map_unescape(key));\n      }\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function (target, source) {\n    var i = 1,\n        n = arguments.length,\n        method;\n    while (++i < n) {\n      target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    }return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function () {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];\n  function d3_noop() {}\n  d3.dispatch = function () {\n    var dispatch = new d3_dispatch(),\n        i = -1,\n        n = arguments.length;\n    while (++i < n) {\n      dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    }return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function (type, listener) {\n    var i = type.indexOf("."),\n        name = "";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [],\n        listenerByName = new d3_Map();\n    function event() {\n      var z = listeners,\n          i = -1,\n          n = z.length,\n          l;\n      while (++i < n) {\n        if (l = z[i].on) l.apply(this, arguments);\n      }return dispatch;\n    }\n    event.on = function (name, listener) {\n      var l = listenerByName.get(name),\n          i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event,\n        s;\n    while (s = e.sourceEvent) {\n      e = s;\n    }return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(),\n        i = 0,\n        n = arguments.length;\n    while (++i < n) {\n      dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    }dispatch.of = function (thiz, argumentz) {\n      return function (e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function (s) {\n    return s.replace(d3_requote_re, "\\\\$&");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function (object, prototype) {\n    object.__proto__ = prototype;\n  } : function (object, prototype) {\n    for (var property in prototype) {\n      object[property] = prototype[property];\n    }\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function d3_select(s, n) {\n    return n.querySelector(s);\n  },\n      d3_selectAll = function d3_selectAll(s, n) {\n    return n.querySelectorAll(s);\n  },\n      _d3_selectMatches = function d3_selectMatches(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];\n    _d3_selectMatches = function d3_selectMatches(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return _d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === "function") {\n    d3_select = function d3_select(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    _d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function () {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function (selector) {\n    var subgroups = [],\n        subgroup,\n        subnode,\n        group,\n        node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m;) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n;) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === "function" ? selector : function () {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function (selector) {\n    var subgroups = [],\n        subgroup,\n        node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m;) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n;) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === "function" ? selector : function () {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";\n  var d3_nsPrefix = {\n    svg: "http://www.w3.org/2000/svg",\n    xhtml: d3_nsXhtml,\n    xlink: "http://www.w3.org/1999/xlink",\n    xml: "http://www.w3.org/XML/1998/namespace",\n    xmlns: "http://www.w3.org/2000/xmlns/"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function qualify(name) {\n      var i = name.indexOf(":"),\n          prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function (name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === "string") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) {\n        this.each(d3_selection_attr(value, name[value]));\n      }return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name);else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local);else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, " ");\n  }\n  d3_selectionPrototype.classed = function (name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === "string") {\n        var node = this.node(),\n            n = (name = d3_selection_classes(name)).length,\n            i = -1;\n        if (value = node.classList) {\n          while (++i < n) {\n            if (!value.contains(name[i])) return false;\n          }\n        } else {\n          value = node.getAttribute("class");\n          while (++i < n) {\n            if (!d3_selection_classedRe(name[i]).test(value)) return false;\n          }\n        }\n        return true;\n      }\n      for (value in name) {\n        this.each(d3_selection_classed(value, name[value]));\n      }return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp("(?:^|\\\\s+)" + d3.requote(name) + "(?:\\\\s+|$)", "g");\n  }\n  function d3_selection_classes(name) {\n    return (name + "").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) {\n        name[i](this, value);\n      }\n    }\n    function classedFunction() {\n      var i = -1,\n          x = value.apply(this, arguments);\n      while (++i < n) {\n        name[i](this, x);\n      }\n    }\n    return typeof value === "function" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function (node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute("class") || "";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));\n      } else {\n        node.setAttribute("class", d3_collapse(c.replace(re, " ")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function (name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== "string") {\n        if (n < 2) value = "";\n        for (priority in name) {\n          this.each(d3_selection_style(priority, name[priority], value));\n        }return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = "";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name);else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function (name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === "string") return this.node()[name];\n      for (value in name) {\n        this.each(d3_selection_property(value, name[value]));\n      }return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name];else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function (value) {\n    return arguments.length ? this.each(typeof value === "function" ? function () {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? "" : v;\n    } : value == null ? function () {\n      this.textContent = "";\n    } : function () {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function (value) {\n    return arguments.length ? this.each(typeof value === "function" ? function () {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? "" : v;\n    } : value == null ? function () {\n      this.innerHTML = "";\n    } : function () {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function (name) {\n    name = d3_selection_creator(name);\n    return this.select(function () {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument,\n          namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function (name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function () {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function () {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function (value, key) {\n    var i = -1,\n        n = this.length,\n        group,\n        node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i,\n          n = group.length,\n          m = groupData.length,\n          n0 = Math.min(n, m),\n          updateNodes = new Array(m),\n          enterNodes = new Array(m),\n          exitNodes = new Array(n),\n          node,\n          nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(),\n            keyValues = new Array(n),\n            keyValue;\n        for (i = -1; ++i < n;) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m;) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n;) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0;) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (; i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (; i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]),\n        update = d3_selection([]),\n        exit = d3_selection([]);\n    if (typeof value === "function") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function () {\n      return enter;\n    };\n    update.exit = function () {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function (value) {\n    return arguments.length ? this.property("__data__", value) : this.property("__data__");\n  };\n  d3_selectionPrototype.filter = function (filter) {\n    var subgroups = [],\n        subgroup,\n        group,\n        node;\n    if (typeof filter !== "function") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function () {\n      return _d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function () {\n    for (var j = -1, m = this.length; ++j < m;) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function (comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m;) {\n      this[j].sort(comparator);\n    }return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function (a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function (callback) {\n    return d3_selection_each(this, function (node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function (callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function () {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function () {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function () {\n    var n = 0;\n    d3_selection_each(this, function () {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function (selector) {\n    var subgroups = [],\n        subgroup,\n        subnode,\n        upgroup,\n        group,\n        node;\n    for (var j = -1, m = this.length; ++j < m;) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n;) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function (name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function (d, i, j) {\n      var group = enter[j].update,\n          n = group.length,\n          node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) {}\n      return node;\n    };\n  }\n  d3.select = function (node) {\n    var group;\n    if (typeof node === "string") {\n      group = [d3_select(node, d3_document)];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [node];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([group]);\n  };\n  d3.selectAll = function (nodes) {\n    var group;\n    if (typeof nodes === "string") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([group]);\n  };\n  d3_selectionPrototype.on = function (type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== "string") {\n        if (n < 2) listener = false;\n        for (capture in type) {\n          this.each(d3_selection_on(capture, type[capture], listener));\n        }return this;\n      }\n      if (n < 2) return (n = this.node()["__on" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = "__on" + type,\n        i = type.indexOf("."),\n        wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),\n          match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function (k) {\n      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function (e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function (e) {\n      var target = this,\n          related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect,\n      d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = ".dragsuppress-" + ++d3_event_dragId,\n        click = "click" + name,\n        w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style,\n          select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = "none";\n    }\n    return function (suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function off() {\n          w.on(click, null);\n        };\n        w.on(click, function () {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function (container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select("body").append("svg").style({\n            position: "absolute",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: "none"\n          }, "important");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY;else point.x = e.clientX, point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    var rect = container.getBoundingClientRect();\n    return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];\n  }\n  d3.touch = function (container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function () {\n    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"),\n        origin = null,\n        mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"),\n        touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");\n    function drag() {\n      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function () {\n        var that = this,\n            target = d3.event.target.correspondingElement || d3.event.target,\n            parent = that.parentNode,\n            dispatch = event.of(that, arguments),\n            dragged = 0,\n            dragId = id(),\n            dragName = ".drag" + (dragId == null ? "" : "-" + dragId),\n            dragOffset,\n            dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended),\n            dragRestore = d3_event_dragSuppress(target),\n            position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]];\n        } else {\n          dragOffset = [0, 0];\n        }\n        dispatch({\n          type: "dragstart"\n        });\n        function moved() {\n          var position1 = position(parent, dragId),\n              dx,\n              dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: "drag",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: "dragend"\n          });\n        }\n      };\n    }\n    drag.origin = function (x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, "on");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function (container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function (touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6,\n      ε2 = ε * ε,\n      π = Math.PI,\n      τ = 2 * π,\n      τε = τ - ε,\n      halfπ = π / 2,\n      d3_radians = π / 180,\n      d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2,\n      ρ2 = 2,\n      ρ4 = 4;\n  d3.interpolateZoom = function (p0, p1) {\n    var ux0 = p0[0],\n        uy0 = p0[1],\n        w0 = p0[2],\n        ux1 = p1[0],\n        uy1 = p1[1],\n        w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function i(t) {\n        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S)];\n      };\n    } else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function i(t) {\n        var s = t * S,\n            coshr0 = d3_cosh(r0),\n            u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0)];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function () {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    },\n        translate0,\n        center0,\n        center,\n        size = [960, 500],\n        scaleExtent = d3_behavior_zoomInfinity,\n        duration = 250,\n        zooming = 0,\n        mousedown = "mousedown.zoom",\n        mousemove = "mousemove.zoom",\n        mouseup = "mouseup.zoom",\n        mousewheelTimer,\n        touchstart = "touchstart.zoom",\n        touchtime,\n        event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"),\n        x0,\n        x1,\n        y0,\n        y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {\n        return d3.event.wheelDelta;\n      }, "mousewheel") : (d3_behavior_zoomDelta = function d3_behavior_zoomDelta() {\n        return -d3.event.detail;\n      }, "MozMousePixelScroll");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function (g) {\n      g.each(function () {\n        var dispatch = event.of(this, arguments),\n            view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each("start.zoom", function () {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween("zoom:zoom", function () {\n            var dx = size[0],\n                dy = size[1],\n                cx = center0 ? center0[0] : dx / 2,\n                cy = center0 ? center0[1] : dy / 2,\n                i = d3.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);\n            return function (t) {\n              var l = i(t),\n                  k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each("interrupt.zoom", function () {\n            zoomended(dispatch);\n          }).each("end.zoom", function () {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function (_) {\n      if (!arguments.length) return [view.x, view.y];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function (_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function (_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];\n      return zoom;\n    };\n    zoom.center = function (_) {\n      if (!arguments.length) return center;\n      center = _ && [+_[0], +_[1]];\n      return zoom;\n    };\n    zoom.size = function (_) {\n      if (!arguments.length) return size;\n      size = _ && [+_[0], +_[1]];\n      return zoom;\n    };\n    zoom.duration = function (_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function (z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function (z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];\n    }\n    function point(l) {\n      return [l[0] * view.k + view.x, l[1] * view.k + view.y];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function (x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function (y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: "zoomstart"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: "zoom",\n        scale: view.k,\n        translate: [view.x, view.y]\n      });\n    }\n    function zoomended(dispatch) {\n      if (! --zooming) dispatch({\n        type: "zoomend"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this,\n          dispatch = event.of(that, arguments),\n          dragged = 0,\n          subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended),\n          location0 = location(d3.mouse(that)),\n          dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this,\n          dispatch = event.of(that, arguments),\n          locations0 = {},\n          distance0 = 0,\n          scale0,\n          zoomName = ".zoom-" + d3.event.changedTouches[0].identifier,\n          touchmove = "touchmove" + zoomName,\n          touchend = "touchend" + zoomName,\n          targets = [],\n          subject = d3.select(that),\n          dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function (t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(),\n            now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0],\n              q = touches[1],\n              dx = p[0] - q[0],\n              dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that),\n            p0,\n            l0,\n            p1,\n            l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1,\n              scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n          l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer);else d3_selection_interrupt.call(this), translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function () {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this),\n          k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, "on");\n  };\n  var d3_behavior_zoomInfinity = [0, Infinity],\n      d3_behavior_zoomDelta,\n      d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function () {\n    return this.rgb() + "";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function (k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function (k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function () {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360;else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function (k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function (k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function () {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047,\n      d3_lab_Y = 1,\n      d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function (k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function (k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function () {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116,\n        x = y + a / 500,\n        z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + "";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function (k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r,\n        g = this.g,\n        b = this.b,\n        i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function (k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function () {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function () {\n    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0,\n        g = 0,\n        b = 0,\n        m1,\n        m2,\n        color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(",");\n      switch (m1[1]) {\n        case "hsl":\n          {\n            return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n          }\n\n        case "rgb":\n          {\n            return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n          }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255),\n        max = Math.max(r, g, b),\n        d = max - min,\n        h,\n        s,\n        l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0);else if (g == max) h = (b - r) / d + 2;else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X),\n        y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y),\n        z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function (key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === "function" ? v : function () {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function (url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {},\n        dispatch = d3.dispatch("beforesend", "progress", "load", "error"),\n        headers = {},\n        request = new XMLHttpRequest(),\n        responseType = null;\n    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status,\n          result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function (event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function (name, value) {\n      name = (name + "").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name];else headers[name] = value + "";\n      return xhr;\n    };\n    xhr.mimeType = function (value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + "";\n      return xhr;\n    };\n    xhr.responseType = function (value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function (value) {\n      response = value;\n      return xhr;\n    };\n    ["get", "post"].forEach(function (method) {\n      xhr[method] = function () {\n        return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function (method, data, callback) {\n      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";\n      if (request.setRequestHeader) for (var name in headers) {\n        request.setRequestHeader(name, headers[name]);\n      }if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on("error", callback).on("load", function (request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function () {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, "on");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function (error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== "text" ? request.response : request.responseText;\n  }\n  d3.dsv = function (delimiter, mimeType) {\n    var reFormat = new RegExp(\'["\' + delimiter + "\\n]"),\n        delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function (_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function (request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function (text, f) {\n      var o;\n      return dsv.parseRows(text, function (row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function("d", "return {" + row.map(function (name, i) {\n          return JSON.stringify(name) + ": d[" + i + "]";\n        }).join(",") + "}");\n        o = f ? function (row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function (text, f) {\n      var EOL = {},\n          EOF = {},\n          rows = [],\n          N = text.length,\n          I = 0,\n          n = 0,\n          t,\n          eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/""/g, \'"\');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++),\n              k = 1;\n          if (c === 10) eol = true;else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function (rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(),\n          fields = [];\n      rows.forEach(function (row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {\n        return fields.map(function (field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join("\\n");\n    };\n    dsv.formatRows = function (rows) {\n      return rows.map(formatRow).join("\\n");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? \'"\' + text.replace(/\\"/g, \'""\') + \'"\' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(",", "text/csv");\n  d3.tsv = d3.dsv("\t", "text/tab-separated-values");\n  var d3_timer_queueHead,\n      d3_timer_queueTail,\n      d3_timer_interval,\n      d3_timer_timeout,\n      d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function (callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function () {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay,\n        timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer;else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(),\n        delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function () {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(),\n        timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0,\n        t1 = d3_timer_queueHead,\n        time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function (x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"].map(d3_formatPrefix);\n  d3.formatPrefix = function (value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function (d) {\n        return d / k;\n      } : function (d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal,\n        locale_thousands = locale.thousands,\n        locale_grouping = locale.grouping,\n        locale_currency = locale.currency,\n        formatGroup = locale_grouping && locale_thousands ? function (value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = locale_grouping[0],\n          length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function (specifier) {\n      var match = d3_format_re.exec(specifier),\n          fill = match[1] || " ",\n          align = match[2] || ">",\n          sign = match[3] || "-",\n          symbol = match[4] || "",\n          zfill = match[5],\n          width = +match[6],\n          comma = match[7],\n          precision = match[8],\n          type = match[9],\n          scale = 1,\n          prefix = "",\n          suffix = "",\n          integer = false,\n          exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === "0" && align === "=") {\n        zfill = fill = "0";\n        align = "=";\n      }\n      switch (type) {\n        case "n":\n          comma = true;\n          type = "g";\n          break;\n\n        case "%":\n          scale = 100;\n          suffix = "%";\n          type = "f";\n          break;\n\n        case "p":\n          scale = 100;\n          suffix = "%";\n          type = "r";\n          break;\n\n        case "b":\n        case "o":\n        case "x":\n        case "X":\n          if (symbol === "#") prefix = "0" + type.toLowerCase();\n\n        case "c":\n          exponent = false;\n\n        case "d":\n          integer = true;\n          precision = 0;\n          break;\n\n        case "s":\n          scale = -1;\n          type = "r";\n          break;\n      }\n      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == "r" && !precision) type = "g";\n      if (precision != null) {\n        if (type == "g") precision = Math.max(1, Math.min(21, precision));else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function (value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return "";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf("."),\n            before,\n            after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf("e") : -1;\n          if (j < 0) before = value, after = "";else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length),\n            padding = length < width ? new Array(length = width - length + 1).join(fill) : "";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function b(x) {\n      return x.toString(2);\n    },\n    c: function c(x) {\n      return String.fromCharCode(x);\n    },\n    o: function o(x) {\n      return x.toString(8);\n    },\n    x: function x(_x) {\n      return _x.toString(16);\n    },\n    X: function X(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function g(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function e(x, p) {\n      return x.toExponential(p);\n    },\n    f: function f(x, p) {\n      return x.toFixed(p);\n    },\n    r: function r(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + "";\n  }\n  var d3_time = d3.time = {},\n      d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function getDate() {\n      return this._.getUTCDate();\n    },\n    getDay: function getDay() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function getFullYear() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function getHours() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function getMilliseconds() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function getMinutes() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function getMonth() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function getSeconds() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function getTime() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function getTimezoneOffset() {\n      return 0;\n    },\n    valueOf: function valueOf() {\n      return this._.valueOf();\n    },\n    setDate: function setDate() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function setDay() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function setFullYear() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function setHours() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function setMilliseconds() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function setMinutes() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function setMonth() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function setSeconds() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function setTime() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date),\n          d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0),\n          times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) {\n          times.push(new Date(+time)), step(time, 1);\n        }\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function (date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function (date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function (date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function (date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function (date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function (date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function (date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function (date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function (day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function (date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function (date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function (date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + "s"] = interval.range;\n    d3_time[day + "s"].utc = interval.utc.range;\n    d3_time[day + "OfYear"] = function (date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_days = locale.days,\n        locale_shortDays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            c,\n            p,\n            f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join("");\n      }\n      format.parse = function (string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        },\n            i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if ("p" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc,\n            date = new (localZ ? d3_date_utc : d3_date)();\n        if ("j" in d) date.setFullYear(d.y, 0, d.j);else if ("W" in d || "U" in d) {\n          if (!("w" in d)) d.w = "W" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function () {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c,\n          p,\n          t,\n          i = 0,\n          n = template.length,\n          m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function (template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function (string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(),\n        d3_time_dayRe = d3_time_formatRe(locale_days),\n        d3_time_dayLookup = d3_time_formatLookup(locale_days),\n        d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays),\n        d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays),\n        d3_time_monthRe = d3_time_formatRe(locale_months),\n        d3_time_monthLookup = d3_time_formatLookup(locale_months),\n        d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths),\n        d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function (p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function a(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function A(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function b(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function B(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function d(_d, p) {\n        return d3_time_formatPad(_d.getDate(), p, 2);\n      },\n      e: function e(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function H(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function I(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function j(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function L(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function m(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function M(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function p(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function S(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function U(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function w(d) {\n        return d.getDay();\n      },\n      W: function W(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function y(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function Y(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      "%": function _() {\n        return "%";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      "%": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    "-": "",\n    _: " ",\n    "0": "0"\n  },\n      d3_time_numberRe = /^\\s*\\d+/,\n      d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? "-" : "",\n        string = (sign ? -value : value) + "",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(),\n        i = -1,\n        n = names.length;\n    while (++i < n) {\n      map.set(names[i].toLowerCase(), i);\n    }return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return (/^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, i + 5) : -1\n    );\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(),\n        zs = z > 0 ? "-" : "+",\n        zh = abs(z) / 60 | 0,\n        zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length,\n        i = -1;\n    while (++i < n) {\n      formats[i][0] = this(formats[i][0]);\n    }return function (date) {\n      var i = 0,\n          f = formats[i];\n      while (!f[1](date)) {\n        f = formats[++i];\n      }return f[0](date);\n    };\n  }\n  d3.locale = function (locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: ".",\n    thousands: ",",\n    grouping: [3],\n    currency: ["$", ""],\n    dateTime: "%a %b %e %X %Y",\n    date: "%m/%d/%Y",\n    time: "%H:%M:%S",\n    periods: ["AM", "PM"],\n    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],\n    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],\n    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function add(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t;else this.s = d3_adderTemp.t;\n    },\n    reset: function reset() {\n      this.s = this.t = 0;\n    },\n    valueOf: function valueOf() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function (object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function Feature(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function FeatureCollection(object, listener) {\n      var features = object.features,\n          i = -1,\n          n = features.length;\n      while (++i < n) {\n        d3_geo_streamGeometry(features[i].geometry, listener);\n      }\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function Sphere(object, listener) {\n      listener.sphere();\n    },\n    Point: function Point(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function MultiPoint(object, listener) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        object = coordinates[i], listener.point(object[0], object[1], object[2]);\n      }\n    },\n    LineString: function LineString(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function MultiLineString(object, listener) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        d3_geo_streamLine(coordinates[i], listener, 0);\n      }\n    },\n    Polygon: function Polygon(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function MultiPolygon(object, listener) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        d3_geo_streamPolygon(coordinates[i], listener);\n      }\n    },\n    GeometryCollection: function GeometryCollection(object, listener) {\n      var geometries = object.geometries,\n          i = -1,\n          n = geometries.length;\n      while (++i < n) {\n        d3_geo_streamGeometry(geometries[i], listener);\n      }\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1,\n        n = coordinates.length - closed,\n        coordinate;\n    listener.lineStart();\n    while (++i < n) {\n      coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    }listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1,\n        n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) {\n      d3_geo_streamLine(coordinates[i], listener, 1);\n    }listener.polygonEnd();\n  }\n  d3.geo.area = function (object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum,\n      d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function sphere() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function polygonStart() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function polygonEnd() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function (λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0,\n          sdλ = dλ >= 0 ? 1 : -1,\n          adλ = sdλ * dλ,\n          cosφ = Math.cos(φ),\n          sinφ = Math.sin(φ),\n          k = sinφ0 * sinφ,\n          u = cosφ0 * cosφ + k * Math.cos(adλ),\n          v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function () {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0],\n        φ = spherical[1],\n        cosφ = Math.cos(φ);\n    return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function () {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);else if (dλSum > ε) φ1 = 90;else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [λ0 = λ, λ1 = λ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p),\n            equatorial = [normal[1], -normal[0], 0],\n            inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_,\n            s = dλ > 0 ? 1 : -1,\n            λi = inflection[0] * d3_degrees * s,\n            antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function (feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity,\n            dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[λ0, φ0], [λ1, φ1]];\n    };\n  }();\n  d3.geo.centroid = function (object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2,\n        y = d3_geo_centroidY2,\n        z = d3_geo_centroidZ2,\n        m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [NaN, NaN];\n    }\n    return [Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function polygonStart() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function polygonEnd() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function (λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians),\n          x = cosφ * Math.cos(λ),\n          y = cosφ * Math.sin(λ),\n          z = Math.sin(φ),\n          w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function (λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function () {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians),\n          x = cosφ * Math.cos(λ),\n          y = cosφ * Math.sin(λ),\n          z = Math.sin(φ),\n          cx = y0 * z - z0 * y,\n          cy = z0 * x - x0 * z,\n          cz = x0 * y - y0 * x,\n          m = Math.sqrt(cx * cx + cy * cy + cz * cz),\n          u = x0 * x + y0 * y + z0 * z,\n          v = m && -d3_acos(u) / m,\n          w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function (x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [],\n        clip = [];\n    segments.forEach(function (segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n,\n          p0 = segment[0],\n          p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) {\n          listener.point((p0 = segment[i])[0], p0[1]);\n        }listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true),\n          b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0],\n        points,\n        point;\n    while (1) {\n      var current = start,\n          isSubject = true;\n      while (current.v) {\n        if ((current = current.n) === start) return;\n      }points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) {\n              listener.point((point = points[i])[0], point[1]);\n            }\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) {\n              listener.point((point = points[i])[0], point[1]);\n            }\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function (rotate, listener) {\n      var line = clipLine(listener),\n          rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function polygonStart() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function polygonEnd() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function sphere() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(),\n          ringListener = clipLine(buffer),\n          polygonStarted = false,\n          polygon,\n          ring;\n      function pointRing(λ, φ) {\n        ring.push([λ, φ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(),\n            ringSegments = buffer.buffer(),\n            segment,\n            n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1,\n              i = -1,\n              point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) {\n              listener.point((point = segment[i])[0], point[1]);\n            }listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [],\n        line;\n    return {\n      lineStart: function lineStart() {\n        lines.push(line = []);\n      },\n      point: function point(λ, φ) {\n        line.push([λ, φ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function buffer() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function rejoin() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -π / 2]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN,\n        φ0 = NaN,\n        sλ0 = NaN,\n        _clean;\n    return {\n      lineStart: function lineStart() {\n        listener.lineStart();\n        _clean = 1;\n      },\n      point: function point(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π,\n            dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          _clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          _clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function lineEnd() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function clean() {\n        return 2 - _clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0,\n        cosφ1,\n        sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0],\n        parallel = point[1],\n        meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0],\n        polarAngle = 0,\n        winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i],\n          m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0],\n          λ0 = point0[0],\n          φ0 = point0[1] / 2 + π / 4,\n          sinφ0 = Math.sin(φ0),\n          cosφ0 = Math.cos(φ0),\n          j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0],\n            φ = point[1] / 2 + π / 4,\n            sinφ = Math.sin(φ),\n            cosφ = Math.cos(φ),\n            dλ = λ - λ0,\n            sdλ = dλ >= 0 ? 1 : -1,\n            adλ = sdλ * dλ,\n            antimeridian = adλ > π,\n            k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius),\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > ε,\n        interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-π, radius - π]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, _clean2;\n      return {\n        lineStart: function lineStart() {\n          v00 = v0 = false;\n          _clean2 = 1;\n        },\n        point: function point(λ, φ) {\n          var point1 = [λ, φ],\n              point2,\n              v = visible(λ, φ),\n              c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            _clean2 = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              _clean2 = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function lineEnd() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function clean() {\n          return _clean2 | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a),\n          pb = d3_geo_cartesian(b);\n      var n1 = [1, 0, 0],\n          n2 = d3_geo_cartesianCross(pa, pb),\n          n2n2 = d3_geo_cartesianDot(n2, n2),\n          n1n2 = n2[0],\n          determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = d3_geo_cartesianCross(n1, n2),\n          A = d3_geo_cartesianScale(n1, c1),\n          B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2,\n          w = d3_geo_cartesianDot(A, u),\n          uu = d3_geo_cartesianDot(u, u),\n          t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2),\n          q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0],\n          λ1 = b[0],\n          φ0 = a[1],\n          φ1 = b[1],\n          z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0,\n          polar = abs(δλ - π) < ε,\n          meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [q, d3_geo_spherical(q1)];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius,\n          code = 0;\n      if (λ < -r) code |= 1;else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4;else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function (line) {\n      var a = line.a,\n          b = line.b,\n          ax = a.x,\n          ay = a.y,\n          bx = b.x,\n          by = b.y,\n          t0 = 0,\n          t1 = 1,\n          dx = bx - ax,\n          dy = by - ay,\n          r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function () {\n    var x0,\n        y0,\n        x1,\n        y1,\n        _stream,\n        clip,\n        clipExtent = {\n      stream: function stream(output) {\n        if (_stream) _stream.valid = false;\n        _stream = clip(output);\n        _stream.valid = true;\n        return _stream;\n      },\n      extent: function extent(_) {\n        if (!arguments.length) return [[x0, y0], [x1, y1]];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (_stream) _stream.valid = false, _stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([[0, 0], [960, 500]]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function (listener) {\n      var listener_ = listener,\n          bufferListener = d3_geo_clipBufferListener(),\n          clipLine = d3_geom_clipLine(x0, y0, x1, y1),\n          segments,\n          polygon,\n          ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function polygonStart() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function polygonEnd() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([x0, y1]),\n              inside = clean && clipStartInside,\n              visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0,\n            n = polygon.length,\n            y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0,\n            a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y);else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0,\n        φ1 = π / 3,\n        m = d3_geo_projectionMutator(projectAt),\n        p = m(φ0, φ1);\n    p.parallels = function (_) {\n      if (!arguments.length) return [φ0 / π * 180, φ1 / π * 180];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0),\n        n = (sinφ0 + Math.sin(φ1)) / 2,\n        C = 1 + sinφ0 * (2 * n - sinφ0),\n        ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ)];\n    }\n    forward.invert = function (x, y) {\n      var ρ0_y = ρ0 - y;\n      return [Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function () {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function () {\n    return d3.geo.conicEqualArea().rotate([96, 0]).center([-.6, 38.7]).parallels([29.5, 45.5]).scale(1070);\n  };\n  d3.geo.albersUsa = function () {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]);\n    var hawaii = d3.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]);\n    var _point,\n        pointStream = {\n      point: function point(x, y) {\n        _point = [x, y];\n      }\n    },\n        lower48Point,\n        alaskaPoint,\n        hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0],\n          y = coordinates[1];\n      _point = null;\n      (lower48Point(x, y), _point) || (alaskaPoint(x, y), _point) || hawaiiPoint(x, y);\n      return _point;\n    }\n    albersUsa.invert = function (coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function (stream) {\n      var lower48Stream = lower48.stream(stream),\n          alaskaStream = alaska.stream(stream),\n          hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function point(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function sphere() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function lineStart() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function lineEnd() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function polygonStart() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function polygonEnd() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function (_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function (_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function (_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(),\n          x = +_[0],\n          y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([[x - .455 * k, y - .238 * k], [x + .455 * k, y + .238 * k]]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([x - .307 * k, y + .201 * k]).clipExtent([[x - .425 * k + ε, y + .12 * k + ε], [x - .214 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([x - .205 * k, y + .212 * k]).clipExtent([[x - .214 * k + ε, y + .166 * k + ε], [x - .115 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum,\n      d3_geo_pathAreaPolygon,\n      d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function polygonStart() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function polygonEnd() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function (x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function () {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5),\n        buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function lineStart() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function pointRadius(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function result() {\n        if (buffer.length) {\n          var result = buffer.join("");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push("M", x, ",", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push("M", x, ",", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push("L", x, ",", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push("Z");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function polygonStart() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function polygonEnd() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function (x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0,\n          dy = y - y0,\n          z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function (x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0,\n          dy = y - y0,\n          z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function () {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var _pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function lineStart() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function pointRadius(_) {\n        _pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + _pointRadius, y);\n      context.arc(x, y, _pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5,\n        cosMinDistance = Math.cos(30 * d3_radians),\n        maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function (x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function polygonStart() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function polygonEnd() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([λ, φ]),\n            p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = Math.sqrt(a * a + b * b + c * c),\n            φ2 = Math.asin(c /= m),\n            λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a),\n            p = project(λ2, φ2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function (_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function () {\n    var pointRadius = 4.5,\n        projection,\n        context,\n        projectStream,\n        contextStream,\n        cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function (object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function (object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0] : [NaN, NaN];\n    };\n    path.bounds = function (object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [[d3_geo_pathBoundsX0, d3_geo_pathBoundsY0], [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]];\n    };\n    path.projection = function (_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function (_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function (_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function (x, y) {\n      return project([x * d3_degrees, y * d3_degrees]);\n    });\n    return function (stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function (methods) {\n    return {\n      stream: function stream(_stream2) {\n        var transform = new d3_geo_transform(_stream2);\n        for (var k in methods) {\n          transform[k] = methods[k];\n        }return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function point(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function sphere() {\n      this.stream.sphere();\n    },\n    lineStart: function lineStart() {\n      this.stream.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function polygonStart() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function sphere() {\n        stream.sphere();\n      },\n      lineStart: function lineStart() {\n        stream.lineStart();\n      },\n      lineEnd: function lineEnd() {\n        stream.lineEnd();\n      },\n      polygonStart: function polygonStart() {\n        stream.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function () {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project,\n        rotate,\n        projectRotate,\n        projectResample = d3_geo_resample(function (x, y) {\n      x = project(x, y);\n      return [x[0] * k + δx, δy - x[1] * k];\n    }),\n        k = 150,\n        x = 480,\n        y = 250,\n        λ = 0,\n        φ = 0,\n        δλ = 0,\n        δφ = 0,\n        δγ = 0,\n        δx,\n        δy,\n        preclip = d3_geo_clipAntimeridian,\n        postclip = d3_identity,\n        clipAngle = null,\n        clipExtent = null,\n        stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [point[0] * k + δx, δy - point[1] * k];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [point[0] * d3_degrees, point[1] * d3_degrees];\n    }\n    projection.stream = function (output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function (_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function (_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function (_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function (_) {\n      if (!arguments.length) return [x, y];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function (_) {\n      if (!arguments.length) return [λ * d3_degrees, φ * d3_degrees];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function (_) {\n      if (!arguments.length) return [δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, "precision");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function () {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function (x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [λ, φ];\n  }\n  (d3.geo.equirectangular = function () {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function (rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function (coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function (λ, φ) {\n      return λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ),\n        sinδφ = Math.sin(δφ),\n        cosδγ = Math.cos(δγ),\n        sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ),\n          x = Math.cos(λ) * cosφ,\n          y = Math.sin(λ) * cosφ,\n          z = Math.sin(φ),\n          k = z * cosδφ + x * sinδφ;\n      return [Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ)];\n    }\n    rotation.invert = function (λ, φ) {\n      var cosφ = Math.cos(φ),\n          x = Math.cos(λ) * cosφ,\n          y = Math.sin(λ) * cosφ,\n          z = Math.sin(φ),\n          k = z * cosδγ - y * sinδγ;\n      return [Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ)];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function () {\n    var origin = [0, 0],\n        angle,\n        precision = 6,\n        interpolate;\n    function circle() {\n      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin,\n          rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert,\n          ring = [];\n      interpolate(null, null, 1, {\n        point: function point(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: "Polygon",\n        coordinates: [ring]\n      };\n    }\n    circle.origin = function (x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function (x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function (_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius),\n        sr = Math.sin(radius);\n    return function (from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([cr, -sr * Math.cos(t), -sr * Math.sin(t)]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function (a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians,\n        φ0 = a[1] * d3_radians,\n        φ1 = b[1] * d3_radians,\n        sinΔλ = Math.sin(Δλ),\n        cosΔλ = Math.cos(Δλ),\n        sinφ0 = Math.sin(φ0),\n        cosφ0 = Math.cos(φ0),\n        sinφ1 = Math.sin(φ1),\n        cosφ1 = Math.cos(φ1),\n        t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function () {\n    var x1,\n        x0,\n        X1,\n        X0,\n        y1,\n        y0,\n        Y1,\n        Y0,\n        dx = 10,\n        dy = dx,\n        DX = 90,\n        DY = 360,\n        x,\n        y,\n        X,\n        Y,\n        precision = 2.5;\n    function graticule() {\n      return {\n        type: "MultiLineString",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function () {\n      return lines().map(function (coordinates) {\n        return {\n          type: "LineString",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function () {\n      return {\n        type: "Polygon",\n        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]\n      };\n    };\n    graticule.extent = function (_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function (_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function (_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function (_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function (_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function (_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function (_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([[-180, -90 + ε], [180, 90 - ε]]).minorExtent([[-180, -80 - ε], [180, 80 + ε]]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function (x) {\n      return y.map(function (y) {\n        return [x, y];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function (y) {\n      return x.map(function (x) {\n        return [x, y];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function () {\n    var source = d3_source,\n        source_,\n        target = d3_target,\n        target_;\n    function greatArc() {\n      return {\n        type: "LineString",\n        coordinates: [source_ || source.apply(this, arguments), target_ || target.apply(this, arguments)]\n      };\n    }\n    greatArc.distance = function () {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function (_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === "function" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function (_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === "function" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function () {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function (source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0),\n        sy0 = Math.sin(y0),\n        cy1 = Math.cos(y1),\n        sy1 = Math.sin(y1),\n        kx0 = cy0 * Math.cos(x0),\n        ky0 = cy0 * Math.sin(x0),\n        kx1 = cy1 * Math.cos(x1),\n        ky1 = cy1 * Math.sin(x1),\n        d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))),\n        k = 1 / Math.sin(d);\n    var interpolate = d ? function (t) {\n      var B = Math.sin(t *= d) * k,\n          A = Math.sin(d - t) * k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees];\n    } : function () {\n      return [x0 * d3_degrees, y0 * d3_degrees];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function (object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function (λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function () {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians),\n          cosφ = Math.cos(φ),\n          t = abs((λ *= d3_radians) - λ0),\n          cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ),\n          cosφ = Math.cos(φ),\n          k = scale(cosλ * cosφ);\n      return [k * cosφ * Math.sin(λ), k * Math.sin(φ)];\n    }\n    azimuthal.invert = function (x, y) {\n      var ρ = Math.sqrt(x * x + y * y),\n          c = angle(ρ),\n          sinc = Math.sin(c),\n          cosc = Math.cos(c);\n      return [Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ)];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function (ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function () {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function () {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0),\n        t = function t(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    },\n        n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)),\n        F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ)];\n    }\n    forward.invert = function (x, y) {\n      var ρ0_y = F - y,\n          ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function () {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0),\n        n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0),\n        G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ)];\n    }\n    forward.invert = function (x, y) {\n      var ρ0_y = G - y;\n      return [Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function () {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function () {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [λ, Math.log(Math.tan(π / 4 + φ / 2))];\n  }\n  d3_geo_mercator.invert = function (x, y) {\n    return [x, 2 * Math.atan(Math.exp(y)) - halfπ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project),\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        clipAuto;\n    m.scale = function () {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function () {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function (_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(),\n              t = translate();\n          clipExtent([[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function () {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function () {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function () {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function (ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function () {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [Math.log(Math.tan(π / 4 + φ / 2)), -λ];\n  }\n  d3_geo_transverseMercator.invert = function (x, y) {\n    return [-y, 2 * Math.atan(Math.exp(x)) - halfπ];\n  };\n  (d3.geo.transverseMercator = function () {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator),\n        center = projection.center,\n        rotate = projection.rotate;\n    projection.center = function (_) {\n      return _ ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n    projection.rotate = function (_) {\n      return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n    return rotate([0, 0, 90]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function (vertices) {\n    var x = d3_geom_pointX,\n        y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x),\n          fy = d3_functor(y),\n          i,\n          n = data.length,\n          points = [],\n          flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) {\n        flippedPoints.push([points[i][0], -points[i][1]]);\n      }var upper = d3_geom_hullUpper(points),\n          lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0],\n          skipRight = lower[lower.length - 1] === upper[upper.length - 1],\n          polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) {\n        polygon.push(data[points[upper[i]][2]]);\n      }for (i = +skipLeft; i < lower.length - skipRight; ++i) {\n        polygon.push(data[points[lower[i]][2]]);\n      }return polygon;\n    }\n    hull.x = function (_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function (_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length,\n        hull = [0, 1],\n        hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) {\n        --hs;\n      }hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function (coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function () {\n    var i = -1,\n        n = this.length,\n        a,\n        b = this[n - 1],\n        area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function (k) {\n    var i = -1,\n        n = this.length,\n        x = 0,\n        y = 0,\n        a,\n        b = this[n - 1],\n        c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [x * k, y * k];\n  };\n  d3_geom_polygonPrototype.clip = function (subject) {\n    var input,\n        closed = d3_geom_polygonClosed(subject),\n        i = -1,\n        n = this.length - d3_geom_polygonClosed(this),\n        j,\n        m,\n        a = this[n - 1],\n        b,\n        c,\n        d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0],\n        x3 = a[0],\n        x21 = d[0] - x1,\n        x43 = b[0] - x3,\n        y1 = c[1],\n        y3 = a[1],\n        y21 = d[1] - y1,\n        y43 = b[1] - y3,\n        ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [x1 + ua * x21, y1 + ua * y21];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0],\n        b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges,\n      d3_geom_voronoiCells,\n      d3_geom_voronoiBeaches,\n      d3_geom_voronoiBeachPool = [],\n      d3_geom_voronoiFirstCircle,\n      d3_geom_voronoiCircles,\n      d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = {\n      x: x,\n      y: y\n    },\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x,\n        directrix = site.y,\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L;else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site,\n        ax = lSite.x,\n        ay = lSite.y,\n        bx = site.x - ax,\n        by = site.y - ay,\n        rSite = rArc.site,\n        cx = rSite.x - ax,\n        cy = rSite.y - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site.x,\n        rfocy = site.y,\n        pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x,\n        lfocy = site.y,\n        plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function () {\n    var halfEdges = this.edges,\n        iHalfEdge = halfEdges.length,\n        edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0],\n        x1 = extent[1][0],\n        y0 = extent[0][1],\n        y1 = extent[1][1],\n        x2,\n        y2,\n        x3,\n        y3,\n        cells = d3_geom_voronoiCells,\n        iCell = cells.length,\n        cell,\n        iHalfEdge,\n        halfEdges,\n        nHalfEdges,\n        start,\n        end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x,\n        by = cSite.y,\n        ax = lSite.x - bx,\n        ay = lSite.y - by,\n        cx = rSite.x - bx,\n        cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d,\n        cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null,\n        node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L;else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R;else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges,\n        clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]),\n        i = edges.length,\n        e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a,\n        x0 = extent[0][0],\n        x1 = extent[1][0],\n        y0 = extent[0][1],\n        y1 = extent[1][1],\n        lSite = edge.l,\n        rSite = edge.r,\n        lx = lSite.x,\n        ly = lSite.y,\n        rx = rSite.x,\n        ry = rSite.y,\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        };else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        };else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          };else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          };else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a,\n        vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function start() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function end() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function insert(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) {\n            after = after.L;\n          }after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function remove(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n      if (!left) next = right;else if (!right) next = left;else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next;else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q;else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q;else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) {\n      node = node.L;\n    }return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(),\n        x0,\n        y0,\n        circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function (points) {\n    var x = d3_geom_pointX,\n        y = d3_geom_pointY,\n        fx = x,\n        fy = y,\n        clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length),\n          x0 = clipExtent[0][0],\n          y0 = clipExtent[0][1],\n          x1 = clipExtent[1][0],\n          y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {\n        var edges = cell.edges,\n            site = cell.site,\n            polygon = polygons[i] = edges.length ? edges.map(function (e) {\n          var s = e.start();\n          return [s.x, s.y];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function (d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function (data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {\n        return edge.l && edge.r;\n      }).map(function (edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function (data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {\n        var site = cell.site,\n            edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder),\n            j = -1,\n            m = edges.length,\n            e0,\n            s0,\n            e1 = edges[m - 1].edge,\n            s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([data[i], data[s0.i], data[s1.i]]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function (_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function (_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function (_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function (_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [[0, 0], _]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [[-1e6, -1e6], [1e6, 1e6]];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function (vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function (points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX,\n        y = d3_geom_pointY,\n        compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d,\n          fx = d3_functor(x),\n          fy = d3_functor(y),\n          xs,\n          ys,\n          i,\n          n,\n          x1_,\n          y1_,\n          x2_,\n          y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i),\n              y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_,\n          dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx;else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x,\n              ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5,\n            ym = (y1 + y2) * .5,\n            right = x >= xm,\n            below = y >= ym,\n            i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm;else x2 = xm;\n        if (below) y1 = ym;else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function (d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function (f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function (point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function (_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function (_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function (_) {\n      if (!arguments.length) return x1 == null ? null : [[x1, y1], [x2, y2]];\n      if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function (_) {\n      if (!arguments.length) return x1 == null ? null : [x2 - x1, y2 - y1];\n      if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5,\n          sy = (y1 + y2) * .5,\n          children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity,\n        closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point,\n            dx = x - node.x,\n            dy = y - node.y,\n            distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes,\n          xm = (x1 + x2) * .5,\n          ym = (y1 + y2) * .5,\n          right = x >= xm,\n          below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n          case 0:\n            find(node, x1, y1, xm, ym);\n            break;\n\n          case 1:\n            find(node, xm, y1, x2, ym);\n            break;\n\n          case 2:\n            find(node, x1, ym, xm, y2);\n            break;\n\n          case 3:\n            find(node, xm, ym, x2, y2);\n            break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r,\n        ag = a.g,\n        ab = a.b,\n        br = b.r - ar,\n        bg = b.g - ag,\n        bb = b.b - ab;\n    return function (t) {\n      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {},\n        c = {},\n        k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function (t) {\n      for (k in i) {\n        c[k] = i[k](t);\n      }return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function (t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0,\n        am,\n        bm,\n        bs,\n        i = -1,\n        s = [],\n        q = [];\n    a = a + "", b = b + "";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs;else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm;else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs;else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {\n      return b(t) + "";\n    }) : function () {\n      return b;\n    } : (b = q.length, function (t) {\n      for (var i = 0, o; i < b; ++i) {\n        s[(o = q[i]).i] = o.x(t);\n      }return s.join("");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length,\n        f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) {}\n    return f;\n  }\n  d3.interpolators = [function (a, b) {\n    var t = typeof b === "undefined" ? "undefined" : _typeof(b);\n    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  }];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [],\n        c = [],\n        na = a.length,\n        nb = b.length,\n        n0 = Math.min(a.length, b.length),\n        i;\n    for (i = 0; i < n0; ++i) {\n      x.push(d3_interpolate(a[i], b[i]));\n    }for (; i < na; ++i) {\n      c[i] = a[i];\n    }for (; i < nb; ++i) {\n      c[i] = b[i];\n    }return function (t) {\n      for (i = 0; i < n0; ++i) {\n        c[i] = x[i](t);\n      }return c;\n    };\n  }\n  var d3_ease_default = function d3_ease_default() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function quad() {\n      return d3_ease_quad;\n    },\n    cubic: function cubic() {\n      return d3_ease_cubic;\n    },\n    sin: function sin() {\n      return d3_ease_sin;\n    },\n    exp: function exp() {\n      return d3_ease_exp;\n    },\n    circle: function circle() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function bounce() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    "in": d3_identity,\n    out: d3_ease_reverse,\n    "in-out": d3_ease_reflect,\n    "out-in": function outIn(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function (name) {\n    var i = name.indexOf("-"),\n        t = i >= 0 ? name.slice(0, i) : name,\n        m = i >= 0 ? name.slice(i + 1) : "in";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function (t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function (t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function (t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t,\n        t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function (t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a);else a = 1, s = p / 4;\n    return function (t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function (t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h,\n        ac = a.c,\n        al = a.l,\n        bh = b.h - ah,\n        bc = b.c - ac,\n        bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;\n    return function (t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h,\n        as = a.s,\n        al = a.l,\n        bh = b.h - ah,\n        bs = b.s - as,\n        bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;\n    return function (t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l,\n        aa = a.a,\n        ab = a.b,\n        bl = b.l - al,\n        ba = b.a - aa,\n        bb = b.b - ab;\n    return function (t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function (t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function (string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");\n    return (d3.transform = function (string) {\n      if (string != null) {\n        g.setAttribute("transform", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [m.a, m.b],\n        r1 = [m.c, m.d],\n        kx = d3_transformNormalize(r0),\n        kz = d3_transformDot(r0, r1),\n        ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [m.e, m.f];\n    this.scale = [kx, ky];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function () {\n    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + "," : "";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push("translate(", null, ",", null, ")");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push("translate(" + tb + ")");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360;else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [],\n        q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function (t) {\n      var i = -1,\n          n = q.length,\n          o;\n      while (++i < n) {\n        s[(o = q[i]).i] = o.x(t);\n      }return s.join("");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function (x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function (x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function () {\n    return function (links) {\n      var paths = [],\n          i = -1,\n          n = links.length;\n      while (++i < n) {\n        paths.push(d3_layout_bundlePath(links[i]));\n      }return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source,\n        end = link.target,\n        lca = d3_layout_bundleLeastCommonAncestor(start, end),\n        points = [start];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [],\n        parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a),\n        bNodes = d3_layout_bundleAncestors(b),\n        aNode = aNodes.pop(),\n        bNode = bNodes.pop(),\n        sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function () {\n    var chord = {},\n        chords,\n        groups,\n        matrix,\n        n,\n        padding = 0,\n        sortGroups,\n        sortSubgroups,\n        sortChords;\n    function relayout() {\n      var subgroups = {},\n          groupSums = [],\n          groupIndex = d3.range(n),\n          subgroupIndex = [],\n          k,\n          x,\n          x0,\n          i,\n          j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function (a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function (d, i) {\n          d.sort(function (a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i],\n              dj = subgroupIndex[di][j],\n              v = matrix[di][dj],\n              a0 = x,\n              a1 = x += v * k;\n          subgroups[di + "-" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + "-" + j],\n              target = subgroups[j + "-" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function (a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function (x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function (x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function (x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function (x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function (x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function () {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function () {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function () {\n    var force = {},\n        event = d3.dispatch("start", "tick", "end"),\n        timer,\n        size = [1, 1],\n        drag,\n        alpha,\n        friction = .9,\n        linkDistance = d3_layout_forceLinkDistance,\n        linkStrength = d3_layout_forceLinkStrength,\n        charge = -30,\n        chargeDistance2 = d3_layout_forceChargeDistance2,\n        gravity = .1,\n        theta2 = .64,\n        nodes = [],\n        links = [],\n        distances,\n        strengths,\n        charges;\n    function repulse(node) {\n      return function (quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x,\n              dy = quad.cy - node.y,\n              dw = x2 - x1,\n              dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function () {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: "end",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length,\n          m = links.length,\n          q,\n          i,\n          o,\n          s,\n          t,\n          l,\n          k,\n          x,\n          y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: "tick",\n        alpha: alpha\n      });\n    };\n    force.nodes = function (x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function (x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function (x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function (x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === "function" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function (x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === "function" ? x : +x;\n      return force;\n    };\n    force.friction = function (x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function (x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === "function" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function (x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function (x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function (x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function (x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: "end",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: "start",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function () {\n      var i,\n          n = nodes.length,\n          m = links.length,\n          w = size[0],\n          h = size[1],\n          neighbors,\n          o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == "number") o.source = nodes[o.source];\n        if (typeof o.target == "number") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position("x", w);\n        if (isNaN(o.y)) o.y = position("y", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) {\n        distances[i] = +linkDistance.call(this, links[i], i);\n      } else for (i = 0; i < m; ++i) {\n        distances[i] = linkDistance;\n      }strengths = [];\n      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) {\n        strengths[i] = +linkStrength.call(this, links[i], i);\n      } else for (i = 0; i < m; ++i) {\n        strengths[i] = linkStrength;\n      }charges = [];\n      if (typeof charge === "function") for (i = 0; i < n; ++i) {\n        charges[i] = +charge.call(this, nodes[i], i);\n      } else for (i = 0; i < n; ++i) {\n        charges[i] = charge;\n      }function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i],\n            j = -1,\n            l = candidates.length,\n            x;\n        while (++j < l) {\n          if (!isNaN(x = candidates[j][dimension])) return x;\n        }return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function () {\n      return force.alpha(.1);\n    };\n    force.stop = function () {\n      return force.alpha(0);\n    };\n    force.drag = function () {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, "on");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0,\n        cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes,\n          n = nodes.length,\n          i = -1,\n          c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20,\n      d3_layout_forceLinkStrength = 1,\n      d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function () {\n    var sort = d3_layout_hierarchySort,\n        children = d3_layout_hierarchyChildren,\n        value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [root],\n          nodes = [],\n          node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function (node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function (x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function (x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function (x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function (root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function (node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function (node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, "sort", "children", "value");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [node];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) {\n          nodes.push(children[n]);\n        }\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [node],\n        nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1,\n            n,\n            children;\n        while (++i < n) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function (parent) {\n      return (parent.children || []).map(function (child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function () {\n    var hierarchy = d3.layout.hierarchy(),\n        size = [1, 1];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1,\n            n,\n            c,\n            d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children,\n          d = 0;\n      if (children && (n = children.length)) {\n        var i = -1,\n            n;\n        while (++i < n) {\n          d = Math.max(d, depth(children[i]));\n        }\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function (x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function () {\n    var value = Number,\n        sort = d3_layout_pieSortByValue,\n        startAngle = 0,\n        endAngle = τ,\n        padAngle = 0;\n    function pie(data) {\n      var n = data.length,\n          values = data.map(function (d, i) {\n        return +value.call(pie, d, i);\n      }),\n          a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle),\n          da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a,\n          p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)),\n          pa = p * (da < 0 ? -1 : 1),\n          sum = d3.sum(values),\n          k = sum ? (da - n * pa) / sum : 0,\n          index = d3.range(n),\n          arcs = [],\n          v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {\n        return values[j] - values[i];\n      } : function (i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function (i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function (_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function (_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function (_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function (_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function (_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function () {\n    var values = d3_identity,\n        order = d3_layout_stackOrderDefault,\n        offset = d3_layout_stackOffsetZero,\n        out = d3_layout_stackOut,\n        x = d3_layout_stackX,\n        y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function (d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function (d) {\n        return d.map(function (v, i) {\n          return [x.call(stack, v, i), y.call(stack, v, i)];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length,\n          n,\n          i,\n          j,\n          o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function (x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function (x) {\n      if (!arguments.length) return order;\n      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function (x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function (z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function (z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function (z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    "inside-out": function insideOut(data) {\n      var n = data.length,\n          i,\n          j,\n          max = data.map(d3_layout_stackMaxIndex),\n          sums = data.map(d3_layout_stackReduceSum),\n          index = d3.range(n).sort(function (a, b) {\n        return max[a] - max[b];\n      }),\n          top = 0,\n          bottom = 0,\n          tops = [],\n          bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function reverse(data) {\n      return d3.range(data.length).reverse();\n    },\n    "default": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function silhouette(data) {\n      var n = data.length,\n          m = data[0].length,\n          sums = [],\n          max = 0,\n          i,\n          j,\n          o,\n          y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) {\n          o += data[i][j][1];\n        }if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function wiggle(data) {\n      var n = data.length,\n          x = data[0],\n          m = x.length,\n          i,\n          j,\n          k,\n          s1,\n          s2,\n          s3,\n          dx,\n          o,\n          o0,\n          y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) {\n          s1 += data[i][j][1];\n        }for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] -= o0;\n      }return y0;\n    },\n    expand: function expand(data) {\n      var n = data.length,\n          m = data[0].length,\n          k = 1 / n,\n          i,\n          j,\n          o,\n          y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) {\n          o += data[i][j][1];\n        }if (o) for (i = 0; i < n; i++) {\n          data[i][j][1] /= o;\n        } else for (i = 0; i < n; i++) {\n          data[i][j][1] = k;\n        }\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = 0;\n      }return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1,\n        m = data[0].length,\n        y0 = [];\n    while (++j < m) {\n      y0[j] = 0;\n    }return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1,\n        j = 0,\n        v = array[0][1],\n        k,\n        n = array.length;\n    for (; i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function () {\n    var frequency = true,\n        valuer = Number,\n        ranger = d3_layout_histogramRange,\n        binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [],\n          values = data.map(valuer, this),\n          range = ranger.call(this, values, i),\n          thresholds = binner.call(this, range, values, i),\n          bin,\n          i = -1,\n          n = values.length,\n          m = thresholds.length - 1,\n          k = frequency ? 1 : 1 / n,\n          x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function (x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function (x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function (x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === "number" ? function (range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function (x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1,\n        b = +range[0],\n        m = (range[1] - b) / n,\n        f = [];\n    while (++x <= n) {\n      f[x] = m * x + b;\n    }return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [d3.min(values), d3.max(values)];\n  }\n  d3.layout.pack = function () {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort),\n        padding = 0,\n        size = [1, 1],\n        radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i),\n          root = nodes[0],\n          w = size[0],\n          h = size[1],\n          r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function () {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function (d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function (d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function (d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function (_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function (_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === "function" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function (_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes,\n        xMin = Infinity,\n        xMax = -Infinity,\n        yMin = Infinity,\n        yMax = -Infinity,\n        a,\n        b,\n        c,\n        i,\n        j,\n        k,\n        n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0,\n              s1 = 1,\n              s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j);else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2,\n        cy = (yMin + yMax) / 2,\n        cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1,\n          n = children.length;\n      while (++i < n) {\n        d3_layout_packTransform(children[i], x, y, k);\n      }\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r,\n          dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function () {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null),\n        separation = d3_layout_treeSeparation,\n        size = [1, 1],\n        nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i),\n          root0 = nodes[0],\n          root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode);else {\n        var left = root0,\n            right = root0,\n            bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function (node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x,\n            kx = size[0] / (right.x + separation(right, left) / 2 + tx),\n            ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function (node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [root0]\n      },\n          queue = [root1],\n          node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function (x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function (x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function (x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children,\n        n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function () {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null),\n        separation = d3_layout_treeSeparation,\n        size = [1, 1],\n        nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i),\n          root = nodes[0],\n          previousNode,\n          x = 0;\n      d3_layout_hierarchyVisitAfter(root, function (node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root),\n          right = d3_layout_clusterRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function (node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function (x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function (x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function (x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function (child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function (x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children,\n        n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function () {\n    var hierarchy = d3.layout.hierarchy(),\n        round = Math.round,\n        size = [1, 1],\n        padding = null,\n        pad = d3_layout_treemapPadNull,\n        sticky = false,\n        stickies,\n        mode = "squarify",\n        ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1,\n          n = children.length,\n          child,\n          area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node),\n            row = [],\n            remaining = children.slice(),\n            child,\n            best = Infinity,\n            score,\n            u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy),\n            n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== "squarify" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node),\n            remaining = children.slice(),\n            child,\n            row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area,\n          r,\n          rmax = 0,\n          rmin = Infinity,\n          i = -1,\n          n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1,\n          n = row.length,\n          x = rect.x,\n          y = rect.y,\n          v = u ? round(row.area / u) : 0,\n          o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d),\n          root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1];else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([root], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function (x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function (x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x === "undefined" ? "undefined" : _typeof(x)) === "function" ? padFunction : type === "number" ? (x = [x, x, x, x], padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function (x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function (x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function (x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function (x) {\n      if (!arguments.length) return mode;\n      mode = x + "";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3],\n        y = node.y + padding[0],\n        dx = node.dx - padding[1] - padding[3],\n        dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function normal(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function () {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function logNormal() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function () {\n        return Math.exp(random());\n      };\n    },\n    bates: function bates(m) {\n      var random = d3.random.irwinHall(m);\n      return function () {\n        return random() / m;\n      };\n    },\n    irwinHall: function irwinHall(m) {\n      return function () {\n        for (var s = 0, j = 0; j < m; j++) {\n          s += Math.random();\n        }return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0],\n        stop = domain[domain.length - 1];\n    return start < stop ? [start, stop] : [stop, start];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]),\n        i = interpolate(range[0], range[1]);\n    return function (x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function floor(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function ceil(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [],\n        i = [],\n        j = 0,\n        k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function (x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function () {\n    return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear,\n          uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function (y) {\n      return input(y);\n    };\n    scale.domain = function (x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function (x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function (x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function (x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function (x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function (m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function (m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function (m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function () {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain),\n        span = extent[1] - extent[0],\n        step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),\n        err = m / span * step;\n    if (err <= .15) step *= 10;else if (err <= .35) step *= 5;else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === "s") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = "f";\n        format = d3.format(match.join(""));\n        return function (d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join("");\n    } else {\n      format = ",." + d3_scale_linearPrecision(range[2]) + "f";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;\n  }\n  d3.scale.log = function () {\n    return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1, 10]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function (x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function (x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function (_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function () {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function () {\n      var extent = d3_scaleExtent(domain),\n          ticks = [],\n          u = extent[0],\n          v = extent[1],\n          i = Math.floor(log(u)),\n          j = Math.ceil(log(v)),\n          n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (; i < j; i++) {\n            for (var k = 1; k < n; k++) {\n              ticks.push(pow(i) * k);\n            }\n          }ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (; i++ < j;) {\n            for (var k = n - 1; k > 0; k--) {\n              ticks.push(pow(i) * k);\n            }\n          }\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function (n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat;else if (typeof format !== "function") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function (d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : "";\n      };\n    };\n    scale.copy = function () {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(".0e"),\n      d3_scale_logNiceNegative = {\n    floor: function floor(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function ceil(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function () {\n    return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent),\n        powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function (x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function (x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function (m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function (m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function (m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function (x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function () {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function (x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function () {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function () {\n    return d3_scale_ordinal([], {\n      t: "range",\n      a: [[]]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function (i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function (x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1,\n          n = x.length,\n          xi;\n      while (++i < n) {\n        if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      }return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function (x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: "range",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function (x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0],\n          stop = x[1],\n          step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: "rangePoints",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function (x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0],\n          stop = x[1],\n          step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: "rangeRoundPoints",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function (x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0],\n          start = x[reverse - 0],\n          stop = x[1 - reverse],\n          step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: "rangeBands",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function (x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0],\n          start = x[reverse - 0],\n          stop = x[1 - reverse],\n          step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: "rangeRoundBands",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function () {\n      return rangeBand;\n    };\n    scale.rangeExtent = function () {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function () {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function () {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function () {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function () {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function () {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);\n  var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);\n  var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);\n  var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);\n  d3.scale.quantile = function () {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0,\n          q = range.length;\n      thresholds = [];\n      while (++k < q) {\n        thresholds[k - 1] = d3.quantile(domain, k / q);\n      }return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function (x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function (x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function () {\n      return thresholds;\n    };\n    scale.invertExtent = function (y) {\n      y = range.indexOf(y);\n      return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1]];\n    };\n    scale.copy = function () {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function () {\n    return d3_scale_quantize(0, 1, [0, 1]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function (x) {\n      if (!arguments.length) return [x0, x1];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function (x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function (y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [y, y + 1 / kx];\n    };\n    scale.copy = function () {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function () {\n    return d3_scale_threshold([.5], [0, 1]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function (_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function (_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function (y) {\n      y = range.indexOf(y);\n      return [domain[y - 1], domain[y]];\n    };\n    scale.copy = function () {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function () {\n    return d3_scale_identity([0, 1]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function (x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function (m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function (m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function () {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function () {\n    var innerRadius = d3_svg_arcInnerRadius,\n        outerRadius = d3_svg_arcOuterRadius,\n        cornerRadius = d3_zero,\n        padRadius = d3_svg_arcAuto,\n        startAngle = d3_svg_arcStartAngle,\n        endAngle = d3_svg_arcEndAngle,\n        padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)),\n          r1 = Math.max(0, +outerRadius.apply(this, arguments)),\n          a0 = startAngle.apply(this, arguments) - halfπ,\n          a1 = endAngle.apply(this, arguments) - halfπ,\n          da = Math.abs(a1 - a0),\n          cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";\n      var rc,\n          cr,\n          rp,\n          ap,\n          p0 = 0,\n          p1 = 0,\n          x0,\n          y0,\n          x1,\n          y1,\n          x2,\n          y2,\n          x3,\n          y3,\n          path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc,\n            rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] : d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]),\n              ax = x0 - oc[0],\n              ay = y0 - oc[1],\n              bx = x1 - oc[0],\n              by = y1 - oc[1],\n              kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n              lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3, y3], [x0, y0], r1, rc1, cw),\n              t12 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);\n          } else {\n            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);\n          }\n        } else {\n          path.push("M", x0, ",", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0, cw),\n              t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [x1, y1], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);\n          } else {\n            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);\n          }\n        } else {\n          path.push("L", x2, ",", y2);\n        }\n      } else {\n        path.push("M", x0, ",", y0);\n        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);\n        path.push("L", x2, ",", y2);\n        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);\n      }\n      path.push("Z");\n      return path.join("");\n    }\n    function circleSegment(r1, cw) {\n      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;\n    }\n    arc.innerRadius = function (v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function (v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function (v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function (v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function (v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function (v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function (v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function () {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [Math.cos(a) * r, Math.sin(a) * r];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = "auto";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0],\n        y01 = p0[1] - p1[1],\n        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x1 = p0[0] + ox,\n        y1 = p0[1] + oy,\n        x2 = p1[0] + ox,\n        y2 = p1[1] + oy,\n        x3 = (x1 + x2) / 2,\n        y3 = (y1 + y2) / 2,\n        dx = x2 - x1,\n        dy = y2 - y1,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x1 * y2 - x2 * y1,\n        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x3,\n        dy0 = cy0 - y3,\n        dx1 = cx1 - x3,\n        dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [[cx0 - ox, cy0 - oy], [cx0 * r1 / r, cy0 * r1 / r]];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX,\n        y = d3_geom_pointY,\n        defined = d3_true,\n        interpolate = d3_svg_lineLinear,\n        interpolateKey = interpolate.key,\n        tension = .7;\n    function line(data) {\n      var segments = [],\n          points = [],\n          i = -1,\n          n = data.length,\n          d,\n          fx = d3_functor(x),\n          fy = d3_functor(y);\n      function segment() {\n        segments.push("M", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join("") : null;\n    }\n    line.x = function (_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function (_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function (_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function (_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function (_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function () {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    "linear-closed": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    "step-before": d3_svg_lineStepBefore,\n    "step-after": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    "basis-open": d3_svg_lineBasisOpen,\n    "basis-closed": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    "cardinal-open": d3_svg_lineCardinalOpen,\n    "cardinal-closed": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function (key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join("L") : points + "Z";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join("L") + "Z";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0,\n        n = points.length,\n        p = points[0],\n        path = [p[0], ",", p[1]];\n    while (++i < n) {\n      path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);\n    }if (n > 1) path.push("H", p[0]);\n    return path.join("");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0,\n        n = points.length,\n        p = points[0],\n        path = [p[0], ",", p[1]];\n    while (++i < n) {\n      path.push("V", (p = points[i])[1], "H", p[0]);\n    }return path.join("");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0,\n        n = points.length,\n        p = points[0],\n        path = [p[0], ",", p[1]];\n    while (++i < n) {\n      path.push("H", (p = points[i])[0], "V", p[1]);\n    }return path.join("");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length,\n        path = "",\n        p0 = points[0],\n        p = points[1],\n        t0 = tangents[0],\n        t = t0,\n        pi = 1;\n    if (quad) {\n      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [],\n        a = (1 - tension) / 2,\n        p0,\n        p1 = points[0],\n        p2 = points[1],\n        i = 1,\n        n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1,\n        n = points.length,\n        pi = points[0],\n        x0 = pi[0],\n        y0 = pi[1],\n        px = [x0, x0, x0, (pi = points[1])[0]],\n        py = [y0, y0, y0, pi[1]],\n        path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push("L", pi);\n    return path.join("");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [],\n        i = -1,\n        n = points.length,\n        pi,\n        px = [0],\n        py = [0];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join("");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path,\n        i = -1,\n        n = points.length,\n        m = n + 4,\n        pi,\n        px = [],\n        py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join("");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0],\n          y0 = points[0][1],\n          dx = points[n][0] - x0,\n          dy = points[n][1] - y0,\n          i = -1,\n          p,\n          t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0],\n      d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0],\n      d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0,\n        j = points.length - 1,\n        m = [],\n        p0 = points[0],\n        p1 = points[1],\n        d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [],\n        d,\n        a,\n        b,\n        s,\n        m = d3_svg_lineFiniteDifferences(points),\n        i = -1,\n        j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([s || 0, m[i] * s || 0]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function () {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point,\n        i = -1,\n        n = points.length,\n        r,\n        a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX,\n        x1 = d3_geom_pointX,\n        y0 = 0,\n        y1 = d3_geom_pointY,\n        defined = d3_true,\n        interpolate = d3_svg_lineLinear,\n        interpolateKey = interpolate.key,\n        interpolateReverse = interpolate,\n        L = "L",\n        tension = .7;\n    function area(data) {\n      var segments = [],\n          points0 = [],\n          points1 = [],\n          i = -1,\n          n = data.length,\n          d,\n          fx0 = d3_functor(x0),\n          fy0 = d3_functor(y0),\n          fx1 = x0 === x1 ? function () {\n        return x;\n      } : d3_functor(x1),\n          fy1 = y0 === y1 ? function () {\n        return y;\n      } : d3_functor(y1),\n          x,\n          y;\n      function segment() {\n        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);\n          points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join("") : null;\n    }\n    area.x = function (_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function (_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function (_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function (_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function (_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function (_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function (_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function (_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? "M" : "L";\n      return area;\n    };\n    area.tension = function (_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function () {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function () {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function () {\n    var source = d3_source,\n        target = d3_target,\n        radius = d3_svg_chordRadius,\n        startAngle = d3_svg_arcStartAngle,\n        endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i),\n          t = subgroup(this, target, d, i);\n      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i),\n          r = radius.call(self, subgroup, i),\n          a0 = startAngle.call(self, subgroup, i) - halfπ,\n          a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [r * Math.cos(a0), r * Math.sin(a0)],\n        p1: [r * Math.cos(a1), r * Math.sin(a1)]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return "Q 0,0 " + p1;\n    }\n    chord.radius = function (v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function (v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function (v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function (v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function (v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function () {\n    var source = d3_source,\n        target = d3_target,\n        projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i),\n          p3 = target.call(this, d, i),\n          m = (p0.y + p3.y) / 2,\n          p = [p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3];\n      p = p.map(projection);\n      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];\n    }\n    diagonal.source = function (x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function (x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function (x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [d.x, d.y];\n  }\n  d3.svg.diagonal.radial = function () {\n    var diagonal = d3.svg.diagonal(),\n        projection = d3_svg_diagonalProjection,\n        projection_ = diagonal.projection;\n    diagonal.projection = function (x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function () {\n      var d = projection.apply(this, arguments),\n          r = d[0],\n          a = d[1] - halfπ;\n      return [r * Math.cos(a), r * Math.sin(a)];\n    };\n  }\n  d3.svg.symbol = function () {\n    var type = d3_svg_symbolType,\n        size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function (x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function (x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return "circle";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function cross(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";\n    },\n    diamond: function diamond(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)),\n          rx = ry * d3_svg_symbolTan30;\n      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";\n    },\n    square: function square(size) {\n      var r = Math.sqrt(size) / 2;\n      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";\n    },\n    "triangle-down": function triangleDown(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),\n          ry = rx * d3_svg_symbolSqrt3 / 2;\n      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";\n    },\n    "triangle-up": function triangleUp(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),\n          ry = rx * d3_svg_symbolSqrt3 / 2;\n      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3),\n      d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function (name) {\n    var id = d3_transitionInheritId || ++d3_transitionId,\n        ns = d3_transitionNamespace(name),\n        subgroups = [],\n        subgroup,\n        node,\n        transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m;) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n;) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function (name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function () {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId];else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [],\n      d3_transitionId = 0,\n      d3_transitionInheritId,\n      d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function (selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function (selector) {\n    var id = this.id,\n        ns = this.namespace,\n        subgroups = [],\n        subgroup,\n        subnode,\n        node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m;) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n;) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if ("__data__" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function (selector) {\n    var id = this.id,\n        ns = this.namespace,\n        subgroups = [],\n        subgroup,\n        subnodes,\n        node,\n        subnode,\n        transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m;) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n;) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o;) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function (filter) {\n    var subgroups = [],\n        subgroup,\n        group,\n        node;\n    if (typeof filter !== "function") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function (name, tween) {\n    var id = this.id,\n        ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function (node) {\n      node[ns][id].tween.remove(name);\n    } : function (node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id,\n        ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === "function" ? function (node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function (node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function (nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) {\n        this.attr(value, nameNS[value]);\n      }return this;\n    }\n    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate,\n        name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += "", function () {\n        var a = this.getAttribute(name),\n            i;\n        return a !== b && (i = interpolate(a, b), function (t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += "", function () {\n        var a = this.getAttributeNS(name.space, name.local),\n            i;\n        return a !== b && (i = interpolate(a, b), function (t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function (nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function (t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function (t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function (name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== "string") {\n        if (n < 2) value = "";\n        for (priority in name) {\n          this.style(priority, name[priority], value);\n        }return this;\n      }\n      priority = "";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += "", function () {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name),\n            i;\n        return a !== b && (i = d3_interpolate(a, b), function (t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, "style." + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function (name, tween, priority) {\n    if (arguments.length < 3) priority = "";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function (t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween("style." + name, styleTween);\n  };\n  d3_transitionPrototype.text = function (value) {\n    return d3_transition_tween(this, "text", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = "";\n    return function () {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function () {\n    var ns = this.namespace;\n    return this.each("end.transition", function () {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function (value) {\n    var id = this.id,\n        ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function (node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function (value) {\n    var id = this.id,\n        ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function (node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function (value) {\n    var id = this.id,\n        ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function (node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function (type, listener) {\n    var id = this.id,\n        ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit,\n          inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function (node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function (node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function () {\n    var id0 = this.id,\n        id1 = ++d3_transitionId,\n        ns = this.namespace,\n        subgroups = [],\n        subgroup,\n        group,\n        node,\n        transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? "__transition__" : "__transition_" + name + "__";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }),\n        transition = lock[id],\n        time,\n        timer,\n        duration,\n        ease,\n        tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active,\n          active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function () {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function (key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration,\n          e = ease(t),\n          n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id];else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function () {\n    var scale = d3.scale.linear(),\n        orient = d3_svg_axisDefaultOrient,\n        innerTickSize = 6,\n        outerTickSize = 6,\n        tickPadding = 3,\n        tickArguments_ = [10],\n        tickValues = null,\n        tickFormat_;\n    function axis(g) {\n      g.each(function () {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale,\n            scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues,\n            tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_,\n            tick = g.selectAll(".tick").data(ticks, scale1),\n            tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε),\n            tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(),\n            tickUpdate = d3.transition(tick.order()).style("opacity", 1),\n            tickSpacing = Math.max(innerTickSize, 0) + tickPadding,\n            tickTransform;\n        var range = d3_scaleRange(scale1),\n            path = g.selectAll(".domain").data([0]),\n            pathUpdate = (path.enter().append("path").attr("class", "domain"), d3.transition(path));\n        tickEnter.append("line");\n        tickEnter.append("text");\n        var lineEnter = tickEnter.select("line"),\n            lineUpdate = tickUpdate.select("line"),\n            text = tick.select("text").text(tickFormat),\n            textEnter = tickEnter.select("text"),\n            textUpdate = tickUpdate.select("text"),\n            sign = orient === "top" || orient === "left" ? -1 : 1,\n            x1,\n            x2,\n            y1,\n            y2;\n        if (orient === "bottom" || orient === "top") {\n          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";\n          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");\n          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";\n          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");\n          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1,\n              dx = x.rangeBand() / 2;\n          scale0 = scale1 = function scale1(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function (x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function (x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function () {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function (x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function (x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function (x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function (x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function (x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function (x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function () {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = "bottom",\n      d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr("transform", function (d) {\n      var v0 = x0(d);\n      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr("transform", function (d) {\n      var v0 = y0(d);\n      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";\n    });\n  }\n  d3.svg.brush = function () {\n    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"),\n        x = null,\n        y = null,\n        xExtent = [0, 0],\n        yExtent = [0, 0],\n        xExtentDomain,\n        yExtentDomain,\n        xClamp = true,\n        yClamp = true,\n        resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function () {\n        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);\n        var background = g.selectAll(".background").data([0]);\n        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");\n        g.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");\n        var resize = g.selectAll(".resize").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append("g").attr("class", function (d) {\n          return "resize " + d;\n        }).style("cursor", function (d) {\n          return d3_svg_brushCursor[d];\n        }).append("rect").attr("x", function (d) {\n          return (/[ew]$/.test(d) ? -3 : null\n          );\n        }).attr("y", function (d) {\n          return (/^[ns]/.test(d) ? -3 : null\n          );\n        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");\n        resize.style("display", brush.empty() ? "none" : null);\n        var gUpdate = d3.transition(g),\n            backgroundUpdate = d3.transition(background),\n            range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function (g) {\n      g.each(function () {\n        var event_ = event.of(this, arguments),\n            extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        },\n            extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each("start.brush", function () {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: "brushstart"\n            });\n          }).tween("brush:brush", function () {\n            var xi = d3_interpolateArray(xExtent, extent1.x),\n                yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function (t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: "brush",\n                mode: "resize"\n              });\n            };\n          }).each("end.brush", function () {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: "brush",\n              mode: "resize"\n            });\n            event_({\n              type: "brushend"\n            });\n          });\n        } else {\n          event_({\n            type: "brushstart"\n          });\n          event_({\n            type: "brush",\n            mode: "resize"\n          });\n          event_({\n            type: "brushend"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(".resize").attr("transform", function (d) {\n        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";\n      });\n    }\n    function redrawX(g) {\n      g.select(".extent").attr("x", xExtent[0]);\n      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(".extent").attr("y", yExtent[0]);\n      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this,\n          eventTarget = d3.select(d3.event.target),\n          event_ = event.of(target, arguments),\n          g = d3.select(target),\n          resizing = eventTarget.datum(),\n          resizingX = !/^(n|s)$/.test(resizing) && x,\n          resizingY = !/^(e|w)$/.test(resizing) && y,\n          dragging = eventTarget.classed("extent"),\n          dragRestore = d3_event_dragSuppress(target),\n          center,\n          origin = d3.mouse(target),\n          offset;\n      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);\n      if (d3.event.changedTouches) {\n        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);\n      } else {\n        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);\n      }\n      g.interrupt().selectAll("*").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing),\n            ey = +/^n/.test(resizing);\n        offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style("pointer-events", "none").selectAll(".resize").style("display", null);\n      d3.select("body").style("cursor", eventTarget.style("cursor"));\n      event_({\n        type: "brushstart"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target),\n            moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: "brush",\n            mode: dragging ? "move" : "resize"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale),\n            r0 = range[0],\n            r1 = range[1],\n            position = origin[i],\n            extent = i ? yExtent : xExtent,\n            size = extent[1] - extent[0],\n            min,\n            max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null;else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);\n        d3.select("body").style("cursor", null);\n        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);\n        dragRestore();\n        event_({\n          type: "brushend"\n        });\n      }\n    }\n    brush.x = function (z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function (z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function (z) {\n      if (!arguments.length) return x && y ? [xClamp, yClamp] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1];else if (x) xClamp = !!z;else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function (z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [x0, x1];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [y0, y1];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1];\n      }\n      return brush;\n    };\n    brush.clear = function () {\n      if (!brush.empty()) {\n        xExtent = [0, 0], yExtent = [0, 0];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function () {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, "on");\n  };\n  var d3_svg_brushCursor = {\n    n: "ns-resize",\n    e: "ew-resize",\n    s: "ns-resize",\n    w: "ew-resize",\n    nw: "nwse-resize",\n    ne: "nesw-resize",\n    se: "nwse-resize",\n    sw: "nesw-resize"\n  };\n  var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function (string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function (date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function (date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function (date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function (date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function (date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function (date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function (date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function (date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function (date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function (date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function (date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function (date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function (x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function (x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0],\n          target = span / count,\n          i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [methods.year, d3_scale_linearTickRange(extent.map(function (d) {\n        return d / 31536e6;\n      }), count)[2]] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function (interval, skip) {\n      var domain = scale.domain(),\n          extent = d3_scaleExtent(domain),\n          method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function floor(date) {\n          while (skipped(date = interval.floor(date))) {\n            date = d3_time_scaleDate(date - 1);\n          }return date;\n        },\n        ceil: function ceil(date) {\n          while (skipped(date = interval.ceil(date))) {\n            date = d3_time_scaleDate(+date + 1);\n          }return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function (interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()),\n          method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [{\n        range: interval\n      }, skip];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function () {\n      return format;\n    };\n    scale.copy = function () {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6];\n  var d3_time_scaleLocalMethods = [[d3_time.second, 1], [d3_time.second, 5], [d3_time.second, 15], [d3_time.second, 30], [d3_time.minute, 1], [d3_time.minute, 5], [d3_time.minute, 15], [d3_time.minute, 30], [d3_time.hour, 1], [d3_time.hour, 3], [d3_time.hour, 6], [d3_time.hour, 12], [d3_time.day, 1], [d3_time.day, 2], [d3_time.week, 1], [d3_time.month, 1], [d3_time.month, 3], [d3_time.year, 1]];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([[".%L", function (d) {\n    return d.getMilliseconds();\n  }], [":%S", function (d) {\n    return d.getSeconds();\n  }], ["%I:%M", function (d) {\n    return d.getMinutes();\n  }], ["%I %p", function (d) {\n    return d.getHours();\n  }], ["%a %d", function (d) {\n    return d.getDay() && d.getDate() != 1;\n  }], ["%b %d", function (d) {\n    return d.getDate() != 1;\n  }], ["%B", function (d) {\n    return d.getMonth();\n  }], ["%Y", d3_true]]);\n  var d3_time_scaleMilliseconds = {\n    range: function range(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function () {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {\n    return [m[0].utc, m[1]];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([[".%L", function (d) {\n    return d.getUTCMilliseconds();\n  }], [":%S", function (d) {\n    return d.getUTCSeconds();\n  }], ["%I:%M", function (d) {\n    return d.getUTCMinutes();\n  }], ["%I %p", function (d) {\n    return d.getUTCHours();\n  }], ["%a %d", function (d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  }], ["%b %d", function (d) {\n    return d.getUTCDate() != 1;\n  }], ["%B", function (d) {\n    return d.getUTCMonth();\n  }], ["%Y", d3_true]]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function () {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function (request) {\n    return request.responseText;\n  });\n  d3.json = function (url, callback) {\n    return d3_xhr(url, "application/json", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function (url, callback) {\n    return d3_xhr(url, "text/html", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function (request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) module.exports = d3;else this.d3 = d3;\n}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},,,,function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\nvar Footer = function Footer() {\n\treturn React.createElement(\n\t\t"div",\n\t\t{ className: "container" },\n\t\tReact.createElement("hr", null),\n\t\tReact.createElement(\n\t\t\t"footer",\n\t\t\tnull,\n\t\t\tReact.createElement(\n\t\t\t\t"p",\n\t\t\t\t{\n\t\t\t\t\tstyle: { "font-size": "14px" }\n\t\t\t\t},\n\t\t\t\t"\\xA9 FOR TEST:REACT NODE MONGO",\n\t\t\t\tReact.createElement("br", null)\n\t\t\t)\n\t\t)\n\t);\n};\n\nexports.default = Footer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvY29tcG9uZW50cy9mb290ZXIuanN4PzlhZGYiXSwibmFtZXMiOlsiRm9vdGVyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLFNBQVMsU0FBVEEsTUFBUztBQUFBLFFBQ2Q7QUFBQTtBQUFBLElBQUssV0FBWSxXQUFqQjtBQUNFLGlDQURGO0FBRUU7QUFBQTtBQUFBO0FBQ0s7QUFBQTtBQUFBO0FBQ0MsWUFBUyxFQUFDLGFBQVksTUFBYjtBQURWO0FBQUE7QUFHNEI7QUFINUI7QUFETDtBQUZGLEVBRGM7QUFBQSxDQUFmOztrQkF3QmVBLE0iLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZvb3RlciA9ICgpID0+IChcblx0PGRpdiBjbGFzc05hbWUgPSBcImNvbnRhaW5lclwiID5cblx0XHRcdDxociAvPlxuXHRcdFx0PGZvb3Rlcj5cbiAgICAgICAgPHBcbiAgICAgICAgXHRzdHlsZSA9IHt7XCJmb250LXNpemVcIjpcIjE0cHhcIn19XG4gICAgICAgID5cbiAgICAgICAgXHTCqSBGT1IgVEVTVDpSRUFDVCBOT0RFIE1PTkdPPGJyIC8+XG5cdFx0XHRcdFx0ey8qPGlmcmFtZVxuXHRcdFx0XHRcdFx0c3JjPVwiaHR0cHM6Ly9naGJ0bnMuY29tL2dpdGh1Yi1idG4uaHRtbD91c2VyPWVsZXZlbmJlYW5zJnR5cGU9Zm9sbG93JmNvdW50PXRydWVcIlxuXHRcdFx0XHRcdFx0ZnJhbWVib3JkZXI9XCIwXCJcblx0XHRcdFx0XHQgXHRzY3JvbGxpbmc9XCIwXCJcblx0XHRcdFx0XHRcdHdpZHRoPVwiMTcwcHhcIlxuXHRcdFx0XHRcdCBcdGhlaWdodD1cIjIwcHhcIlxuXHRcdFx0XHRcdCBcdHN0eWxlPXt7XG5cdFx0XHRcdFx0XHRcdFwiYm9yZGVyXCI6XCIwXCJcblx0XHRcdFx0XHQgXHR9fVxuXHRcdFx0XHRcdCA+XG5cdFx0XHRcdFx0IDwvaWZyYW1lPiAqL31cblx0XHQgIFx0PC9wPlxuICAgICAgPC9mb290ZXI+XG4gIDwvZGl2PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBGb290ZXJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NsaWVudC9jb21wb25lbnRzL2Zvb3Rlci5qc3giXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar number = _react.PropTypes.number;\nvar shape = _react.PropTypes.shape;\n\nvar Chart = _react2.default.createClass({\n    displayName: "Chart",\n\n    propTypes: {\n        height: number.isRequired,\n        width: number.isRequired,\n        margin: shape({\n            top: number,\n            bottom: number,\n            left: number,\n            right: number\n        }).isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var width = _props.width;\n        var height = _props.height;\n        var margin = _props.margin;\n        var viewBox = _props.viewBox;\n        var preserveAspectRatio = _props.preserveAspectRatio;\n        var children = _props.children;\n\n        return _react2.default.createElement("svg", { ref: "svg", width: width, height: height, viewBox: viewBox, preserveAspectRatio: preserveAspectRatio }, _react2.default.createElement("g", { transform: "translate(" + margin.left + ", " + margin.top + ")" }, children));\n    }\n});\n\nexports.default = Chart;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0NoYXJ0LmpzP2Y5NDUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm51bWJlciIsIlByb3BUeXBlcyIsInNoYXBlIiwiQ2hhcnQiLCJjcmVhdGVDbGFzcyIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiaGVpZ2h0IiwiaXNSZXF1aXJlZCIsIndpZHRoIiwibWFyZ2luIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwicmVuZGVyIiwiX3Byb3BzIiwicHJvcHMiLCJ2aWV3Qm94IiwicHJlc2VydmVBc3BlY3RSYXRpbyIsImNoaWxkcmVuIiwiY3JlYXRlRWxlbWVudCIsInJlZiIsInRyYW5zZm9ybSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQ3pDQyxXQUFPO0FBRGtDLENBQTdDOztBQUlBLElBQUlDLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFiOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkgsTUFBdkIsQ0FBZDs7QUFFQSxTQUFTRyxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxXQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDO0FBQXdEOztBQUUvRixJQUFJRyxTQUFTUCxPQUFPUSxTQUFQLENBQWlCRCxNQUE5QjtBQUNBLElBQUlFLFFBQVFULE9BQU9RLFNBQVAsQ0FBaUJDLEtBQTdCOztBQUdBLElBQUlDLFFBQVFSLFFBQVFJLE9BQVIsQ0FBZ0JLLFdBQWhCLENBQTRCO0FBQ3BDQyxpQkFBYSxPQUR1Qjs7QUFHcENDLGVBQVc7QUFDUEMsZ0JBQVFQLE9BQU9RLFVBRFI7QUFFUEMsZUFBT1QsT0FBT1EsVUFGUDtBQUdQRSxnQkFBUVIsTUFBTTtBQUNWUyxpQkFBS1gsTUFESztBQUVWWSxvQkFBUVosTUFGRTtBQUdWYSxrQkFBTWIsTUFISTtBQUlWYyxtQkFBT2Q7QUFKRyxTQUFOLEVBS0xRO0FBUkksS0FIeUI7O0FBY3BDTyxZQUFRLFNBQVNBLE1BQVQsR0FBa0I7QUFDdEIsWUFBSUMsU0FBUyxLQUFLQyxLQUFsQjtBQUNBLFlBQUlSLFFBQVFPLE9BQU9QLEtBQW5CO0FBQ0EsWUFBSUYsU0FBU1MsT0FBT1QsTUFBcEI7QUFDQSxZQUFJRyxTQUFTTSxPQUFPTixNQUFwQjtBQUNBLFlBQUlRLFVBQVVGLE9BQU9FLE9BQXJCO0FBQ0EsWUFBSUMsc0JBQXNCSCxPQUFPRyxtQkFBakM7QUFDQSxZQUFJQyxXQUFXSixPQUFPSSxRQUF0Qjs7QUFHQSxlQUFPekIsUUFBUUksT0FBUixDQUFnQnNCLGFBQWhCLENBQ0gsS0FERyxFQUVILEVBQUVDLEtBQUssS0FBUCxFQUFjYixPQUFPQSxLQUFyQixFQUE0QkYsUUFBUUEsTUFBcEMsRUFBNENXLFNBQVNBLE9BQXJELEVBQThEQyxxQkFBcUJBLG1CQUFuRixFQUZHLEVBR0h4QixRQUFRSSxPQUFSLENBQWdCc0IsYUFBaEIsQ0FDSSxHQURKLEVBRUksRUFBRUUsV0FBVyxlQUFlYixPQUFPRyxJQUF0QixHQUE2QixJQUE3QixHQUFvQ0gsT0FBT0MsR0FBM0MsR0FBaUQsR0FBOUQsRUFGSixFQUdJUyxRQUhKLENBSEcsQ0FBUDtBQVNIO0FBakNtQyxDQUE1QixDQUFaOztBQW9DQTdCLFFBQVFRLE9BQVIsR0FBa0JJLEtBQWxCIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBudW1iZXIgPSBfcmVhY3QuUHJvcFR5cGVzLm51bWJlcjtcbnZhciBzaGFwZSA9IF9yZWFjdC5Qcm9wVHlwZXMuc2hhcGU7XG5cblxudmFyIENoYXJ0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogXCJDaGFydFwiLFxuXG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGhlaWdodDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIHdpZHRoOiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgICAgbWFyZ2luOiBzaGFwZSh7XG4gICAgICAgICAgICB0b3A6IG51bWJlcixcbiAgICAgICAgICAgIGJvdHRvbTogbnVtYmVyLFxuICAgICAgICAgICAgbGVmdDogbnVtYmVyLFxuICAgICAgICAgICAgcmlnaHQ6IG51bWJlclxuICAgICAgICB9KS5pc1JlcXVpcmVkXG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIHdpZHRoID0gX3Byb3BzLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gX3Byb3BzLmhlaWdodDtcbiAgICAgICAgdmFyIG1hcmdpbiA9IF9wcm9wcy5tYXJnaW47XG4gICAgICAgIHZhciB2aWV3Qm94ID0gX3Byb3BzLnZpZXdCb3g7XG4gICAgICAgIHZhciBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gX3Byb3BzLnByZXNlcnZlQXNwZWN0UmF0aW87XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcblxuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgICB7IHJlZjogXCJzdmdcIiwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgdmlld0JveDogdmlld0JveCwgcHJlc2VydmVBc3BlY3RSYXRpbzogcHJlc2VydmVBc3BlY3RSYXRpbyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJnXCIsXG4gICAgICAgICAgICAgICAgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIiwgXCIgKyBtYXJnaW4udG9wICsgXCIpXCIgfSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDaGFydDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0NoYXJ0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\nvar HeightWidthMixin = {\n    componentWillMount: function componentWillMount() {\n        this._calculateInner(this.props);\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        this._calculateInner(nextProps);\n    },\n    _calculateInner: function _calculateInner(props) {\n        var height = props.height;\n        var width = props.width;\n        var margin = props.margin;\n\n        this._innerHeight = height - margin.top - margin.bottom;\n        this._innerWidth = width - margin.left - margin.right;\n    }\n};\n\nexports.default = HeightWidthMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0hlaWdodFdpZHRoTWl4aW4uanM/YmM0YiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkhlaWdodFdpZHRoTWl4aW4iLCJjb21wb25lbnRXaWxsTW91bnQiLCJfY2FsY3VsYXRlSW5uZXIiLCJwcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJoZWlnaHQiLCJ3aWR0aCIsIm1hcmdpbiIsIl9pbm5lckhlaWdodCIsInRvcCIsImJvdHRvbSIsIl9pbm5lcldpZHRoIiwibGVmdCIsInJpZ2h0IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQ3pDQyxXQUFPO0FBRGtDLENBQTdDO0FBR0EsSUFBSUMsbUJBQW1CO0FBQ25CQyx3QkFBb0IsU0FBU0Esa0JBQVQsR0FBOEI7QUFDOUMsYUFBS0MsZUFBTCxDQUFxQixLQUFLQyxLQUExQjtBQUNILEtBSGtCO0FBSW5CQywrQkFBMkIsU0FBU0EseUJBQVQsQ0FBbUNDLFNBQW5DLEVBQThDO0FBQ3JFLGFBQUtILGVBQUwsQ0FBcUJHLFNBQXJCO0FBQ0gsS0FOa0I7QUFPbkJILHFCQUFpQixTQUFTQSxlQUFULENBQXlCQyxLQUF6QixFQUFnQztBQUM3QyxZQUFJRyxTQUFTSCxNQUFNRyxNQUFuQjtBQUNBLFlBQUlDLFFBQVFKLE1BQU1JLEtBQWxCO0FBQ0EsWUFBSUMsU0FBU0wsTUFBTUssTUFBbkI7O0FBR0EsYUFBS0MsWUFBTCxHQUFvQkgsU0FBU0UsT0FBT0UsR0FBaEIsR0FBc0JGLE9BQU9HLE1BQWpEO0FBQ0EsYUFBS0MsV0FBTCxHQUFtQkwsUUFBUUMsT0FBT0ssSUFBZixHQUFzQkwsT0FBT00sS0FBaEQ7QUFDSDtBQWZrQixDQUF2Qjs7QUFrQkFoQixRQUFRaUIsT0FBUixHQUFrQmYsZ0JBQWxCIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbnZhciBIZWlnaHRXaWR0aE1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVJbm5lcih0aGlzLnByb3BzKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZUlubmVyKG5leHRQcm9wcyk7XG4gICAgfSxcbiAgICBfY2FsY3VsYXRlSW5uZXI6IGZ1bmN0aW9uIF9jYWxjdWxhdGVJbm5lcihwcm9wcykge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xuICAgICAgICB2YXIgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICAgICAgdmFyIG1hcmdpbiA9IHByb3BzLm1hcmdpbjtcblxuXG4gICAgICAgIHRoaXMuX2lubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgIHRoaXMuX2lubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEhlaWdodFdpZHRoTWl4aW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kMy1jb21wb25lbnRzL2xpYi9IZWlnaHRXaWR0aE1peGluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar oneOfType = _react.PropTypes.oneOfType;\nvar object = _react.PropTypes.object;\nvar array = _react.PropTypes.array;\nvar shape = _react.PropTypes.shape;\nvar func = _react.PropTypes.func;\nvar number = _react.PropTypes.number;\n\nvar DefaultPropsMixin = {\n    propTypes: {\n        data: oneOfType([object, array]).isRequired,\n        height: number.isRequired,\n        width: number.isRequired,\n        margin: shape({\n            top: number,\n            bottom: number,\n            left: number,\n            right: number\n        }),\n        xScale: func,\n        yScale: func,\n        colorScale: func\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            data: { label: 'No data available', values: [{ x: 'No data available', y: 1 }] },\n            margin: { top: 0, bottom: 0, left: 0, right: 0 },\n            xScale: null,\n            yScale: null,\n            colorScale: _d2.default.scale.category20()\n        };\n    }\n};\n\nexports.default = DefaultPropsMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0RlZmF1bHRQcm9wc01peGluLmpzPzBiY2IiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX2QiLCJfZDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvbmVPZlR5cGUiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJhcnJheSIsInNoYXBlIiwiZnVuYyIsIm51bWJlciIsIkRlZmF1bHRQcm9wc01peGluIiwicHJvcFR5cGVzIiwiZGF0YSIsImlzUmVxdWlyZWQiLCJoZWlnaHQiLCJ3aWR0aCIsIm1hcmdpbiIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInhTY2FsZSIsInlTY2FsZSIsImNvbG9yU2NhbGUiLCJnZXREZWZhdWx0UHJvcHMiLCJsYWJlbCIsInZhbHVlcyIsIngiLCJ5Iiwic2NhbGUiLCJjYXRlZ29yeTIwIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDekNDLFdBQU87QUFEa0MsQ0FBN0M7O0FBSUEsSUFBSUMsU0FBUyxtQkFBQUMsQ0FBUSxDQUFSLENBQWI7O0FBRUEsSUFBSUMsS0FBSyxtQkFBQUQsQ0FBUSxDQUFSLENBQVQ7O0FBRUEsSUFBSUUsTUFBTUMsdUJBQXVCRixFQUF2QixDQUFWOztBQUVBLFNBQVNFLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFdBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLFNBQVNGLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLElBQUlHLFlBQVlSLE9BQU9TLFNBQVAsQ0FBaUJELFNBQWpDO0FBQ0EsSUFBSUUsU0FBU1YsT0FBT1MsU0FBUCxDQUFpQkMsTUFBOUI7QUFDQSxJQUFJQyxRQUFRWCxPQUFPUyxTQUFQLENBQWlCRSxLQUE3QjtBQUNBLElBQUlDLFFBQVFaLE9BQU9TLFNBQVAsQ0FBaUJHLEtBQTdCO0FBQ0EsSUFBSUMsT0FBT2IsT0FBT1MsU0FBUCxDQUFpQkksSUFBNUI7QUFDQSxJQUFJQyxTQUFTZCxPQUFPUyxTQUFQLENBQWlCSyxNQUE5Qjs7QUFHQSxJQUFJQyxvQkFBb0I7QUFDcEJDLGVBQVc7QUFDUEMsY0FBTVQsVUFBVSxDQUFDRSxNQUFELEVBQVNDLEtBQVQsQ0FBVixFQUEyQk8sVUFEMUI7QUFFUEMsZ0JBQVFMLE9BQU9JLFVBRlI7QUFHUEUsZUFBT04sT0FBT0ksVUFIUDtBQUlQRyxnQkFBUVQsTUFBTTtBQUNWVSxpQkFBS1IsTUFESztBQUVWUyxvQkFBUVQsTUFGRTtBQUdWVSxrQkFBTVYsTUFISTtBQUlWVyxtQkFBT1g7QUFKRyxTQUFOLENBSkQ7QUFVUFksZ0JBQVFiLElBVkQ7QUFXUGMsZ0JBQVFkLElBWEQ7QUFZUGUsb0JBQVlmO0FBWkwsS0FEUzs7QUFnQnBCZ0IscUJBQWlCLFNBQVNBLGVBQVQsR0FBMkI7QUFDeEMsZUFBTztBQUNIWixrQkFBTSxFQUFFYSxPQUFPLG1CQUFULEVBQThCQyxRQUFRLENBQUMsRUFBRUMsR0FBRyxtQkFBTCxFQUEwQkMsR0FBRyxDQUE3QixFQUFELENBQXRDLEVBREg7QUFFSFosb0JBQVEsRUFBRUMsS0FBSyxDQUFQLEVBQVVDLFFBQVEsQ0FBbEIsRUFBcUJDLE1BQU0sQ0FBM0IsRUFBOEJDLE9BQU8sQ0FBckMsRUFGTDtBQUdIQyxvQkFBUSxJQUhMO0FBSUhDLG9CQUFRLElBSkw7QUFLSEMsd0JBQVl6QixJQUFJSSxPQUFKLENBQVkyQixLQUFaLENBQWtCQyxVQUFsQjtBQUxULFNBQVA7QUFPSDtBQXhCbUIsQ0FBeEI7O0FBMkJBckMsUUFBUVMsT0FBUixHQUFrQlEsaUJBQWxCIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX2QgPSByZXF1aXJlKCdkMycpO1xuXG52YXIgX2QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcbnZhciBvYmplY3QgPSBfcmVhY3QuUHJvcFR5cGVzLm9iamVjdDtcbnZhciBhcnJheSA9IF9yZWFjdC5Qcm9wVHlwZXMuYXJyYXk7XG52YXIgc2hhcGUgPSBfcmVhY3QuUHJvcFR5cGVzLnNoYXBlO1xudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG52YXIgbnVtYmVyID0gX3JlYWN0LlByb3BUeXBlcy5udW1iZXI7XG5cblxudmFyIERlZmF1bHRQcm9wc01peGluID0ge1xuICAgIHByb3BUeXBlczoge1xuICAgICAgICBkYXRhOiBvbmVPZlR5cGUoW29iamVjdCwgYXJyYXldKS5pc1JlcXVpcmVkLFxuICAgICAgICBoZWlnaHQ6IG51bWJlci5pc1JlcXVpcmVkLFxuICAgICAgICB3aWR0aDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIG1hcmdpbjogc2hhcGUoe1xuICAgICAgICAgICAgdG9wOiBudW1iZXIsXG4gICAgICAgICAgICBib3R0b206IG51bWJlcixcbiAgICAgICAgICAgIGxlZnQ6IG51bWJlcixcbiAgICAgICAgICAgIHJpZ2h0OiBudW1iZXJcbiAgICAgICAgfSksXG4gICAgICAgIHhTY2FsZTogZnVuYyxcbiAgICAgICAgeVNjYWxlOiBmdW5jLFxuICAgICAgICBjb2xvclNjYWxlOiBmdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogeyBsYWJlbDogJ05vIGRhdGEgYXZhaWxhYmxlJywgdmFsdWVzOiBbeyB4OiAnTm8gZGF0YSBhdmFpbGFibGUnLCB5OiAxIH1dIH0sXG4gICAgICAgICAgICBtYXJnaW46IHsgdG9wOiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHJpZ2h0OiAwIH0sXG4gICAgICAgICAgICB4U2NhbGU6IG51bGwsXG4gICAgICAgICAgICB5U2NhbGU6IG51bGwsXG4gICAgICAgICAgICBjb2xvclNjYWxlOiBfZDIuZGVmYXVsdC5zY2FsZS5jYXRlZ29yeTIwKClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEZWZhdWx0UHJvcHNNaXhpbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0RlZmF1bHRQcm9wc01peGluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n        var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                _arr.push(_s.value);if (i && _arr.length === i) break;\n            }\n        } catch (err) {\n            _d = true;_e = err;\n        } finally {\n            try {\n                if (!_n && _i[\"return\"]) _i[\"return\"]();\n            } finally {\n                if (_d) throw _e;\n            }\n        }return _arr;\n    }return function (arr, i) {\n        if (Array.isArray(arr)) {\n            return arr;\n        } else if (Symbol.iterator in Object(arr)) {\n            return sliceIterator(arr, i);\n        } else {\n            throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }\n    };\n}();\n\nvar _react = __webpack_require__(1);\n\nvar _reactDom = __webpack_require__(38);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar func = _react.PropTypes.func;\nvar oneOf = _react.PropTypes.oneOf;\nvar bool = _react.PropTypes.bool;\nvar objectOf = _react.PropTypes.objectOf;\nvar number = _react.PropTypes.number;\n\nvar TooltipMixin = {\n    propTypes: {\n        tooltipHtml: func,\n        tooltipMode: oneOf(['mouse', 'element', 'fixed']),\n        tooltipContained: bool,\n        tooltipOffset: objectOf(number)\n    },\n\n    getInitialState: function getInitialState() {\n        return {\n            tooltip: {\n                hidden: true\n            }\n        };\n    },\n    getDefaultProps: function getDefaultProps() {\n        return {\n            tooltipMode: 'mouse',\n            tooltipOffset: { top: -35, left: 0 },\n            tooltipHtml: null,\n            tooltipContained: false\n        };\n    },\n    componentDidMount: function componentDidMount() {\n        this._svgNode = _reactDom2.default.findDOMNode(this).getElementsByTagName('svg')[0];\n    },\n    onMouseEnter: function onMouseEnter(e, data) {\n        if (!this.props.tooltipHtml) {\n            return;\n        }\n\n        e.preventDefault();\n\n        var _props = this.props;\n        var margin = _props.margin;\n        var tooltipMode = _props.tooltipMode;\n        var tooltipOffset = _props.tooltipOffset;\n        var tooltipContained = _props.tooltipContained;\n\n        var svg = this._svgNode;\n        var position = void 0;\n        if (svg.createSVGPoint) {\n            var point = svg.createSVGPoint();\n            point.x = e.clientX, point.y = e.clientY;\n            point = point.matrixTransform(svg.getScreenCTM().inverse());\n            position = [point.x - margin.left, point.y - margin.top];\n        } else {\n            var rect = svg.getBoundingClientRect();\n            position = [e.clientX - rect.left - svg.clientLeft - margin.left, e.clientY - rect.top - svg.clientTop - margin.top];\n        }\n\n        var _tooltipHtml = this._tooltipHtml(data, position);\n\n        var _tooltipHtml2 = _slicedToArray(_tooltipHtml, 3);\n\n        var html = _tooltipHtml2[0];\n        var xPos = _tooltipHtml2[1];\n        var yPos = _tooltipHtml2[2];\n\n        var svgTop = svg.getBoundingClientRect().top + margin.top;\n        var svgLeft = svg.getBoundingClientRect().left + margin.left;\n\n        var top = 0;\n        var left = 0;\n\n        if (tooltipMode === 'fixed') {\n            top = svgTop + tooltipOffset.top;\n            left = svgLeft + tooltipOffset.left;\n        } else if (tooltipMode === 'element') {\n            top = svgTop + yPos + tooltipOffset.top;\n            left = svgLeft + xPos + tooltipOffset.left;\n        } else {\n            // mouse\n            top = e.clientY + tooltipOffset.top;\n            left = e.clientX + tooltipOffset.left;\n        }\n\n        function lerp(t, a, b) {\n            return (1 - t) * a + t * b;\n        }\n\n        var translate = 50;\n\n        if (tooltipContained) {\n            var t = position[0] / svg.getBoundingClientRect().width;\n            translate = lerp(t, 0, 100);\n        }\n\n        this.setState({\n            tooltip: {\n                top: top,\n                left: left,\n                hidden: false,\n                html: html,\n                translate: translate\n            }\n        });\n    },\n    onMouseLeave: function onMouseLeave(e) {\n        if (!this.props.tooltipHtml) {\n            return;\n        }\n\n        e.preventDefault();\n\n        this.setState({\n            tooltip: {\n                hidden: true\n            }\n        });\n    }\n};\n\nexports.default = TooltipMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1Rvb2x0aXBNaXhpbi5qcz8wOThiIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3NsaWNlZFRvQXJyYXkiLCJzbGljZUl0ZXJhdG9yIiwiYXJyIiwiaSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJsZW5ndGgiLCJlcnIiLCJBcnJheSIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0RG9tIiwiX3JlYWN0RG9tMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZ1bmMiLCJQcm9wVHlwZXMiLCJvbmVPZiIsImJvb2wiLCJvYmplY3RPZiIsIm51bWJlciIsIlRvb2x0aXBNaXhpbiIsInByb3BUeXBlcyIsInRvb2x0aXBIdG1sIiwidG9vbHRpcE1vZGUiLCJ0b29sdGlwQ29udGFpbmVkIiwidG9vbHRpcE9mZnNldCIsImdldEluaXRpYWxTdGF0ZSIsInRvb2x0aXAiLCJoaWRkZW4iLCJnZXREZWZhdWx0UHJvcHMiLCJ0b3AiLCJsZWZ0IiwiY29tcG9uZW50RGlkTW91bnQiLCJfc3ZnTm9kZSIsImZpbmRET01Ob2RlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJvbk1vdXNlRW50ZXIiLCJlIiwiZGF0YSIsInByb3BzIiwicHJldmVudERlZmF1bHQiLCJfcHJvcHMiLCJtYXJnaW4iLCJzdmciLCJwb3NpdGlvbiIsImNyZWF0ZVNWR1BvaW50IiwicG9pbnQiLCJ4IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiX3Rvb2x0aXBIdG1sIiwiX3Rvb2x0aXBIdG1sMiIsImh0bWwiLCJ4UG9zIiwieVBvcyIsInN2Z1RvcCIsInN2Z0xlZnQiLCJsZXJwIiwidCIsImEiLCJiIiwidHJhbnNsYXRlIiwid2lkdGgiLCJzZXRTdGF0ZSIsIm9uTW91c2VMZWF2ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQ3pDQyxXQUFPO0FBRGtDLENBQTdDOztBQUlBLElBQUlDLGlCQUFpQixZQUFZO0FBQUUsYUFBU0MsYUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJDLENBQTVCLEVBQStCO0FBQUUsWUFBSUMsT0FBTyxFQUFYLENBQWUsSUFBSUMsS0FBSyxJQUFULENBQWUsSUFBSUMsS0FBSyxLQUFULENBQWdCLElBQUlDLEtBQUtDLFNBQVQsQ0FBb0IsSUFBSTtBQUFFLGlCQUFLLElBQUlDLEtBQUtQLElBQUlRLE9BQU9DLFFBQVgsR0FBVCxFQUFpQ0MsRUFBdEMsRUFBMEMsRUFBRVAsS0FBSyxDQUFDTyxLQUFLSCxHQUFHSSxJQUFILEVBQU4sRUFBaUJDLElBQXhCLENBQTFDLEVBQXlFVCxLQUFLLElBQTlFLEVBQW9GO0FBQUVELHFCQUFLVyxJQUFMLENBQVVILEdBQUdiLEtBQWIsRUFBcUIsSUFBSUksS0FBS0MsS0FBS1ksTUFBTCxLQUFnQmIsQ0FBekIsRUFBNEI7QUFBUTtBQUFFLFNBQXZKLENBQXdKLE9BQU9jLEdBQVAsRUFBWTtBQUFFWCxpQkFBSyxJQUFMLENBQVdDLEtBQUtVLEdBQUw7QUFBVyxTQUE1TCxTQUFxTTtBQUFFLGdCQUFJO0FBQUUsb0JBQUksQ0FBQ1osRUFBRCxJQUFPSSxHQUFHLFFBQUgsQ0FBWCxFQUF5QkEsR0FBRyxRQUFIO0FBQWlCLGFBQWhELFNBQXlEO0FBQUUsb0JBQUlILEVBQUosRUFBUSxNQUFNQyxFQUFOO0FBQVc7QUFBRSxTQUFDLE9BQU9ILElBQVA7QUFBYyxLQUFDLE9BQU8sVUFBVUYsR0FBVixFQUFlQyxDQUFmLEVBQWtCO0FBQUUsWUFBSWUsTUFBTUMsT0FBTixDQUFjakIsR0FBZCxDQUFKLEVBQXdCO0FBQUUsbUJBQU9BLEdBQVA7QUFBYSxTQUF2QyxNQUE2QyxJQUFJUSxPQUFPQyxRQUFQLElBQW1CZixPQUFPTSxHQUFQLENBQXZCLEVBQW9DO0FBQUUsbUJBQU9ELGNBQWNDLEdBQWQsRUFBbUJDLENBQW5CLENBQVA7QUFBK0IsU0FBckUsTUFBMkU7QUFBRSxrQkFBTSxJQUFJaUIsU0FBSixDQUFjLHNEQUFkLENBQU47QUFBOEU7QUFBRSxLQUFyTztBQUF3TyxDQUFob0IsRUFBckI7O0FBRUEsSUFBSUMsU0FBUyxtQkFBQUMsQ0FBUSxDQUFSLENBQWI7O0FBRUEsSUFBSUMsWUFBWSxtQkFBQUQsQ0FBUSxFQUFSLENBQWhCOztBQUVBLElBQUlFLGFBQWFDLHVCQUF1QkYsU0FBdkIsQ0FBakI7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsV0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsU0FBU0YsR0FBWCxFQUFyQztBQUF3RDs7QUFFL0YsSUFBSUcsT0FBT1IsT0FBT1MsU0FBUCxDQUFpQkQsSUFBNUI7QUFDQSxJQUFJRSxRQUFRVixPQUFPUyxTQUFQLENBQWlCQyxLQUE3QjtBQUNBLElBQUlDLE9BQU9YLE9BQU9TLFNBQVAsQ0FBaUJFLElBQTVCO0FBQ0EsSUFBSUMsV0FBV1osT0FBT1MsU0FBUCxDQUFpQkcsUUFBaEM7QUFDQSxJQUFJQyxTQUFTYixPQUFPUyxTQUFQLENBQWlCSSxNQUE5Qjs7QUFHQSxJQUFJQyxlQUFlO0FBQ2ZDLGVBQVc7QUFDUEMscUJBQWFSLElBRE47QUFFUFMscUJBQWFQLE1BQU0sQ0FBQyxPQUFELEVBQVUsU0FBVixFQUFxQixPQUFyQixDQUFOLENBRk47QUFHUFEsMEJBQWtCUCxJQUhYO0FBSVBRLHVCQUFlUCxTQUFTQyxNQUFUO0FBSlIsS0FESTs7QUFRZk8scUJBQWlCLFNBQVNBLGVBQVQsR0FBMkI7QUFDeEMsZUFBTztBQUNIQyxxQkFBUztBQUNMQyx3QkFBUTtBQURIO0FBRE4sU0FBUDtBQUtILEtBZGM7QUFlZkMscUJBQWlCLFNBQVNBLGVBQVQsR0FBMkI7QUFDeEMsZUFBTztBQUNITix5QkFBYSxPQURWO0FBRUhFLDJCQUFlLEVBQUVLLEtBQUssQ0FBQyxFQUFSLEVBQVlDLE1BQU0sQ0FBbEIsRUFGWjtBQUdIVCx5QkFBYSxJQUhWO0FBSUhFLDhCQUFrQjtBQUpmLFNBQVA7QUFNSCxLQXRCYztBQXVCZlEsdUJBQW1CLFNBQVNBLGlCQUFULEdBQTZCO0FBQzVDLGFBQUtDLFFBQUwsR0FBZ0J4QixXQUFXSSxPQUFYLENBQW1CcUIsV0FBbkIsQ0FBK0IsSUFBL0IsRUFBcUNDLG9CQUFyQyxDQUEwRCxLQUExRCxFQUFpRSxDQUFqRSxDQUFoQjtBQUNILEtBekJjO0FBMEJmQyxrQkFBYyxTQUFTQSxZQUFULENBQXNCQyxDQUF0QixFQUF5QkMsSUFBekIsRUFBK0I7QUFDekMsWUFBSSxDQUFDLEtBQUtDLEtBQUwsQ0FBV2pCLFdBQWhCLEVBQTZCO0FBQ3pCO0FBQ0g7O0FBRURlLFVBQUVHLGNBQUY7O0FBRUEsWUFBSUMsU0FBUyxLQUFLRixLQUFsQjtBQUNBLFlBQUlHLFNBQVNELE9BQU9DLE1BQXBCO0FBQ0EsWUFBSW5CLGNBQWNrQixPQUFPbEIsV0FBekI7QUFDQSxZQUFJRSxnQkFBZ0JnQixPQUFPaEIsYUFBM0I7QUFDQSxZQUFJRCxtQkFBbUJpQixPQUFPakIsZ0JBQTlCOztBQUdBLFlBQUltQixNQUFNLEtBQUtWLFFBQWY7QUFDQSxZQUFJVyxXQUFXLEtBQUssQ0FBcEI7QUFDQSxZQUFJRCxJQUFJRSxjQUFSLEVBQXdCO0FBQ3BCLGdCQUFJQyxRQUFRSCxJQUFJRSxjQUFKLEVBQVo7QUFDQUMsa0JBQU1DLENBQU4sR0FBVVYsRUFBRVcsT0FBWixFQUFxQkYsTUFBTUcsQ0FBTixHQUFVWixFQUFFYSxPQUFqQztBQUNBSixvQkFBUUEsTUFBTUssZUFBTixDQUFzQlIsSUFBSVMsWUFBSixHQUFtQkMsT0FBbkIsRUFBdEIsQ0FBUjtBQUNBVCx1QkFBVyxDQUFDRSxNQUFNQyxDQUFOLEdBQVVMLE9BQU9YLElBQWxCLEVBQXdCZSxNQUFNRyxDQUFOLEdBQVVQLE9BQU9aLEdBQXpDLENBQVg7QUFDSCxTQUxELE1BS087QUFDSCxnQkFBSXdCLE9BQU9YLElBQUlZLHFCQUFKLEVBQVg7QUFDQVgsdUJBQVcsQ0FBQ1AsRUFBRVcsT0FBRixHQUFZTSxLQUFLdkIsSUFBakIsR0FBd0JZLElBQUlhLFVBQTVCLEdBQXlDZCxPQUFPWCxJQUFqRCxFQUF1RE0sRUFBRWEsT0FBRixHQUFZSSxLQUFLeEIsR0FBakIsR0FBdUJhLElBQUljLFNBQTNCLEdBQXVDZixPQUFPWixHQUFyRyxDQUFYO0FBQ0g7O0FBRUQsWUFBSTRCLGVBQWUsS0FBS0EsWUFBTCxDQUFrQnBCLElBQWxCLEVBQXdCTSxRQUF4QixDQUFuQjs7QUFFQSxZQUFJZSxnQkFBZ0IxRSxlQUFleUUsWUFBZixFQUE2QixDQUE3QixDQUFwQjs7QUFFQSxZQUFJRSxPQUFPRCxjQUFjLENBQWQsQ0FBWDtBQUNBLFlBQUlFLE9BQU9GLGNBQWMsQ0FBZCxDQUFYO0FBQ0EsWUFBSUcsT0FBT0gsY0FBYyxDQUFkLENBQVg7O0FBR0EsWUFBSUksU0FBU3BCLElBQUlZLHFCQUFKLEdBQTRCekIsR0FBNUIsR0FBa0NZLE9BQU9aLEdBQXREO0FBQ0EsWUFBSWtDLFVBQVVyQixJQUFJWSxxQkFBSixHQUE0QnhCLElBQTVCLEdBQW1DVyxPQUFPWCxJQUF4RDs7QUFFQSxZQUFJRCxNQUFNLENBQVY7QUFDQSxZQUFJQyxPQUFPLENBQVg7O0FBRUEsWUFBSVIsZ0JBQWdCLE9BQXBCLEVBQTZCO0FBQ3pCTyxrQkFBTWlDLFNBQVN0QyxjQUFjSyxHQUE3QjtBQUNBQyxtQkFBT2lDLFVBQVV2QyxjQUFjTSxJQUEvQjtBQUNILFNBSEQsTUFHTyxJQUFJUixnQkFBZ0IsU0FBcEIsRUFBK0I7QUFDbENPLGtCQUFNaUMsU0FBU0QsSUFBVCxHQUFnQnJDLGNBQWNLLEdBQXBDO0FBQ0FDLG1CQUFPaUMsVUFBVUgsSUFBVixHQUFpQnBDLGNBQWNNLElBQXRDO0FBQ0gsU0FITSxNQUdBO0FBQ0g7QUFDQUQsa0JBQU1PLEVBQUVhLE9BQUYsR0FBWXpCLGNBQWNLLEdBQWhDO0FBQ0FDLG1CQUFPTSxFQUFFVyxPQUFGLEdBQVl2QixjQUFjTSxJQUFqQztBQUNIOztBQUVELGlCQUFTa0MsSUFBVCxDQUFjQyxDQUFkLEVBQWlCQyxDQUFqQixFQUFvQkMsQ0FBcEIsRUFBdUI7QUFDbkIsbUJBQU8sQ0FBQyxJQUFJRixDQUFMLElBQVVDLENBQVYsR0FBY0QsSUFBSUUsQ0FBekI7QUFDSDs7QUFFRCxZQUFJQyxZQUFZLEVBQWhCOztBQUVBLFlBQUk3QyxnQkFBSixFQUFzQjtBQUNsQixnQkFBSTBDLElBQUl0QixTQUFTLENBQVQsSUFBY0QsSUFBSVkscUJBQUosR0FBNEJlLEtBQWxEO0FBQ0FELHdCQUFZSixLQUFLQyxDQUFMLEVBQVEsQ0FBUixFQUFXLEdBQVgsQ0FBWjtBQUNIOztBQUVELGFBQUtLLFFBQUwsQ0FBYztBQUNWNUMscUJBQVM7QUFDTEcscUJBQUtBLEdBREE7QUFFTEMsc0JBQU1BLElBRkQ7QUFHTEgsd0JBQVEsS0FISDtBQUlMZ0Msc0JBQU1BLElBSkQ7QUFLTFMsMkJBQVdBO0FBTE47QUFEQyxTQUFkO0FBU0gsS0FuR2M7QUFvR2ZHLGtCQUFjLFNBQVNBLFlBQVQsQ0FBc0JuQyxDQUF0QixFQUF5QjtBQUNuQyxZQUFJLENBQUMsS0FBS0UsS0FBTCxDQUFXakIsV0FBaEIsRUFBNkI7QUFDekI7QUFDSDs7QUFFRGUsVUFBRUcsY0FBRjs7QUFFQSxhQUFLK0IsUUFBTCxDQUFjO0FBQ1Y1QyxxQkFBUztBQUNMQyx3QkFBUTtBQURIO0FBREMsU0FBZDtBQUtIO0FBaEhjLENBQW5COztBQW1IQTdDLFFBQVE4QixPQUFSLEdBQWtCTyxZQUFsQiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZnVuYyA9IF9yZWFjdC5Qcm9wVHlwZXMuZnVuYztcbnZhciBvbmVPZiA9IF9yZWFjdC5Qcm9wVHlwZXMub25lT2Y7XG52YXIgYm9vbCA9IF9yZWFjdC5Qcm9wVHlwZXMuYm9vbDtcbnZhciBvYmplY3RPZiA9IF9yZWFjdC5Qcm9wVHlwZXMub2JqZWN0T2Y7XG52YXIgbnVtYmVyID0gX3JlYWN0LlByb3BUeXBlcy5udW1iZXI7XG5cblxudmFyIFRvb2x0aXBNaXhpbiA9IHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgdG9vbHRpcEh0bWw6IGZ1bmMsXG4gICAgICAgIHRvb2x0aXBNb2RlOiBvbmVPZihbJ21vdXNlJywgJ2VsZW1lbnQnLCAnZml4ZWQnXSksXG4gICAgICAgIHRvb2x0aXBDb250YWluZWQ6IGJvb2wsXG4gICAgICAgIHRvb2x0aXBPZmZzZXQ6IG9iamVjdE9mKG51bWJlcilcbiAgICB9LFxuXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvb2x0aXBNb2RlOiAnbW91c2UnLFxuICAgICAgICAgICAgdG9vbHRpcE9mZnNldDogeyB0b3A6IC0zNSwgbGVmdDogMCB9LFxuICAgICAgICAgICAgdG9vbHRpcEh0bWw6IG51bGwsXG4gICAgICAgICAgICB0b29sdGlwQ29udGFpbmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLl9zdmdOb2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdmcnKVswXTtcbiAgICB9LFxuICAgIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKGUsIGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnRvb2x0aXBIdG1sKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBtYXJnaW4gPSBfcHJvcHMubWFyZ2luO1xuICAgICAgICB2YXIgdG9vbHRpcE1vZGUgPSBfcHJvcHMudG9vbHRpcE1vZGU7XG4gICAgICAgIHZhciB0b29sdGlwT2Zmc2V0ID0gX3Byb3BzLnRvb2x0aXBPZmZzZXQ7XG4gICAgICAgIHZhciB0b29sdGlwQ29udGFpbmVkID0gX3Byb3BzLnRvb2x0aXBDb250YWluZWQ7XG5cblxuICAgICAgICB2YXIgc3ZnID0gdGhpcy5fc3ZnTm9kZTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdm9pZCAwO1xuICAgICAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgICAgICAgIHBvaW50LnggPSBlLmNsaWVudFgsIHBvaW50LnkgPSBlLmNsaWVudFk7XG4gICAgICAgICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShzdmcuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gW3BvaW50LnggLSBtYXJnaW4ubGVmdCwgcG9pbnQueSAtIG1hcmdpbi50b3BdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBzdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IFtlLmNsaWVudFggLSByZWN0LmxlZnQgLSBzdmcuY2xpZW50TGVmdCAtIG1hcmdpbi5sZWZ0LCBlLmNsaWVudFkgLSByZWN0LnRvcCAtIHN2Zy5jbGllbnRUb3AgLSBtYXJnaW4udG9wXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdG9vbHRpcEh0bWwgPSB0aGlzLl90b29sdGlwSHRtbChkYXRhLCBwb3NpdGlvbik7XG5cbiAgICAgICAgdmFyIF90b29sdGlwSHRtbDIgPSBfc2xpY2VkVG9BcnJheShfdG9vbHRpcEh0bWwsIDMpO1xuXG4gICAgICAgIHZhciBodG1sID0gX3Rvb2x0aXBIdG1sMlswXTtcbiAgICAgICAgdmFyIHhQb3MgPSBfdG9vbHRpcEh0bWwyWzFdO1xuICAgICAgICB2YXIgeVBvcyA9IF90b29sdGlwSHRtbDJbMl07XG5cblxuICAgICAgICB2YXIgc3ZnVG9wID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIG1hcmdpbi50b3A7XG4gICAgICAgIHZhciBzdmdMZWZ0ID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyBtYXJnaW4ubGVmdDtcblxuICAgICAgICB2YXIgdG9wID0gMDtcbiAgICAgICAgdmFyIGxlZnQgPSAwO1xuXG4gICAgICAgIGlmICh0b29sdGlwTW9kZSA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgICAgdG9wID0gc3ZnVG9wICsgdG9vbHRpcE9mZnNldC50b3A7XG4gICAgICAgICAgICBsZWZ0ID0gc3ZnTGVmdCArIHRvb2x0aXBPZmZzZXQubGVmdDtcbiAgICAgICAgfSBlbHNlIGlmICh0b29sdGlwTW9kZSA9PT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICB0b3AgPSBzdmdUb3AgKyB5UG9zICsgdG9vbHRpcE9mZnNldC50b3A7XG4gICAgICAgICAgICBsZWZ0ID0gc3ZnTGVmdCArIHhQb3MgKyB0b29sdGlwT2Zmc2V0LmxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtb3VzZVxuICAgICAgICAgICAgdG9wID0gZS5jbGllbnRZICsgdG9vbHRpcE9mZnNldC50b3A7XG4gICAgICAgICAgICBsZWZ0ID0gZS5jbGllbnRYICsgdG9vbHRpcE9mZnNldC5sZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbGVycCh0LCBhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKDEgLSB0KSAqIGEgKyB0ICogYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSA1MDtcblxuICAgICAgICBpZiAodG9vbHRpcENvbnRhaW5lZCkge1xuICAgICAgICAgICAgdmFyIHQgPSBwb3NpdGlvblswXSAvIHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IGxlcnAodCwgMCwgMTAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZSkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMudG9vbHRpcEh0bWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVG9vbHRpcE1peGluO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZDMtY29tcG9uZW50cy9saWIvVG9vbHRpcE1peGluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");
},,,,,function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar ArrayifyMixin = {\n    componentWillMount: function componentWillMount() {\n        this._arrayify(this.props);\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        this._arrayify(nextProps);\n    },\n    _arrayify: function _arrayify(props) {\n        if (props.data === null) {\n            this._data = [{\n                label: 'No data available',\n                values: [{ x: 'No data available', y: 1 }]\n            }];\n        } else if (!Array.isArray(props.data)) {\n            this._data = [props.data];\n        } else {\n            this._data = props.data;\n        }\n    }\n};\n\nexports.default = ArrayifyMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0FycmF5aWZ5TWl4aW4uanM/NDk2YyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFycmF5aWZ5TWl4aW4iLCJjb21wb25lbnRXaWxsTW91bnQiLCJfYXJyYXlpZnkiLCJwcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJkYXRhIiwiX2RhdGEiLCJsYWJlbCIsInZhbHVlcyIsIngiLCJ5IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQ3pDQyxXQUFPO0FBRGtDLENBQTdDO0FBR0EsSUFBSUMsZ0JBQWdCO0FBQ2hCQyx3QkFBb0IsU0FBU0Esa0JBQVQsR0FBOEI7QUFDOUMsYUFBS0MsU0FBTCxDQUFlLEtBQUtDLEtBQXBCO0FBQ0gsS0FIZTtBQUloQkMsK0JBQTJCLFNBQVNBLHlCQUFULENBQW1DQyxTQUFuQyxFQUE4QztBQUNyRSxhQUFLSCxTQUFMLENBQWVHLFNBQWY7QUFDSCxLQU5lO0FBT2hCSCxlQUFXLFNBQVNBLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ2pDLFlBQUlBLE1BQU1HLElBQU4sS0FBZSxJQUFuQixFQUF5QjtBQUNyQixpQkFBS0MsS0FBTCxHQUFhLENBQUM7QUFDVkMsdUJBQU8sbUJBREc7QUFFVkMsd0JBQVEsQ0FBQyxFQUFFQyxHQUFHLG1CQUFMLEVBQTBCQyxHQUFHLENBQTdCLEVBQUQ7QUFGRSxhQUFELENBQWI7QUFJSCxTQUxELE1BS08sSUFBSSxDQUFDQyxNQUFNQyxPQUFOLENBQWNWLE1BQU1HLElBQXBCLENBQUwsRUFBZ0M7QUFDbkMsaUJBQUtDLEtBQUwsR0FBYSxDQUFDSixNQUFNRyxJQUFQLENBQWI7QUFDSCxTQUZNLE1BRUE7QUFDSCxpQkFBS0MsS0FBTCxHQUFhSixNQUFNRyxJQUFuQjtBQUNIO0FBQ0o7QUFsQmUsQ0FBcEI7O0FBcUJBUixRQUFRZ0IsT0FBUixHQUFrQmQsYUFBbEIiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbnZhciBBcnJheWlmeU1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLl9hcnJheWlmeSh0aGlzLnByb3BzKTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuX2FycmF5aWZ5KG5leHRQcm9wcyk7XG4gICAgfSxcbiAgICBfYXJyYXlpZnk6IGZ1bmN0aW9uIF9hcnJheWlmeShwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IFt7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdObyBkYXRhIGF2YWlsYWJsZScsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbeyB4OiAnTm8gZGF0YSBhdmFpbGFibGUnLCB5OiAxIH1dXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShwcm9wcy5kYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IFtwcm9wcy5kYXRhXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBwcm9wcy5kYXRhO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXJyYXlpZnlNaXhpbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0FycmF5aWZ5TWl4aW4uanMiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\nvar oneOf = _react.PropTypes.oneOf;\nvar number = _react.PropTypes.number;\nvar string = _react.PropTypes.string;\n\nvar Axis = _react2.default.createClass({\n    displayName: 'Axis',\n\n    propTypes: {\n        tickArguments: array,\n        tickValues: array,\n        tickFormat: func,\n        tickDirection: oneOf(['horizontal', 'vertical', 'diagonal']),\n        innerTickSize: number,\n        tickPadding: number,\n        outerTickSize: number,\n        scale: func.isRequired,\n        className: string,\n        zero: number,\n        orientation: oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n        label: string\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            tickArguments: [10],\n            tickValues: null,\n            tickFormat: null,\n            tickDirection: 'horizontal',\n            innerTickSize: 6,\n            tickPadding: 3,\n            outerTickSize: 6,\n            className: 'axis',\n            zero: 0,\n            label: ''\n        };\n    },\n    _getTranslateString: function _getTranslateString() {\n        var _props = this.props;\n        var orientation = _props.orientation;\n        var height = _props.height;\n        var width = _props.width;\n        var zero = _props.zero;\n\n        if (orientation === 'top') {\n            return 'translate(0, ' + zero + ')';\n        } else if (orientation === 'bottom') {\n            return 'translate(0, ' + (zero == 0 ? height : zero) + ')';\n        } else if (orientation === 'left') {\n            return 'translate(' + zero + ', 0)';\n        } else if (orientation === 'right') {\n            return 'translate(' + (zero == 0 ? width : zero) + ', 0)';\n        } else {\n            return '';\n        }\n    },\n    render: function render() {\n        var _props2 = this.props;\n        var height = _props2.height;\n        var tickArguments = _props2.tickArguments;\n        var tickValues = _props2.tickValues;\n        var tickDirection = _props2.tickDirection;\n        var innerTickSize = _props2.innerTickSize;\n        var tickPadding = _props2.tickPadding;\n        var outerTickSize = _props2.outerTickSize;\n        var scale = _props2.scale;\n        var orientation = _props2.orientation;\n        var zero = _props2.zero;\n        var _props3 = this.props;\n        var width = _props3.width;\n        var className = _props3.className;\n        var label = _props3.label;\n        var tickFormat = this.props.tickFormat;\n\n        var ticks = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues;\n\n        if (!tickFormat) {\n            if (scale.tickFormat) {\n                tickFormat = scale.tickFormat.apply(scale, tickArguments);\n            } else {\n                tickFormat = function tickFormat(x) {\n                    return x;\n                };\n            }\n        }\n\n        // TODO: is there a cleaner way? removes the 0 tick if axes are crossing\n        if (zero != height && zero != width && zero != 0) {\n            ticks = ticks.filter(function (element) {\n                return element != 0;\n            });\n        }\n\n        var tickSpacing = Math.max(innerTickSize, 0) + tickPadding;\n\n        var sign = orientation === 'top' || orientation === 'left' ? -1 : 1;\n\n        var range = this._d3ScaleRange(scale);\n\n        var activeScale = scale.rangeBand ? function (e) {\n            return scale(e) + scale.rangeBand() / 2;\n        } : scale;\n\n        var transform = void 0,\n            x = void 0,\n            y = void 0,\n            x2 = void 0,\n            y2 = void 0,\n            dy = void 0,\n            textAnchor = void 0,\n            d = void 0,\n            labelElement = void 0,\n            tickRotation = 0;\n        if (orientation === 'bottom' || orientation === 'top') {\n            transform = 'translate({}, 0)';\n            x = 0;\n            y = sign * tickSpacing;\n            x2 = 0;\n            y2 = sign * innerTickSize;\n            dy = sign < 0 ? '0em' : '.71em';\n            textAnchor = 'middle';\n            d = 'M' + range[0] + ', ' + sign * outerTickSize + 'V0H' + range[1] + 'V' + sign * outerTickSize;\n            if (tickDirection === 'vertical') {\n                tickRotation = -90;\n                x = -tickSpacing;\n                y = -innerTickSize;\n                textAnchor = 'end';\n            } else if (tickDirection === 'diagonal') {\n                tickRotation = -60;\n                x = -tickSpacing;\n                y = 0;\n                textAnchor = 'end';\n            }\n\n            labelElement = _react2.default.createElement('text', { className: className + ' label', textAnchor: \"end\", x: width, y: -6 }, label);\n        } else {\n            transform = 'translate(0, {})';\n            x = sign * tickSpacing;\n            y = 0;\n            x2 = sign * innerTickSize;\n            y2 = 0;\n            dy = '.32em';\n            textAnchor = sign < 0 ? 'end' : 'start';\n            d = 'M' + sign * outerTickSize + ', ' + range[0] + 'H0V' + range[1] + 'H' + sign * outerTickSize;\n            if (tickDirection === 'vertical') {\n                tickRotation = -90;\n                x -= sign * tickSpacing;\n                y = -(tickSpacing + innerTickSize);\n                textAnchor = 'middle';\n            } else if (tickDirection === 'diagonal') {\n                tickRotation = -60;\n                x -= sign * tickSpacing;\n                y = -(tickSpacing + innerTickSize);\n                textAnchor = 'middle';\n            }\n\n            labelElement = _react2.default.createElement('text', { className: className + ' label', textAnchor: 'end', y: 6, dy: orientation === 'left' ? '.75em' : '-1.25em', transform: 'rotate(-90)' }, label);\n        }\n\n        var tickElements = ticks.map(function (tick, index) {\n            var position = activeScale(tick);\n            var translate = transform.replace('{}', position);\n            return _react2.default.createElement('g', { key: tick + '.' + index, className: 'tick', transform: translate }, _react2.default.createElement('line', { x2: x2, y2: y2, stroke: '#aaa' }), _react2.default.createElement('text', { x: x, y: y, dy: dy, textAnchor: textAnchor, transform: 'rotate(' + tickRotation + ')' }, tickFormat(tick)));\n        });\n\n        var pathElement = _react2.default.createElement('path', { className: 'domain', d: d, fill: 'none', stroke: '#aaa' });\n\n        var axisBackground = _react2.default.createElement('rect', { className: 'axis-background', fill: 'none' });\n\n        return _react2.default.createElement('g', { ref: 'axis', className: className, transform: this._getTranslateString(), style: { shapeRendering: 'crispEdges' } }, axisBackground, tickElements, pathElement, labelElement);\n    },\n    _d3ScaleExtent: function _d3ScaleExtent(domain) {\n        var start = domain[0];\n        var stop = domain[domain.length - 1];\n        return start < stop ? [start, stop] : [stop, start];\n    },\n    _d3ScaleRange: function _d3ScaleRange(scale) {\n        return scale.rangeExtent ? scale.rangeExtent() : this._d3ScaleExtent(scale.range());\n    }\n});\n\nexports.default = Axis;//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){
eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n        var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                _arr.push(_s.value);if (i && _arr.length === i) break;\n            }\n        } catch (err) {\n            _d = true;_e = err;\n        } finally {\n            try {\n                if (!_n && _i[\"return\"]) _i[\"return\"]();\n            } finally {\n                if (_d) throw _e;\n            }\n        }return _arr;\n    }return function (arr, i) {\n        if (Array.isArray(arr)) {\n            return arr;\n        } else if (Symbol.iterator in Object(arr)) {\n            return sliceIterator(arr, i);\n        } else {\n            throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }\n    };\n}();\n\nvar _react = __webpack_require__(1);\n\nvar _d2 = __webpack_require__(5);\n\nvar _d3 = _interopRequireDefault(_d2);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar number = _react.PropTypes.number;\n\nvar DefaultScalesMixin = {\n    propTypes: {\n        barPadding: number\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            barPadding: 0.5\n        };\n    },\n    componentWillMount: function componentWillMount() {\n        this._makeScales(this.props);\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        this._makeScales(nextProps);\n    },\n    _makeScales: function _makeScales(props) {\n        var xScale = props.xScale;\n        var xIntercept = props.xIntercept;\n        var yScale = props.yScale;\n        var yIntercept = props.yIntercept;\n\n        if (!xScale) {\n            var _makeXScale = this._makeXScale(props);\n\n            var _makeXScale2 = _slicedToArray(_makeXScale, 2);\n\n            this._xScale = _makeXScale2[0];\n            this._xIntercept = _makeXScale2[1];\n        } else {\n            var _ref = [xScale, xIntercept];\n            this._xScale = _ref[0];\n            this._xIntercept = _ref[1];\n        }\n\n        if (!yScale) {\n            var _makeYScale = this._makeYScale(props);\n\n            var _makeYScale2 = _slicedToArray(_makeYScale, 2);\n\n            this._yScale = _makeYScale2[0];\n            this._yIntercept = _makeYScale2[1];\n        } else {\n            var _ref2 = [yScale, yIntercept];\n            this._yScale = _ref2[0];\n            this._yIntercept = _ref2[1];\n        }\n    },\n    _makeXScale: function _makeXScale(props) {\n        var x = props.x;\n        var values = props.values;\n\n        var data = this._data;\n\n        if (typeof x(values(data[0])[0]) === 'number') {\n            return this._makeLinearXScale(props);\n        } else if (typeof x(values(data[0])[0]).getMonth === 'function') {\n            return this._makeTimeXScale(props);\n        } else {\n            return this._makeOrdinalXScale(props);\n        }\n    },\n    _makeLinearXScale: function _makeLinearXScale(props) {\n        var x = props.x;\n        var values = props.values;\n\n        var data = this._data;\n\n        var extentsData = data.map(function (stack) {\n            return values(stack).map(function (e) {\n                return x(e);\n            });\n        });\n        var extents = _d3.default.extent(Array.prototype.concat.apply([], extentsData));\n\n        var scale = _d3.default.scale.linear().domain(extents).range([0, this._innerWidth]);\n\n        var zero = _d3.default.max([0, scale.domain()[0]]);\n        var xIntercept = scale(zero);\n\n        return [scale, xIntercept];\n    },\n    _makeOrdinalXScale: function _makeOrdinalXScale(props) {\n        var x = props.x;\n        var values = props.values;\n        var barPadding = props.barPadding;\n\n        var scale = _d3.default.scale.ordinal().domain(values(this._data[0]).map(function (e) {\n            return x(e);\n        })).rangeRoundBands([0, this._innerWidth], barPadding);\n\n        return [scale, 0];\n    },\n    _makeTimeXScale: function _makeTimeXScale(props) {\n        var x = props.x;\n        var values = props.values;\n\n        var minDate = _d3.default.min(values(this._data[0]), x);\n        var maxDate = _d3.default.max(values(this._data[0]), x);\n\n        var scale = _d3.default.time.scale().domain([minDate, maxDate]).range([0, this._innerWidth]);\n\n        return [scale, 0];\n    },\n    _makeYScale: function _makeYScale(props) {\n        var y = props.y;\n        var values = props.values;\n\n        var data = this._data;\n\n        if (typeof y(values(data[0])[0]) === 'number') {\n            return this._makeLinearYScale(props);\n        } else {\n            return this._makeOrdinalYScale(props);\n        }\n    },\n    _makeLinearYScale: function _makeLinearYScale(props) {\n        var y = props.y;\n        var y0 = props.y0;\n        var values = props.values;\n        var groupedBars = props.groupedBars;\n\n        var extentsData = this._data.map(function (stack) {\n            return values(stack).map(function (e) {\n                return groupedBars ? y(e) : y0(e) + y(e);\n            });\n        });\n        var extents = _d3.default.extent(Array.prototype.concat.apply([], extentsData));\n\n        extents = [_d3.default.min([0, extents[0]]), extents[1]];\n\n        var scale = _d3.default.scale.linear().domain(extents).range([this._innerHeight, 0]);\n\n        var zero = _d3.default.max([0, scale.domain()[0]]);\n        var yIntercept = scale(zero);\n\n        return [scale, yIntercept];\n    },\n    _makeOrdinalYScale: function _makeOrdinalYScale() {\n        var scale = _d3.default.scale.ordinal().range([this._innerHeight, 0]);\n\n        var yIntercept = scale(0);\n\n        return [scale, yIntercept];\n    }\n};\n\nexports.default = DefaultScalesMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar number = _react.PropTypes.number;\nvar node = _react.PropTypes.node;\n\nvar Tooltip = _react2.default.createClass({\n    displayName: 'Tooltip',\n\n    propTypes: {\n        top: number.isRequired,\n        left: number.isRequired,\n        html: node,\n        translate: number\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            top: 150,\n            left: 100,\n            html: '',\n            translate: 50\n        };\n    },\n    render: function render() {\n        var _props = this.props;\n        var top = _props.top;\n        var left = _props.left;\n        var hidden = _props.hidden;\n        var html = _props.html;\n        var translate = _props.translate;\n\n        var style = {\n            display: hidden ? 'none' : 'block',\n            position: 'fixed',\n            top: top,\n            left: left,\n            transform: 'translate(-' + translate + '%, 0)',\n            pointerEvents: 'none'\n        };\n\n        return _react2.default.createElement('div', { className: 'tooltip', style: style }, html);\n    }\n});\n\nexports.default = Tooltip;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1Rvb2x0aXAuanM/MDkwNiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsInJlcXVpcmUiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibnVtYmVyIiwiUHJvcFR5cGVzIiwibm9kZSIsIlRvb2x0aXAiLCJjcmVhdGVDbGFzcyIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwidG9wIiwiaXNSZXF1aXJlZCIsImxlZnQiLCJodG1sIiwidHJhbnNsYXRlIiwiZ2V0RGVmYXVsdFByb3BzIiwicmVuZGVyIiwiX3Byb3BzIiwicHJvcHMiLCJoaWRkZW4iLCJzdHlsZSIsImRpc3BsYXkiLCJwb3NpdGlvbiIsInRyYW5zZm9ybSIsInBvaW50ZXJFdmVudHMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDekNDLFdBQU87QUFEa0MsQ0FBN0M7O0FBSUEsSUFBSUMsU0FBUyxtQkFBQUMsQ0FBUSxDQUFSLENBQWI7O0FBRUEsSUFBSUMsVUFBVUMsdUJBQXVCSCxNQUF2QixDQUFkOztBQUVBLFNBQVNHLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFdBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLFNBQVNGLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLElBQUlHLFNBQVNQLE9BQU9RLFNBQVAsQ0FBaUJELE1BQTlCO0FBQ0EsSUFBSUUsT0FBT1QsT0FBT1EsU0FBUCxDQUFpQkMsSUFBNUI7O0FBR0EsSUFBSUMsVUFBVVIsUUFBUUksT0FBUixDQUFnQkssV0FBaEIsQ0FBNEI7QUFDdENDLGlCQUFhLFNBRHlCOztBQUd0Q0MsZUFBVztBQUNQQyxhQUFLUCxPQUFPUSxVQURMO0FBRVBDLGNBQU1ULE9BQU9RLFVBRk47QUFHUEUsY0FBTVIsSUFIQztBQUlQUyxtQkFBV1g7QUFKSixLQUgyQjs7QUFVdENZLHFCQUFpQixTQUFTQSxlQUFULEdBQTJCO0FBQ3hDLGVBQU87QUFDSEwsaUJBQUssR0FERjtBQUVIRSxrQkFBTSxHQUZIO0FBR0hDLGtCQUFNLEVBSEg7QUFJSEMsdUJBQVc7QUFKUixTQUFQO0FBTUgsS0FqQnFDO0FBa0J0Q0UsWUFBUSxTQUFTQSxNQUFULEdBQWtCO0FBQ3RCLFlBQUlDLFNBQVMsS0FBS0MsS0FBbEI7QUFDQSxZQUFJUixNQUFNTyxPQUFPUCxHQUFqQjtBQUNBLFlBQUlFLE9BQU9LLE9BQU9MLElBQWxCO0FBQ0EsWUFBSU8sU0FBU0YsT0FBT0UsTUFBcEI7QUFDQSxZQUFJTixPQUFPSSxPQUFPSixJQUFsQjtBQUNBLFlBQUlDLFlBQVlHLE9BQU9ILFNBQXZCOztBQUdBLFlBQUlNLFFBQVE7QUFDUkMscUJBQVNGLFNBQVMsTUFBVCxHQUFrQixPQURuQjtBQUVSRyxzQkFBVSxPQUZGO0FBR1JaLGlCQUFLQSxHQUhHO0FBSVJFLGtCQUFNQSxJQUpFO0FBS1JXLHVCQUFXLGdCQUFnQlQsU0FBaEIsR0FBNEIsT0FML0I7QUFNUlUsMkJBQWU7QUFOUCxTQUFaOztBQVNBLGVBQU8xQixRQUFRSSxPQUFSLENBQWdCdUIsYUFBaEIsQ0FDSCxLQURHLEVBRUgsRUFBRUMsV0FBVyxTQUFiLEVBQXdCTixPQUFPQSxLQUEvQixFQUZHLEVBR0hQLElBSEcsQ0FBUDtBQUtIO0FBekNxQyxDQUE1QixDQUFkOztBQTRDQW5CLFFBQVFRLE9BQVIsR0FBa0JJLE9BQWxCIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG51bWJlciA9IF9yZWFjdC5Qcm9wVHlwZXMubnVtYmVyO1xudmFyIG5vZGUgPSBfcmVhY3QuUHJvcFR5cGVzLm5vZGU7XG5cblxudmFyIFRvb2x0aXAgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnVG9vbHRpcCcsXG5cbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgdG9wOiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgICAgbGVmdDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIGh0bWw6IG5vZGUsXG4gICAgICAgIHRyYW5zbGF0ZTogbnVtYmVyXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiAxNTAsXG4gICAgICAgICAgICBsZWZ0OiAxMDAsXG4gICAgICAgICAgICBodG1sOiAnJyxcbiAgICAgICAgICAgIHRyYW5zbGF0ZTogNTBcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIHRvcCA9IF9wcm9wcy50b3A7XG4gICAgICAgIHZhciBsZWZ0ID0gX3Byb3BzLmxlZnQ7XG4gICAgICAgIHZhciBoaWRkZW4gPSBfcHJvcHMuaGlkZGVuO1xuICAgICAgICB2YXIgaHRtbCA9IF9wcm9wcy5odG1sO1xuICAgICAgICB2YXIgdHJhbnNsYXRlID0gX3Byb3BzLnRyYW5zbGF0ZTtcblxuXG4gICAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGhpZGRlbiA/ICdub25lJyA6ICdibG9jaycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtJyArIHRyYW5zbGF0ZSArICclLCAwKScsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndG9vbHRpcCcsIHN0eWxlOiBzdHlsZSB9LFxuICAgICAgICAgICAgaHRtbFxuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUb29sdGlwO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZDMtY29tcG9uZW50cy9saWIvVG9vbHRpcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},,,,function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\nvar Loading = function Loading() {\n\treturn React.createElement(\n\t\t"div",\n\t\t{ className: "uil-ellipsis-css", style: { "transform": "scale(0.25)", "margin": "0 auto" } },\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\t{ className: "ib" },\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "circle" },\n\t\t\t\tReact.createElement("div", null)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "circle" },\n\t\t\t\tReact.createElement("div", null)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "circle" },\n\t\t\t\tReact.createElement("div", null)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"div",\n\t\t\t\t{ className: "circle" },\n\t\t\t\tReact.createElement("div", null)\n\t\t\t)\n\t\t)\n\t);\n};\n\nexports.default = Loading;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvY29tcG9uZW50cy9sb2FkaW5nLmpzeD9hMTdlIl0sIm5hbWVzIjpbIkxvYWRpbmciXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEsVUFBVSxTQUFWQSxPQUFVO0FBQUEsUUFDZjtBQUFBO0FBQUEsSUFBSyxXQUFVLGtCQUFmLEVBQWtDLE9BQU8sRUFBQyxhQUFZLGFBQWIsRUFBNEIsVUFBUyxRQUFyQyxFQUF6QztBQUNFO0FBQUE7QUFBQSxLQUFLLFdBQVUsSUFBZjtBQUNDO0FBQUE7QUFBQSxNQUFLLFdBQVUsUUFBZjtBQUNDO0FBREQsSUFERDtBQUlDO0FBQUE7QUFBQSxNQUFLLFdBQVUsUUFBZjtBQUNDO0FBREQsSUFKRDtBQVFDO0FBQUE7QUFBQSxNQUFLLFdBQVUsUUFBZjtBQUNDO0FBREQsSUFSRDtBQVdDO0FBQUE7QUFBQSxNQUFLLFdBQVUsUUFBZjtBQUNDO0FBREQ7QUFYRDtBQURGLEVBRGU7QUFBQSxDQUFoQjs7a0JBb0JlQSxPIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTG9hZGluZyA9ICgpID0+IChcblx0PGRpdiBjbGFzc05hbWU9J3VpbC1lbGxpcHNpcy1jc3MnIHN0eWxlPXt7XCJ0cmFuc2Zvcm1cIjpcInNjYWxlKDAuMjUpXCIsIFwibWFyZ2luXCI6XCIwIGF1dG9cIn19PlxuXHQgXHQ8ZGl2IGNsYXNzTmFtZT1cImliXCI+XG5cdCBcdFx0PGRpdiBjbGFzc05hbWU9XCJjaXJjbGVcIj5cblx0IFx0XHRcdDxkaXY+PC9kaXY+XG5cdCBcdFx0PC9kaXY+XG5cdCBcdFx0PGRpdiBjbGFzc05hbWU9XCJjaXJjbGVcIj5cblx0IFx0XHRcdDxkaXY+XG5cdCBcdFx0XHQ8L2Rpdj5cblx0IFx0XHQ8L2Rpdj5cblx0IFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImNpcmNsZVwiPlxuXHQgXHRcdFx0PGRpdj48L2Rpdj5cblx0IFx0XHQ8L2Rpdj5cblx0IFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImNpcmNsZVwiPlxuXHQgXHRcdFx0PGRpdj48L2Rpdj5cblx0IFx0XHQ8L2Rpdj5cblx0IFx0PC9kaXY+XG5cdDwvZGl2PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NsaWVudC9jb21wb25lbnRzL2xvYWRpbmcuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==');
},function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\nvar Spning = function Spning() {\n\treturn React.createElement(\n\t\t"div",\n\t\t{\n\t\t\tclassName: "uil-spin-css",\n\t\t\tstyle: { "-webkit-transform": "scale(0.1)" }\n\t\t},\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t),\n\t\tReact.createElement(\n\t\t\t"div",\n\t\t\tnull,\n\t\t\tReact.createElement("div", null)\n\t\t)\n\t);\n};\n\nexports.default = Spning;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvY29tcG9uZW50cy9zcG5pbmcuanN4P2QwMDQiXSwibmFtZXMiOlsiU3BuaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLFNBQVMsU0FBVEEsTUFBUztBQUFBLFFBQ2Q7QUFBQTtBQUFBO0FBQ0MsY0FBVSxjQURYO0FBRUMsVUFBTyxFQUFDLHFCQUFvQixZQUFyQjtBQUZSO0FBSUM7QUFBQTtBQUFBO0FBQ0M7QUFERCxHQUpEO0FBT0M7QUFBQTtBQUFBO0FBQ0M7QUFERCxHQVBEO0FBVUM7QUFBQTtBQUFBO0FBQ0M7QUFERCxHQVZEO0FBYUM7QUFBQTtBQUFBO0FBQ0M7QUFERCxHQWJEO0FBZ0JDO0FBQUE7QUFBQTtBQUNDO0FBREQsR0FoQkQ7QUFtQkM7QUFBQTtBQUFBO0FBQ0M7QUFERCxHQW5CRDtBQXNCQztBQUFBO0FBQUE7QUFDQztBQURELEdBdEJEO0FBeUJDO0FBQUE7QUFBQTtBQUNDO0FBREQ7QUF6QkQsRUFEYztBQUFBLENBQWY7O2tCQWdDZUEsTSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNwbmluZyA9ICgpID0+IChcblx0PGRpdlxuXHRcdGNsYXNzTmFtZT0ndWlsLXNwaW4tY3NzJ1xuXHRcdHN0eWxlPXt7XCItd2Via2l0LXRyYW5zZm9ybVwiOlwic2NhbGUoMC4xKVwifX1cblx0PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRcdDxkaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbilcblxuZXhwb3J0IGRlZmF1bHQgU3BuaW5nO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NsaWVudC9jb21wb25lbnRzL3NwbmluZy5qc3giXSwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar func = _react.PropTypes.func;\n\nvar AccessorMixin = {\n    propTypes: {\n        label: func,\n        values: func,\n        x: func,\n        y: func,\n        y0: func\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            label: function label(stack) {\n                return stack.label;\n            },\n            values: function values(stack) {\n                return stack.values;\n            },\n            x: function x(e) {\n                return e.x;\n            },\n            y: function y(e) {\n                return e.y;\n            },\n            y0: function y0() {\n                return 0;\n            }\n        };\n    }\n};\n\nexports.default = AccessorMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0FjY2Vzc29yTWl4aW4uanM/ZTJlNyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsInJlcXVpcmUiLCJmdW5jIiwiUHJvcFR5cGVzIiwiQWNjZXNzb3JNaXhpbiIsInByb3BUeXBlcyIsImxhYmVsIiwidmFsdWVzIiwieCIsInkiLCJ5MCIsImdldERlZmF1bHRQcm9wcyIsInN0YWNrIiwiZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUN6Q0MsV0FBTztBQURrQyxDQUE3Qzs7QUFJQSxJQUFJQyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjs7QUFFQSxJQUFJQyxPQUFPRixPQUFPRyxTQUFQLENBQWlCRCxJQUE1Qjs7QUFHQSxJQUFJRSxnQkFBZ0I7QUFDaEJDLGVBQVc7QUFDUEMsZUFBT0osSUFEQTtBQUVQSyxnQkFBUUwsSUFGRDtBQUdQTSxXQUFHTixJQUhJO0FBSVBPLFdBQUdQLElBSkk7QUFLUFEsWUFBSVI7QUFMRyxLQURLOztBQVNoQlMscUJBQWlCLFNBQVNBLGVBQVQsR0FBMkI7QUFDeEMsZUFBTztBQUNITCxtQkFBTyxTQUFTQSxLQUFULENBQWVNLEtBQWYsRUFBc0I7QUFDekIsdUJBQU9BLE1BQU1OLEtBQWI7QUFDSCxhQUhFO0FBSUhDLG9CQUFRLFNBQVNBLE1BQVQsQ0FBZ0JLLEtBQWhCLEVBQXVCO0FBQzNCLHVCQUFPQSxNQUFNTCxNQUFiO0FBQ0gsYUFORTtBQU9IQyxlQUFHLFNBQVNBLENBQVQsQ0FBV0ssQ0FBWCxFQUFjO0FBQ2IsdUJBQU9BLEVBQUVMLENBQVQ7QUFDSCxhQVRFO0FBVUhDLGVBQUcsU0FBU0EsQ0FBVCxDQUFXSSxDQUFYLEVBQWM7QUFDYix1QkFBT0EsRUFBRUosQ0FBVDtBQUNILGFBWkU7QUFhSEMsZ0JBQUksU0FBU0EsRUFBVCxHQUFjO0FBQ2QsdUJBQU8sQ0FBUDtBQUNIO0FBZkUsU0FBUDtBQWlCSDtBQTNCZSxDQUFwQjs7QUE4QkFaLFFBQVFnQixPQUFSLEdBQWtCVixhQUFsQiIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG5cblxudmFyIEFjY2Vzc29yTWl4aW4gPSB7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGxhYmVsOiBmdW5jLFxuICAgICAgICB2YWx1ZXM6IGZ1bmMsXG4gICAgICAgIHg6IGZ1bmMsXG4gICAgICAgIHk6IGZ1bmMsXG4gICAgICAgIHkwOiBmdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uIGxhYmVsKHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLmxhYmVsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnZhbHVlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4OiBmdW5jdGlvbiB4KGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS54O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHk6IGZ1bmN0aW9uIHkoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeTA6IGZ1bmN0aW9uIHkwKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFjY2Vzc29yTWl4aW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kMy1jb21wb25lbnRzL2xpYi9BY2Nlc3Nvck1peGluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar func = _react.PropTypes.func;\n\nvar StackAccessorMixin = {\n    propTypes: {\n        label: func,\n        values: func,\n        x: func,\n        y: func,\n        y0: func\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            label: function label(stack) {\n                return stack.label;\n            },\n            values: function values(stack) {\n                return stack.values;\n            },\n            x: function x(e) {\n                return e.x;\n            },\n            y: function y(e) {\n                return e.y;\n            },\n            y0: function y0(e) {\n                return e.y0;\n            }\n        };\n    }\n};\n\nexports.default = StackAccessorMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1N0YWNrQWNjZXNzb3JNaXhpbi5qcz9iZTMzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwicmVxdWlyZSIsImZ1bmMiLCJQcm9wVHlwZXMiLCJTdGFja0FjY2Vzc29yTWl4aW4iLCJwcm9wVHlwZXMiLCJsYWJlbCIsInZhbHVlcyIsIngiLCJ5IiwieTAiLCJnZXREZWZhdWx0UHJvcHMiLCJzdGFjayIsImUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDekNDLFdBQU87QUFEa0MsQ0FBN0M7O0FBSUEsSUFBSUMsU0FBUyxtQkFBQUMsQ0FBUSxDQUFSLENBQWI7O0FBRUEsSUFBSUMsT0FBT0YsT0FBT0csU0FBUCxDQUFpQkQsSUFBNUI7O0FBR0EsSUFBSUUscUJBQXFCO0FBQ3JCQyxlQUFXO0FBQ1BDLGVBQU9KLElBREE7QUFFUEssZ0JBQVFMLElBRkQ7QUFHUE0sV0FBR04sSUFISTtBQUlQTyxXQUFHUCxJQUpJO0FBS1BRLFlBQUlSO0FBTEcsS0FEVTs7QUFTckJTLHFCQUFpQixTQUFTQSxlQUFULEdBQTJCO0FBQ3hDLGVBQU87QUFDSEwsbUJBQU8sU0FBU0EsS0FBVCxDQUFlTSxLQUFmLEVBQXNCO0FBQ3pCLHVCQUFPQSxNQUFNTixLQUFiO0FBQ0gsYUFIRTtBQUlIQyxvQkFBUSxTQUFTQSxNQUFULENBQWdCSyxLQUFoQixFQUF1QjtBQUMzQix1QkFBT0EsTUFBTUwsTUFBYjtBQUNILGFBTkU7QUFPSEMsZUFBRyxTQUFTQSxDQUFULENBQVdLLENBQVgsRUFBYztBQUNiLHVCQUFPQSxFQUFFTCxDQUFUO0FBQ0gsYUFURTtBQVVIQyxlQUFHLFNBQVNBLENBQVQsQ0FBV0ksQ0FBWCxFQUFjO0FBQ2IsdUJBQU9BLEVBQUVKLENBQVQ7QUFDSCxhQVpFO0FBYUhDLGdCQUFJLFNBQVNBLEVBQVQsQ0FBWUcsQ0FBWixFQUFlO0FBQ2YsdUJBQU9BLEVBQUVILEVBQVQ7QUFDSDtBQWZFLFNBQVA7QUFpQkg7QUEzQm9CLENBQXpCOztBQThCQVosUUFBUWdCLE9BQVIsR0FBa0JWLGtCQUFsQiIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG5cblxudmFyIFN0YWNrQWNjZXNzb3JNaXhpbiA9IHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgbGFiZWw6IGZ1bmMsXG4gICAgICAgIHZhbHVlczogZnVuYyxcbiAgICAgICAgeDogZnVuYyxcbiAgICAgICAgeTogZnVuYyxcbiAgICAgICAgeTA6IGZ1bmNcbiAgICB9LFxuXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gbGFiZWwoc3RhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2subGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoc3RhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2sudmFsdWVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uIHgoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLng7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeTogZnVuY3Rpb24geShlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUueTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5MDogZnVuY3Rpb24geTAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnkwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN0YWNrQWNjZXNzb3JNaXhpbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1N0YWNrQWNjZXNzb3JNaXhpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar string = _react.PropTypes.string;\n\nvar StackDataMixin = {\n    propTypes: {\n        offset: string\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            offset: 'zero',\n            order: 'default'\n        };\n    },\n    componentWillMount: function componentWillMount() {\n        this._stackData(this.props);\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        this._stackData(nextProps);\n    },\n    _stackData: function _stackData(props) {\n        var offset = props.offset;\n        var order = props.order;\n        var x = props.x;\n        var y = props.y;\n        var values = props.values;\n\n        var stack = _d2.default.layout.stack().offset(offset).order(order).x(x).y(y).values(values);\n\n        this._data = stack(this._data);\n\n        for (var m = 0; m < values(this._data[0]).length; m++) {\n            var positiveBase = 0;\n            var negativeBase = 0;\n            for (var n = 0; n < this._data.length; n++) {\n                var value = y(values(this._data[n])[m]);\n                if (value < 0) {\n                    values(this._data[n])[m].y0 = negativeBase;\n                    negativeBase += value;\n                } else {\n                    values(this._data[n])[m].y0 = positiveBase;\n                    positiveBase += value;\n                }\n            }\n        }\n    }\n};\n\nexports.default = StackDataMixin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1N0YWNrRGF0YU1peGluLmpzP2JkZWQiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX2QiLCJfZDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzdHJpbmciLCJQcm9wVHlwZXMiLCJTdGFja0RhdGFNaXhpbiIsInByb3BUeXBlcyIsIm9mZnNldCIsImdldERlZmF1bHRQcm9wcyIsIm9yZGVyIiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3N0YWNrRGF0YSIsInByb3BzIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIngiLCJ5IiwidmFsdWVzIiwic3RhY2siLCJsYXlvdXQiLCJfZGF0YSIsIm0iLCJsZW5ndGgiLCJwb3NpdGl2ZUJhc2UiLCJuZWdhdGl2ZUJhc2UiLCJuIiwieTAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUN6Q0MsV0FBTztBQURrQyxDQUE3Qzs7QUFJQSxJQUFJQyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjs7QUFFQSxJQUFJQyxLQUFLLG1CQUFBRCxDQUFRLENBQVIsQ0FBVDs7QUFFQSxJQUFJRSxNQUFNQyx1QkFBdUJGLEVBQXZCLENBQVY7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsV0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsU0FBU0YsR0FBWCxFQUFyQztBQUF3RDs7QUFFL0YsSUFBSUcsU0FBU1IsT0FBT1MsU0FBUCxDQUFpQkQsTUFBOUI7O0FBR0EsSUFBSUUsaUJBQWlCO0FBQ2pCQyxlQUFXO0FBQ1BDLGdCQUFRSjtBQURELEtBRE07O0FBS2pCSyxxQkFBaUIsU0FBU0EsZUFBVCxHQUEyQjtBQUN4QyxlQUFPO0FBQ0hELG9CQUFRLE1BREw7QUFFSEUsbUJBQU87QUFGSixTQUFQO0FBSUgsS0FWZ0I7QUFXakJDLHdCQUFvQixTQUFTQSxrQkFBVCxHQUE4QjtBQUM5QyxhQUFLQyxVQUFMLENBQWdCLEtBQUtDLEtBQXJCO0FBQ0gsS0FiZ0I7QUFjakJDLCtCQUEyQixTQUFTQSx5QkFBVCxDQUFtQ0MsU0FBbkMsRUFBOEM7QUFDckUsYUFBS0gsVUFBTCxDQUFnQkcsU0FBaEI7QUFDSCxLQWhCZ0I7QUFpQmpCSCxnQkFBWSxTQUFTQSxVQUFULENBQW9CQyxLQUFwQixFQUEyQjtBQUNuQyxZQUFJTCxTQUFTSyxNQUFNTCxNQUFuQjtBQUNBLFlBQUlFLFFBQVFHLE1BQU1ILEtBQWxCO0FBQ0EsWUFBSU0sSUFBSUgsTUFBTUcsQ0FBZDtBQUNBLFlBQUlDLElBQUlKLE1BQU1JLENBQWQ7QUFDQSxZQUFJQyxTQUFTTCxNQUFNSyxNQUFuQjs7QUFHQSxZQUFJQyxRQUFRcEIsSUFBSUksT0FBSixDQUFZaUIsTUFBWixDQUFtQkQsS0FBbkIsR0FBMkJYLE1BQTNCLENBQWtDQSxNQUFsQyxFQUEwQ0UsS0FBMUMsQ0FBZ0RBLEtBQWhELEVBQXVETSxDQUF2RCxDQUF5REEsQ0FBekQsRUFBNERDLENBQTVELENBQThEQSxDQUE5RCxFQUFpRUMsTUFBakUsQ0FBd0VBLE1BQXhFLENBQVo7O0FBRUEsYUFBS0csS0FBTCxHQUFhRixNQUFNLEtBQUtFLEtBQVgsQ0FBYjs7QUFFQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUosT0FBTyxLQUFLRyxLQUFMLENBQVcsQ0FBWCxDQUFQLEVBQXNCRSxNQUExQyxFQUFrREQsR0FBbEQsRUFBdUQ7QUFDbkQsZ0JBQUlFLGVBQWUsQ0FBbkI7QUFDQSxnQkFBSUMsZUFBZSxDQUFuQjtBQUNBLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLTCxLQUFMLENBQVdFLE1BQS9CLEVBQXVDRyxHQUF2QyxFQUE0QztBQUN4QyxvQkFBSS9CLFFBQVFzQixFQUFFQyxPQUFPLEtBQUtHLEtBQUwsQ0FBV0ssQ0FBWCxDQUFQLEVBQXNCSixDQUF0QixDQUFGLENBQVo7QUFDQSxvQkFBSTNCLFFBQVEsQ0FBWixFQUFlO0FBQ1h1QiwyQkFBTyxLQUFLRyxLQUFMLENBQVdLLENBQVgsQ0FBUCxFQUFzQkosQ0FBdEIsRUFBeUJLLEVBQXpCLEdBQThCRixZQUE5QjtBQUNBQSxvQ0FBZ0I5QixLQUFoQjtBQUNILGlCQUhELE1BR087QUFDSHVCLDJCQUFPLEtBQUtHLEtBQUwsQ0FBV0ssQ0FBWCxDQUFQLEVBQXNCSixDQUF0QixFQUF5QkssRUFBekIsR0FBOEJILFlBQTlCO0FBQ0FBLG9DQUFnQjdCLEtBQWhCO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUEzQ2dCLENBQXJCOztBQThDQUQsUUFBUVMsT0FBUixHQUFrQkcsY0FBbEIiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfZCA9IHJlcXVpcmUoJ2QzJyk7XG5cbnZhciBfZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0cmluZyA9IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nO1xuXG5cbnZhciBTdGFja0RhdGFNaXhpbiA9IHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgb2Zmc2V0OiBzdHJpbmdcbiAgICB9LFxuXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvZmZzZXQ6ICd6ZXJvJyxcbiAgICAgICAgICAgIG9yZGVyOiAnZGVmYXVsdCdcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLl9zdGFja0RhdGEodGhpcy5wcm9wcyk7XG4gICAgfSxcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLl9zdGFja0RhdGEobmV4dFByb3BzKTtcbiAgICB9LFxuICAgIF9zdGFja0RhdGE6IGZ1bmN0aW9uIF9zdGFja0RhdGEocHJvcHMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHByb3BzLm9mZnNldDtcbiAgICAgICAgdmFyIG9yZGVyID0gcHJvcHMub3JkZXI7XG4gICAgICAgIHZhciB4ID0gcHJvcHMueDtcbiAgICAgICAgdmFyIHkgPSBwcm9wcy55O1xuICAgICAgICB2YXIgdmFsdWVzID0gcHJvcHMudmFsdWVzO1xuXG5cbiAgICAgICAgdmFyIHN0YWNrID0gX2QyLmRlZmF1bHQubGF5b3V0LnN0YWNrKCkub2Zmc2V0KG9mZnNldCkub3JkZXIob3JkZXIpLngoeCkueSh5KS52YWx1ZXModmFsdWVzKTtcblxuICAgICAgICB0aGlzLl9kYXRhID0gc3RhY2sodGhpcy5fZGF0YSk7XG5cbiAgICAgICAgZm9yICh2YXIgbSA9IDA7IG0gPCB2YWx1ZXModGhpcy5fZGF0YVswXSkubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGl2ZUJhc2UgPSAwO1xuICAgICAgICAgICAgdmFyIG5lZ2F0aXZlQmFzZSA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMuX2RhdGEubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB5KHZhbHVlcyh0aGlzLl9kYXRhW25dKVttXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXModGhpcy5fZGF0YVtuXSlbbV0ueTAgPSBuZWdhdGl2ZUJhc2U7XG4gICAgICAgICAgICAgICAgICAgIG5lZ2F0aXZlQmFzZSArPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXModGhpcy5fZGF0YVtuXSlbbV0ueTAgPSBwb3NpdGl2ZUJhc2U7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aXZlQmFzZSArPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdGFja0RhdGFNaXhpbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1N0YWNrRGF0YU1peGluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},,,,,,,,,,,function(module,exports,__webpack_require__){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar number = _react.PropTypes.number;\nvar string = _react.PropTypes.string;\nvar array = _react.PropTypes.array;\nvar object = _react.PropTypes.object;\nvar func = _react.PropTypes.func;\nvar oneOfType = _react.PropTypes.oneOfType;\n\nvar Bar = _react2.default.createClass({\n    displayName: "Bar",\n\n    propTypes: {\n        width: number.isRequired,\n        height: number.isRequired,\n        x: number.isRequired,\n        y: number.isRequired,\n        fill: string.isRequired,\n        data: oneOfType([array, object]).isRequired,\n        onMouseEnter: func,\n        onMouseLeave: func\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var x = _props.x;\n        var y = _props.y;\n        var width = _props.width;\n        var height = _props.height;\n        var fill = _props.fill;\n        var data = _props.data;\n        var onMouseEnter = _props.onMouseEnter;\n        var _onMouseLeave = _props.onMouseLeave;\n\n        return _react2.default.createElement("rect", {\n            className: "bar",\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            fill: fill,\n            onMouseMove: function onMouseMove(e) {\n                return onMouseEnter(e, data);\n            },\n            onMouseLeave: function onMouseLeave(e) {\n                return _onMouseLeave(e);\n            }\n        });\n    }\n});\n\nexports.default = Bar;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0Jhci5qcz82YmMzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlYWN0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJudW1iZXIiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhcnJheSIsIm9iamVjdCIsImZ1bmMiLCJvbmVPZlR5cGUiLCJCYXIiLCJjcmVhdGVDbGFzcyIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwid2lkdGgiLCJpc1JlcXVpcmVkIiwiaGVpZ2h0IiwieCIsInkiLCJmaWxsIiwiZGF0YSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInJlbmRlciIsIl9wcm9wcyIsInByb3BzIiwiX29uTW91c2VMZWF2ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvbk1vdXNlTW92ZSIsImUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUN6Q0MsV0FBTztBQURrQyxDQUE3Qzs7QUFJQSxJQUFJQyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjs7QUFFQSxJQUFJQyxVQUFVQyx1QkFBdUJILE1BQXZCLENBQWQ7O0FBRUEsU0FBU0csc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsV0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsU0FBU0YsR0FBWCxFQUFyQztBQUF3RDs7QUFFL0YsSUFBSUcsU0FBU1AsT0FBT1EsU0FBUCxDQUFpQkQsTUFBOUI7QUFDQSxJQUFJRSxTQUFTVCxPQUFPUSxTQUFQLENBQWlCQyxNQUE5QjtBQUNBLElBQUlDLFFBQVFWLE9BQU9RLFNBQVAsQ0FBaUJFLEtBQTdCO0FBQ0EsSUFBSUMsU0FBU1gsT0FBT1EsU0FBUCxDQUFpQkcsTUFBOUI7QUFDQSxJQUFJQyxPQUFPWixPQUFPUSxTQUFQLENBQWlCSSxJQUE1QjtBQUNBLElBQUlDLFlBQVliLE9BQU9RLFNBQVAsQ0FBaUJLLFNBQWpDOztBQUdBLElBQUlDLE1BQU1aLFFBQVFJLE9BQVIsQ0FBZ0JTLFdBQWhCLENBQTRCO0FBQ2xDQyxpQkFBYSxLQURxQjs7QUFHbENDLGVBQVc7QUFDUEMsZUFBT1gsT0FBT1ksVUFEUDtBQUVQQyxnQkFBUWIsT0FBT1ksVUFGUjtBQUdQRSxXQUFHZCxPQUFPWSxVQUhIO0FBSVBHLFdBQUdmLE9BQU9ZLFVBSkg7QUFLUEksY0FBTWQsT0FBT1UsVUFMTjtBQU1QSyxjQUFNWCxVQUFVLENBQUNILEtBQUQsRUFBUUMsTUFBUixDQUFWLEVBQTJCUSxVQU4xQjtBQU9QTSxzQkFBY2IsSUFQUDtBQVFQYyxzQkFBY2Q7QUFSUCxLQUh1Qjs7QUFjbENlLFlBQVEsU0FBU0EsTUFBVCxHQUFrQjtBQUN0QixZQUFJQyxTQUFTLEtBQUtDLEtBQWxCO0FBQ0EsWUFBSVIsSUFBSU8sT0FBT1AsQ0FBZjtBQUNBLFlBQUlDLElBQUlNLE9BQU9OLENBQWY7QUFDQSxZQUFJSixRQUFRVSxPQUFPVixLQUFuQjtBQUNBLFlBQUlFLFNBQVNRLE9BQU9SLE1BQXBCO0FBQ0EsWUFBSUcsT0FBT0ssT0FBT0wsSUFBbEI7QUFDQSxZQUFJQyxPQUFPSSxPQUFPSixJQUFsQjtBQUNBLFlBQUlDLGVBQWVHLE9BQU9ILFlBQTFCO0FBQ0EsWUFBSUssZ0JBQWdCRixPQUFPRixZQUEzQjs7QUFHQSxlQUFPeEIsUUFBUUksT0FBUixDQUFnQnlCLGFBQWhCLENBQThCLE1BQTlCLEVBQXNDO0FBQ3pDQyx1QkFBVyxLQUQ4QjtBQUV6Q1gsZUFBR0EsQ0FGc0M7QUFHekNDLGVBQUdBLENBSHNDO0FBSXpDSixtQkFBT0EsS0FKa0M7QUFLekNFLG9CQUFRQSxNQUxpQztBQU16Q0csa0JBQU1BLElBTm1DO0FBT3pDVSx5QkFBYSxTQUFTQSxXQUFULENBQXFCQyxDQUFyQixFQUF3QjtBQUNqQyx1QkFBT1QsYUFBYVMsQ0FBYixFQUFnQlYsSUFBaEIsQ0FBUDtBQUNILGFBVHdDO0FBVXpDRSwwQkFBYyxTQUFTQSxZQUFULENBQXNCUSxDQUF0QixFQUF5QjtBQUNuQyx1QkFBT0osY0FBY0ksQ0FBZCxDQUFQO0FBQ0g7QUFad0MsU0FBdEMsQ0FBUDtBQWNIO0FBeENpQyxDQUE1QixDQUFWOztBQTJDQXBDLFFBQVFRLE9BQVIsR0FBa0JRLEdBQWxCIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBudW1iZXIgPSBfcmVhY3QuUHJvcFR5cGVzLm51bWJlcjtcbnZhciBzdHJpbmcgPSBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZztcbnZhciBhcnJheSA9IF9yZWFjdC5Qcm9wVHlwZXMuYXJyYXk7XG52YXIgb2JqZWN0ID0gX3JlYWN0LlByb3BUeXBlcy5vYmplY3Q7XG52YXIgZnVuYyA9IF9yZWFjdC5Qcm9wVHlwZXMuZnVuYztcbnZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcblxuXG52YXIgQmFyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogXCJCYXJcIixcblxuICAgIHByb3BUeXBlczoge1xuICAgICAgICB3aWR0aDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIGhlaWdodDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIHg6IG51bWJlci5pc1JlcXVpcmVkLFxuICAgICAgICB5OiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgICAgZmlsbDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGRhdGE6IG9uZU9mVHlwZShbYXJyYXksIG9iamVjdF0pLmlzUmVxdWlyZWQsXG4gICAgICAgIG9uTW91c2VFbnRlcjogZnVuYyxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jXG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIHggPSBfcHJvcHMueDtcbiAgICAgICAgdmFyIHkgPSBfcHJvcHMueTtcbiAgICAgICAgdmFyIHdpZHRoID0gX3Byb3BzLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gX3Byb3BzLmhlaWdodDtcbiAgICAgICAgdmFyIGZpbGwgPSBfcHJvcHMuZmlsbDtcbiAgICAgICAgdmFyIGRhdGEgPSBfcHJvcHMuZGF0YTtcbiAgICAgICAgdmFyIG9uTW91c2VFbnRlciA9IF9wcm9wcy5vbk1vdXNlRW50ZXI7XG4gICAgICAgIHZhciBfb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcblxuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImJhclwiLFxuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIGZpbGw6IGZpbGwsXG4gICAgICAgICAgICBvbk1vdXNlTW92ZTogZnVuY3Rpb24gb25Nb3VzZU1vdmUoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbk1vdXNlRW50ZXIoZSwgZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfb25Nb3VzZUxlYXZlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmFyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZDMtY29tcG9uZW50cy9saWIvQmFyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar string = _react.PropTypes.string;\nvar array = _react.PropTypes.array;\n\nvar Path = _react2.default.createClass({\n    displayName: 'Path',\n\n    propTypes: {\n        className: string,\n        stroke: string.isRequired,\n        strokeLinecap: string,\n        strokeWidth: string,\n        strokeDasharray: string,\n        fill: string,\n        d: string.isRequired,\n        data: array.isRequired\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            className: 'path',\n            fill: 'none',\n            strokeWidth: '2',\n            strokeLinecap: 'butt',\n            strokeDasharray: 'none'\n        };\n    },\n    render: function render() {\n        var _props = this.props;\n        var className = _props.className;\n        var stroke = _props.stroke;\n        var strokeWidth = _props.strokeWidth;\n        var strokeLinecap = _props.strokeLinecap;\n        var strokeDasharray = _props.strokeDasharray;\n        var fill = _props.fill;\n        var d = _props.d;\n        var style = _props.style;\n        var data = _props.data;\n        var onMouseEnter = _props.onMouseEnter;\n        var _onMouseLeave = _props.onMouseLeave;\n\n        return _react2.default.createElement('path', {\n            className: className,\n            stroke: stroke,\n            strokeWidth: strokeWidth,\n            strokeLinecap: strokeLinecap,\n            strokeDasharray: strokeDasharray,\n            fill: fill,\n            d: d,\n            onMouseMove: function onMouseMove(evt) {\n                return onMouseEnter(evt, data);\n            },\n            onMouseLeave: function onMouseLeave(evt) {\n                return _onMouseLeave(evt);\n            },\n            style: style\n        });\n    }\n});\n\nexports.default = Path;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1BhdGguanM/MTRjNiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9yZWFjdCIsInJlcXVpcmUiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwic3RyaW5nIiwiUHJvcFR5cGVzIiwiYXJyYXkiLCJQYXRoIiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImNsYXNzTmFtZSIsInN0cm9rZSIsImlzUmVxdWlyZWQiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VEYXNoYXJyYXkiLCJmaWxsIiwiZCIsImRhdGEiLCJnZXREZWZhdWx0UHJvcHMiLCJyZW5kZXIiLCJfcHJvcHMiLCJwcm9wcyIsInN0eWxlIiwib25Nb3VzZUVudGVyIiwiX29uTW91c2VMZWF2ZSIsIm9uTW91c2VMZWF2ZSIsImNyZWF0ZUVsZW1lbnQiLCJvbk1vdXNlTW92ZSIsImV2dCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQ3pDQyxXQUFPO0FBRGtDLENBQTdDOztBQUlBLElBQUlDLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFiOztBQUVBLElBQUlDLFVBQVVDLHVCQUF1QkgsTUFBdkIsQ0FBZDs7QUFFQSxTQUFTRyxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxXQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxTQUFTRixHQUFYLEVBQXJDO0FBQXdEOztBQUUvRixJQUFJRyxTQUFTUCxPQUFPUSxTQUFQLENBQWlCRCxNQUE5QjtBQUNBLElBQUlFLFFBQVFULE9BQU9RLFNBQVAsQ0FBaUJDLEtBQTdCOztBQUdBLElBQUlDLE9BQU9SLFFBQVFJLE9BQVIsQ0FBZ0JLLFdBQWhCLENBQTRCO0FBQ25DQyxpQkFBYSxNQURzQjs7QUFHbkNDLGVBQVc7QUFDUEMsbUJBQVdQLE1BREo7QUFFUFEsZ0JBQVFSLE9BQU9TLFVBRlI7QUFHUEMsdUJBQWVWLE1BSFI7QUFJUFcscUJBQWFYLE1BSk47QUFLUFkseUJBQWlCWixNQUxWO0FBTVBhLGNBQU1iLE1BTkM7QUFPUGMsV0FBR2QsT0FBT1MsVUFQSDtBQVFQTSxjQUFNYixNQUFNTztBQVJMLEtBSHdCOztBQWNuQ08scUJBQWlCLFNBQVNBLGVBQVQsR0FBMkI7QUFDeEMsZUFBTztBQUNIVCx1QkFBVyxNQURSO0FBRUhNLGtCQUFNLE1BRkg7QUFHSEYseUJBQWEsR0FIVjtBQUlIRCwyQkFBZSxNQUpaO0FBS0hFLDZCQUFpQjtBQUxkLFNBQVA7QUFPSCxLQXRCa0M7QUF1Qm5DSyxZQUFRLFNBQVNBLE1BQVQsR0FBa0I7QUFDdEIsWUFBSUMsU0FBUyxLQUFLQyxLQUFsQjtBQUNBLFlBQUlaLFlBQVlXLE9BQU9YLFNBQXZCO0FBQ0EsWUFBSUMsU0FBU1UsT0FBT1YsTUFBcEI7QUFDQSxZQUFJRyxjQUFjTyxPQUFPUCxXQUF6QjtBQUNBLFlBQUlELGdCQUFnQlEsT0FBT1IsYUFBM0I7QUFDQSxZQUFJRSxrQkFBa0JNLE9BQU9OLGVBQTdCO0FBQ0EsWUFBSUMsT0FBT0ssT0FBT0wsSUFBbEI7QUFDQSxZQUFJQyxJQUFJSSxPQUFPSixDQUFmO0FBQ0EsWUFBSU0sUUFBUUYsT0FBT0UsS0FBbkI7QUFDQSxZQUFJTCxPQUFPRyxPQUFPSCxJQUFsQjtBQUNBLFlBQUlNLGVBQWVILE9BQU9HLFlBQTFCO0FBQ0EsWUFBSUMsZ0JBQWdCSixPQUFPSyxZQUEzQjs7QUFHQSxlQUFPNUIsUUFBUUksT0FBUixDQUFnQnlCLGFBQWhCLENBQThCLE1BQTlCLEVBQXNDO0FBQ3pDakIsdUJBQVdBLFNBRDhCO0FBRXpDQyxvQkFBUUEsTUFGaUM7QUFHekNHLHlCQUFhQSxXQUg0QjtBQUl6Q0QsMkJBQWVBLGFBSjBCO0FBS3pDRSw2QkFBaUJBLGVBTHdCO0FBTXpDQyxrQkFBTUEsSUFObUM7QUFPekNDLGVBQUdBLENBUHNDO0FBUXpDVyx5QkFBYSxTQUFTQSxXQUFULENBQXFCQyxHQUFyQixFQUEwQjtBQUNuQyx1QkFBT0wsYUFBYUssR0FBYixFQUFrQlgsSUFBbEIsQ0FBUDtBQUNILGFBVndDO0FBV3pDUSwwQkFBYyxTQUFTQSxZQUFULENBQXNCRyxHQUF0QixFQUEyQjtBQUNyQyx1QkFBT0osY0FBY0ksR0FBZCxDQUFQO0FBQ0gsYUFid0M7QUFjekNOLG1CQUFPQTtBQWRrQyxTQUF0QyxDQUFQO0FBZ0JIO0FBdERrQyxDQUE1QixDQUFYOztBQXlEQTdCLFFBQVFRLE9BQVIsR0FBa0JJLElBQWxCIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0cmluZyA9IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nO1xudmFyIGFycmF5ID0gX3JlYWN0LlByb3BUeXBlcy5hcnJheTtcblxuXG52YXIgUGF0aCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdQYXRoJyxcblxuICAgIHByb3BUeXBlczoge1xuICAgICAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICAgICAgc3Ryb2tlOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgc3Ryb2tlTGluZWNhcDogc3RyaW5nLFxuICAgICAgICBzdHJva2VXaWR0aDogc3RyaW5nLFxuICAgICAgICBzdHJva2VEYXNoYXJyYXk6IHN0cmluZyxcbiAgICAgICAgZmlsbDogc3RyaW5nLFxuICAgICAgICBkOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgZGF0YTogYXJyYXkuaXNSZXF1aXJlZFxuICAgIH0sXG5cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3BhdGgnLFxuICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcyJyxcbiAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6ICdidXR0JyxcbiAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheTogJ25vbmUnXG4gICAgICAgIH07XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lO1xuICAgICAgICB2YXIgc3Ryb2tlID0gX3Byb3BzLnN0cm9rZTtcbiAgICAgICAgdmFyIHN0cm9rZVdpZHRoID0gX3Byb3BzLnN0cm9rZVdpZHRoO1xuICAgICAgICB2YXIgc3Ryb2tlTGluZWNhcCA9IF9wcm9wcy5zdHJva2VMaW5lY2FwO1xuICAgICAgICB2YXIgc3Ryb2tlRGFzaGFycmF5ID0gX3Byb3BzLnN0cm9rZURhc2hhcnJheTtcbiAgICAgICAgdmFyIGZpbGwgPSBfcHJvcHMuZmlsbDtcbiAgICAgICAgdmFyIGQgPSBfcHJvcHMuZDtcbiAgICAgICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgICAgICB2YXIgZGF0YSA9IF9wcm9wcy5kYXRhO1xuICAgICAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICAgICAgdmFyIF9vbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlO1xuXG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICBzdHJva2U6IHN0cm9rZSxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6IHN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk6IHN0cm9rZURhc2hhcnJheSxcbiAgICAgICAgICAgIGZpbGw6IGZpbGwsXG4gICAgICAgICAgICBkOiBkLFxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbk1vdXNlRW50ZXIoZXZ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZShldnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX29uTW91c2VMZWF2ZShldnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGF0aDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL1BhdGguanMiXSwic291cmNlUm9vdCI6IiJ9");
},,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactD3Components = __webpack_require__(72);\n\nvar ReactD3 = _interopRequireWildcard(_reactD3Components);\n\nvar _loading = __webpack_require__(25);\n\nvar _loading2 = _interopRequireDefault(_loading);\n\nvar _spning = __webpack_require__(26);\n\nvar _spning2 = _interopRequireDefault(_spning);\n\nvar _footer = __webpack_require__(9);\n\nvar _footer2 = _interopRequireDefault(_footer);\n\nvar _utils = __webpack_require__(39);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PieChart = ReactD3.PieChart;\n\nvar _width = 320,\n    _height = 200;\n\nif (!(0, _utils.getDevice)(navigator.userAgent).mobile) {\n  _width = 600;\n  _height = 400;\n}\n\nvar Detail = function (_Component) {\n  _inherits(Detail, _Component);\n\n  function Detail(props) {\n    _classCallCheck(this, Detail);\n\n    var _this = _possibleConstructorReturn(this, (Detail.__proto__ || Object.getPrototypeOf(Detail)).call(this, props));\n\n    _this.state = {\n      pollDetailData: [],\n      loadingPop: true,\n      isVoting: false,\n      votingIndex: '',\n      votable: true\n    };\n    return _this;\n  }\n\n  _createClass(Detail, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      $('#globalTransition').css('display', 'none');\n      this.fetchPollDetail(this.props.params.id);\n    }\n  }, {\n    key: 'fetchPollDetail',\n    value: function fetchPollDetail(id) {\n      $.ajax({\n        type: 'POST',\n        url: '/api/getPollByID',\n        async: true,\n        contentType: \"application/json;charset=utf-8\",\n        data: JSON.stringify({ 'pollID': id }),\n        dataType: 'json',\n        success: function (data) {\n          if (data && data.length !== 0) {\n            this.setState({\n              pollDetailData: data,\n              loadingPop: false\n            });\n            data[0] && data[0].voterList && data[0].voterList.map(function (item) {\n              if (item === userInfo.name) {\n                this.setState({\n                  votable: false\n                });\n              }\n            }.bind(this));\n          } else {\n            this.setState({\n              loadingPop: false\n            });\n          }\n        }.bind(this)\n      });\n    }\n  }, {\n    key: 'voteOption',\n    value: function voteOption(e) {\n      if (!userInfo.name) {\n        location.href = '/login/github' + '?currentPath=' + location.pathname;\n        return false;\n      }\n      this.setState({\n        isVoting: true,\n        votingIndex: $(e.target).attr('data-index')\n      });\n      $.ajax({\n        'type': \"POST\",\n        'url': '/api/upDatePollByID',\n        'async': true,\n        'contentType': \"application/json;charset=utf-8\",\n        'data': JSON.stringify({\n          'pollID': this.props.params.id,\n          'index': ~~$(e.target).attr('data-index'),\n          'voter': userInfo.name\n        }),\n        'dataType': 'json',\n        success: function (data) {\n          if (data && data.result) {\n            this.fetchPollDetail(this.props.params.id);\n            this.setState({\n              isVoting: false,\n              votingIndex: ''\n            });\n          } else {\n            this.setState({\n              isVoting: false,\n              votingIndex: ''\n            });\n          }\n        }.bind(this)\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _result = this.state.pollDetailData[0];\n      var data = {\n        'label': '',\n        'values': []\n      };\n      var _countZero = 0; // 无人投票的选项数量\n      var totalCounts = 0; // 该选项的投票总数\n\n      _result && _result.options.map(function (item) {\n        totalCounts += item.count;\n      });\n      _result && _result.options.map(function (item) {\n        data.label = item.option;\n        if (!item.count) {\n          item.count = 0;\n          _countZero++;\n        }\n        data.values.push({\n          'x': item.option + ' (' + (0, _utils.formatPercentage)(item.count / totalCounts) + '%)',\n          'y': item.count\n        });\n      });\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'detailpage' },\n        this.state.pollDetailData.length !== 0 && _react2.default.createElement(\n          'div',\n          null,\n          _react2.default.createElement(\n            'div',\n            { className: 'panel panel-default' },\n            _react2.default.createElement(\n              'div',\n              { className: 'panel-heading' },\n              _react2.default.createElement(\n                'h3',\n                {\n                  className: 'panel-title',\n                  style: { \"font-size\": \"20px\" }\n                },\n                _result.title\n              )\n            ),\n            _react2.default.createElement(\n              'div',\n              { className: 'panel-body' },\n              _result.description\n            )\n          ),\n          _react2.default.createElement(\n            'ul',\n            {\n              className: 'list-group',\n              style: { \"line-height\": \"34px\" }\n            },\n            _result && _result.options.map(function (item, index) {\n              return _react2.default.createElement(\n                'li',\n                {\n                  className: 'list-group-item'\n                },\n                _react2.default.createElement(\n                  'div',\n                  { className: 'input-group' },\n                  item.option,\n                  _react2.default.createElement(\n                    'span',\n                    { className: 'input-group-btn' },\n                    _react2.default.createElement(\n                      'button',\n                      {\n                        className: 'btn btn-primary',\n                        type: 'button',\n                        onClick: _this2.voteOption.bind(_this2),\n                        'data-index': index,\n                        style: { \"position\": \"relative\" },\n                        disabled: _this2.state.votable ? '' : 'disabled'\n                      },\n                      _this2.state.isVoting && ~~_this2.state.votingIndex === index ? _react2.default.createElement(_spning2.default, null) : 'Vote'\n                    )\n                  )\n                )\n              );\n            })\n          ),\n          _result.options.length !== _countZero && _react2.default.createElement(PieChart, {\n            data: data,\n            width: _width,\n            height: _height,\n            margin: { top: 10, bottom: 10, left: 100, right: 100 },\n            sort: null\n          })\n        ),\n        this.state.loadingPop && _react2.default.createElement(_loading2.default, null),\n        !this.state.loadingPop && this.state.pollDetailData.length === 0 && _react2.default.createElement(\n          'div',\n          null,\n          ' no result ~ '\n        ),\n        _react2.default.createElement(_footer2.default, null)\n      );\n    }\n  }]);\n\n  return Detail;\n}(_react.Component);\n\nexports.default = Detail;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvZGV0YWlsLmpzeD83YWZjIl0sIm5hbWVzIjpbIlJlYWN0RDMiLCJQaWVDaGFydCIsIl93aWR0aCIsIl9oZWlnaHQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtb2JpbGUiLCJEZXRhaWwiLCJwcm9wcyIsInN0YXRlIiwicG9sbERldGFpbERhdGEiLCJsb2FkaW5nUG9wIiwiaXNWb3RpbmciLCJ2b3RpbmdJbmRleCIsInZvdGFibGUiLCIkIiwiY3NzIiwiZmV0Y2hQb2xsRGV0YWlsIiwicGFyYW1zIiwiaWQiLCJhamF4IiwidHlwZSIsInVybCIsImFzeW5jIiwiY29udGVudFR5cGUiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGFUeXBlIiwic3VjY2VzcyIsImxlbmd0aCIsInNldFN0YXRlIiwidm90ZXJMaXN0IiwibWFwIiwiaXRlbSIsInVzZXJJbmZvIiwibmFtZSIsImJpbmQiLCJlIiwibG9jYXRpb24iLCJocmVmIiwicGF0aG5hbWUiLCJ0YXJnZXQiLCJhdHRyIiwicmVzdWx0IiwiX3Jlc3VsdCIsIl9jb3VudFplcm8iLCJ0b3RhbENvdW50cyIsIm9wdGlvbnMiLCJjb3VudCIsImxhYmVsIiwib3B0aW9uIiwidmFsdWVzIiwicHVzaCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJpbmRleCIsInZvdGVPcHRpb24iLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7O0FBR0E7O0lBQVlBLE87O0FBRVo7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7Ozs7Ozs7OztBQUVBLElBQUlDLFdBQVdELFFBQVFDLFFBQXZCOztBQUVBLElBQUlDLFNBQVMsR0FBYjtBQUFBLElBQWtCQyxVQUFVLEdBQTVCOztBQUVBLElBQUcsQ0FBQyxzQkFBVUMsVUFBVUMsU0FBcEIsRUFBK0JDLE1BQW5DLEVBQTBDO0FBQ3hDSixXQUFTLEdBQVQ7QUFDQUMsWUFBVSxHQUFWO0FBQ0Q7O0lBRUtJLE07OztBQUNMLGtCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsZ0hBQ1ZBLEtBRFU7O0FBRWhCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxzQkFBZ0IsRUFETDtBQUVYQyxrQkFBWSxJQUZEO0FBR1hDLGdCQUFVLEtBSEM7QUFJWEMsbUJBQWEsRUFKRjtBQUtYQyxlQUFTO0FBTEUsS0FBYjtBQUZnQjtBQVNqQjs7Ozt3Q0FDbUI7QUFDbEJDLFFBQUUsbUJBQUYsRUFBdUJDLEdBQXZCLENBQTJCLFNBQTNCLEVBQXNDLE1BQXRDO0FBQ0EsV0FBS0MsZUFBTCxDQUFxQixLQUFLVCxLQUFMLENBQVdVLE1BQVgsQ0FBa0JDLEVBQXZDO0FBQ0Q7OztvQ0FDZUEsRSxFQUFHO0FBQ2pCSixRQUFFSyxJQUFGLENBQU87QUFDTEMsY0FBTSxNQUREO0FBRUxDLGFBQUssa0JBRkE7QUFHTEMsZUFBTyxJQUhGO0FBSUxDLHFCQUFhLGdDQUpSO0FBS0xDLGNBQU1DLEtBQUtDLFNBQUwsQ0FBZSxFQUFDLFVBQVVSLEVBQVgsRUFBZixDQUxEO0FBTUxTLGtCQUFVLE1BTkw7QUFPTEMsaUJBQVMsVUFBVUosSUFBVixFQUFnQjtBQUN2QixjQUFHQSxRQUFRQSxLQUFLSyxNQUFMLEtBQWdCLENBQTNCLEVBQThCO0FBQzVCLGlCQUFLQyxRQUFMLENBQWM7QUFDWnJCLDhCQUFnQmUsSUFESjtBQUVaZCwwQkFBWTtBQUZBLGFBQWQ7QUFJQWMsaUJBQUssQ0FBTCxLQUFXQSxLQUFLLENBQUwsRUFBUU8sU0FBbkIsSUFBZ0NQLEtBQUssQ0FBTCxFQUFRTyxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixVQUFTQyxJQUFULEVBQWM7QUFDbEUsa0JBQUdBLFNBQVNDLFNBQVNDLElBQXJCLEVBQTBCO0FBQ3hCLHFCQUFLTCxRQUFMLENBQWM7QUFDWmpCLDJCQUFTO0FBREcsaUJBQWQ7QUFHRDtBQUNGLGFBTnFELENBTXBEdUIsSUFOb0QsQ0FNL0MsSUFOK0MsQ0FBdEIsQ0FBaEM7QUFPRCxXQVpELE1BWU87QUFDTCxpQkFBS04sUUFBTCxDQUFjO0FBQ1pwQiwwQkFBWTtBQURBLGFBQWQ7QUFHRDtBQUNGLFNBbEJRLENBa0JQMEIsSUFsQk8sQ0FrQkYsSUFsQkU7QUFQSixPQUFQO0FBMkJEOzs7K0JBQ1VDLEMsRUFBRTtBQUNYLFVBQUcsQ0FBQ0gsU0FBU0MsSUFBYixFQUFtQjtBQUNqQkcsaUJBQVNDLElBQVQsR0FBZ0Isa0JBQWtCLGVBQWxCLEdBQW9DRCxTQUFTRSxRQUE3RDtBQUNBLGVBQU8sS0FBUDtBQUNEO0FBQ0QsV0FBS1YsUUFBTCxDQUFjO0FBQ1puQixrQkFBVSxJQURFO0FBRVpDLHFCQUFhRSxFQUFFdUIsRUFBRUksTUFBSixFQUFZQyxJQUFaLENBQWlCLFlBQWpCO0FBRkQsT0FBZDtBQUlBNUIsUUFBRUssSUFBRixDQUFPO0FBQ0wsZ0JBQVEsTUFESDtBQUVMLGVBQU8scUJBRkY7QUFHTCxpQkFBUyxJQUhKO0FBSUwsdUJBQWUsZ0NBSlY7QUFLTCxnQkFBUU0sS0FBS0MsU0FBTCxDQUFlO0FBQ3JCLG9CQUFVLEtBQUtuQixLQUFMLENBQVdVLE1BQVgsQ0FBa0JDLEVBRFA7QUFFckIsbUJBQVMsQ0FBQyxDQUFDSixFQUFFdUIsRUFBRUksTUFBSixFQUFZQyxJQUFaLENBQWlCLFlBQWpCLENBRlU7QUFHckIsbUJBQVNSLFNBQVNDO0FBSEcsU0FBZixDQUxIO0FBVUwsb0JBQVksTUFWUDtBQVdMUCxpQkFBUyxVQUFVSixJQUFWLEVBQWdCO0FBQ3ZCLGNBQUdBLFFBQVFBLEtBQUttQixNQUFoQixFQUF3QjtBQUN0QixpQkFBSzNCLGVBQUwsQ0FBcUIsS0FBS1QsS0FBTCxDQUFXVSxNQUFYLENBQWtCQyxFQUF2QztBQUNBLGlCQUFLWSxRQUFMLENBQWM7QUFDWm5CLHdCQUFVLEtBREU7QUFFWkMsMkJBQWE7QUFGRCxhQUFkO0FBSUQsV0FORCxNQU1PO0FBQ0wsaUJBQUtrQixRQUFMLENBQWM7QUFDWm5CLHdCQUFVLEtBREU7QUFFWkMsMkJBQWE7QUFGRCxhQUFkO0FBSUQ7QUFDRixTQWJRLENBYVB3QixJQWJPLENBYUYsSUFiRTtBQVhKLE9BQVA7QUEwQkQ7Ozs2QkFDUTtBQUFBOztBQUNQLFVBQUlRLFVBQVUsS0FBS3BDLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQixDQUExQixDQUFkO0FBQ0EsVUFBSWUsT0FBTztBQUNULGlCQUFTLEVBREE7QUFFVCxrQkFBVTtBQUZELE9BQVg7QUFJQSxVQUFJcUIsYUFBYSxDQUFqQixDQU5PLENBTWE7QUFDcEIsVUFBSUMsY0FBYyxDQUFsQixDQVBPLENBT2M7O0FBRXJCRixpQkFBV0EsUUFBUUcsT0FBUixDQUFnQmYsR0FBaEIsQ0FBb0IsVUFBU0MsSUFBVCxFQUFjO0FBQzNDYSx1QkFBZWIsS0FBS2UsS0FBcEI7QUFDRCxPQUZVLENBQVg7QUFHQUosaUJBQVdBLFFBQVFHLE9BQVIsQ0FBZ0JmLEdBQWhCLENBQW9CLFVBQVNDLElBQVQsRUFBYztBQUMzQ1QsYUFBS3lCLEtBQUwsR0FBYWhCLEtBQUtpQixNQUFsQjtBQUNBLFlBQUcsQ0FBQ2pCLEtBQUtlLEtBQVQsRUFBZTtBQUNiZixlQUFLZSxLQUFMLEdBQWEsQ0FBYjtBQUNBSDtBQUNEO0FBQ0RyQixhQUFLMkIsTUFBTCxDQUFZQyxJQUFaLENBQWlCO0FBQ2YsZUFBS25CLEtBQUtpQixNQUFMLEdBQWMsSUFBZCxHQUFxQiw2QkFBaUJqQixLQUFLZSxLQUFMLEdBQVdGLFdBQTVCLENBQXJCLEdBQWdFLElBRHREO0FBRWYsZUFBS2IsS0FBS2U7QUFGSyxTQUFqQjtBQUlELE9BVlUsQ0FBWDs7QUFZQSxhQUNEO0FBQUE7QUFBQSxVQUFLLFdBQVksWUFBakI7QUFDTSxhQUFLeEMsS0FBTCxDQUFXQyxjQUFYLENBQTBCb0IsTUFBMUIsS0FBcUMsQ0FBckMsSUFDQztBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsY0FBSyxXQUFVLHFCQUFmO0FBQ0U7QUFBQTtBQUFBLGdCQUFLLFdBQVUsZUFBZjtBQUNFO0FBQUE7QUFBQTtBQUNFLDZCQUFVLGFBRFo7QUFFRSx5QkFBTyxFQUFDLGFBQVksTUFBYjtBQUZUO0FBSUdlLHdCQUFRUztBQUpYO0FBREYsYUFERjtBQVNFO0FBQUE7QUFBQSxnQkFBSyxXQUFVLFlBQWY7QUFDS1Qsc0JBQVFVO0FBRGI7QUFURixXQURGO0FBY0U7QUFBQTtBQUFBO0FBQ0UseUJBQVUsWUFEWjtBQUVFLHFCQUFPLEVBQUMsZUFBZSxNQUFoQjtBQUZUO0FBSUdWLHVCQUFXQSxRQUFRRyxPQUFSLENBQWdCZixHQUFoQixDQUFxQixVQUFDQyxJQUFELEVBQU9zQixLQUFQO0FBQUEscUJBQy9CO0FBQUE7QUFBQTtBQUNFLDZCQUFVO0FBRFo7QUFHRTtBQUFBO0FBQUEsb0JBQUssV0FBVSxhQUFmO0FBQ0d0Qix1QkFBS2lCLE1BRFI7QUFFRTtBQUFBO0FBQUEsc0JBQU0sV0FBVSxpQkFBaEI7QUFDRTtBQUFBO0FBQUE7QUFDRSxtQ0FBVSxpQkFEWjtBQUVFLDhCQUFLLFFBRlA7QUFHRSxpQ0FBUyxPQUFLTSxVQUFMLENBQWdCcEIsSUFBaEIsUUFIWDtBQUlFLHNDQUFjbUIsS0FKaEI7QUFLRSwrQkFBTyxFQUFDLFlBQVcsVUFBWixFQUxUO0FBTUUsa0NBQVUsT0FBSy9DLEtBQUwsQ0FBV0ssT0FBWCxHQUFtQixFQUFuQixHQUFzQjtBQU5sQztBQVFHLDZCQUFLTCxLQUFMLENBQVdHLFFBQVgsSUFDQyxDQUFDLENBQUMsT0FBS0gsS0FBTCxDQUFXSSxXQUFiLEtBQTZCMkMsS0FEOUIsR0FDb0MscURBRHBDLEdBQytDO0FBVGxEO0FBREY7QUFGRjtBQUhGLGVBRCtCO0FBQUEsYUFBckI7QUFKZCxXQWRGO0FBNENJWCxrQkFBUUcsT0FBUixDQUFnQmxCLE1BQWhCLEtBQTJCZ0IsVUFBM0IsSUFDQSw4QkFBQyxRQUFEO0FBQ0Usa0JBQU1yQixJQURSO0FBRUUsbUJBQU92QixNQUZUO0FBR0Usb0JBQVFDLE9BSFY7QUFJRSxvQkFBUSxFQUFFdUQsS0FBSyxFQUFQLEVBQVdDLFFBQVEsRUFBbkIsRUFBdUJDLE1BQU0sR0FBN0IsRUFBa0NDLE9BQU8sR0FBekMsRUFKVjtBQUtFLGtCQUFNO0FBTFI7QUE3Q0osU0FGUDtBQXlETSxhQUFLcEQsS0FBTCxDQUFXRSxVQUFYLElBQXlCLHNEQXpEL0I7QUEwRE0sU0FBQyxLQUFLRixLQUFMLENBQVdFLFVBQVosSUFDQyxLQUFLRixLQUFMLENBQVdDLGNBQVgsQ0FBMEJvQixNQUExQixLQUFxQyxDQUR0QyxJQUVDO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0E1RFA7QUE4REM7QUE5REQsT0FEQztBQWtFRDs7Ozs7O2tCQUdZdkIsTSIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdEQzIGZyb20gJ3JlYWN0LWQzLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgTG9hZGluZyBmcm9tICcuL2NvbXBvbmVudHMvbG9hZGluZyc7XG5pbXBvcnQgU3BuaW5nIGZyb20gJy4vY29tcG9uZW50cy9zcG5pbmcnO1xuXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vY29tcG9uZW50cy9mb290ZXInO1xuXG5pbXBvcnQgeyBnZXREZXZpY2UsIGZvcm1hdFBlcmNlbnRhZ2UgfSBmcm9tICcuL2xpYi91dGlscyc7XG5cbmxldCBQaWVDaGFydCA9IFJlYWN0RDMuUGllQ2hhcnQ7XG5cbmxldCBfd2lkdGggPSAzMjAsIF9oZWlnaHQgPSAyMDA7XG5cbmlmKCFnZXREZXZpY2UobmF2aWdhdG9yLnVzZXJBZ2VudCkubW9iaWxlKXtcbiAgX3dpZHRoID0gNjAwO1xuICBfaGVpZ2h0ID0gNDAwO1xufVxuXG5jbGFzcyBEZXRhaWwgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcG9sbERldGFpbERhdGE6IFtdLFxuICAgICAgbG9hZGluZ1BvcDogdHJ1ZSxcbiAgICAgIGlzVm90aW5nOiBmYWxzZSxcbiAgICAgIHZvdGluZ0luZGV4OiAnJyxcbiAgICAgIHZvdGFibGU6IHRydWVcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgJCgnI2dsb2JhbFRyYW5zaXRpb24nKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIHRoaXMuZmV0Y2hQb2xsRGV0YWlsKHRoaXMucHJvcHMucGFyYW1zLmlkKTtcbiAgfVxuICBmZXRjaFBvbGxEZXRhaWwoaWQpe1xuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6ICcvYXBpL2dldFBvbGxCeUlEJyxcbiAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7J3BvbGxJRCc6IGlkfSksXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcG9sbERldGFpbERhdGE6IGRhdGEsXG4gICAgICAgICAgICBsb2FkaW5nUG9wOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGFbMF0gJiYgZGF0YVswXS52b3Rlckxpc3QgJiYgZGF0YVswXS52b3Rlckxpc3QubWFwKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgaWYoaXRlbSA9PT0gdXNlckluZm8ubmFtZSl7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHZvdGFibGU6IGZhbHNlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2FkaW5nUG9wOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcylcbiAgICB9KTtcbiAgfVxuICB2b3RlT3B0aW9uKGUpe1xuICAgIGlmKCF1c2VySW5mby5uYW1lKSB7XG4gICAgICBsb2NhdGlvbi5ocmVmID0gJy9sb2dpbi9naXRodWInICsgJz9jdXJyZW50UGF0aD0nICsgbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNWb3Rpbmc6IHRydWUsXG4gICAgICB2b3RpbmdJbmRleDogJChlLnRhcmdldCkuYXR0cignZGF0YS1pbmRleCcpXG4gICAgfSk7XG4gICAgJC5hamF4KHtcbiAgICAgICd0eXBlJzogXCJQT1NUXCIsXG4gICAgICAndXJsJzogJy9hcGkvdXBEYXRlUG9sbEJ5SUQnLFxuICAgICAgJ2FzeW5jJzogdHJ1ZSxcbiAgICAgICdjb250ZW50VHlwZSc6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCIsXG4gICAgICAnZGF0YSc6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgJ3BvbGxJRCc6IHRoaXMucHJvcHMucGFyYW1zLmlkLFxuICAgICAgICAnaW5kZXgnOiB+fiQoZS50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSxcbiAgICAgICAgJ3ZvdGVyJzogdXNlckluZm8ubmFtZVxuICAgICAgfSksXG4gICAgICAnZGF0YVR5cGUnOiAnanNvbicsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZihkYXRhICYmIGRhdGEucmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5mZXRjaFBvbGxEZXRhaWwodGhpcy5wcm9wcy5wYXJhbXMuaWQpO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNWb3Rpbmc6IGZhbHNlLFxuICAgICAgICAgICAgdm90aW5nSW5kZXg6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc1ZvdGluZzogZmFsc2UsXG4gICAgICAgICAgICB2b3RpbmdJbmRleDogJydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCBfcmVzdWx0ID0gdGhpcy5zdGF0ZS5wb2xsRGV0YWlsRGF0YVswXTtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICdsYWJlbCc6ICcnLFxuICAgICAgJ3ZhbHVlcyc6IFtdXG4gICAgfTtcbiAgICBsZXQgX2NvdW50WmVybyA9IDA7IC8vIOaXoOS6uuaKleelqOeahOmAiemhueaVsOmHj1xuICAgIGxldCB0b3RhbENvdW50cyA9IDA7IC8vIOivpemAiemhueeahOaKleelqOaAu+aVsFxuXG4gICAgX3Jlc3VsdCAmJiBfcmVzdWx0Lm9wdGlvbnMubWFwKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgdG90YWxDb3VudHMgKz0gaXRlbS5jb3VudDtcbiAgICB9KTtcbiAgICBfcmVzdWx0ICYmIF9yZXN1bHQub3B0aW9ucy5tYXAoZnVuY3Rpb24oaXRlbSl7XG4gICAgICBkYXRhLmxhYmVsID0gaXRlbS5vcHRpb247XG4gICAgICBpZighaXRlbS5jb3VudCl7XG4gICAgICAgIGl0ZW0uY291bnQgPSAwO1xuICAgICAgICBfY291bnRaZXJvKys7XG4gICAgICB9XG4gICAgICBkYXRhLnZhbHVlcy5wdXNoKHtcbiAgICAgICAgJ3gnOiBpdGVtLm9wdGlvbiArICcgKCcgKyBmb3JtYXRQZXJjZW50YWdlKGl0ZW0uY291bnQvdG90YWxDb3VudHMpICsgJyUpJyxcbiAgICAgICAgJ3knOiBpdGVtLmNvdW50XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZSA9IFwiZGV0YWlscGFnZVwiPlxuICAgICAgICB7dGhpcy5zdGF0ZS5wb2xsRGV0YWlsRGF0YS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbCBwYW5lbC1kZWZhdWx0XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgIDxoM1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicGFuZWwtdGl0bGVcIlxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcImZvbnQtc2l6ZVwiOlwiMjBweFwifX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7X3Jlc3VsdC50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICB7X3Jlc3VsdC5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx1bFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaXN0LWdyb3VwXCJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcImxpbmUtaGVpZ2h0XCI6IFwiMzRweFwifX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge19yZXN1bHQgJiYgX3Jlc3VsdC5vcHRpb25zLm1hcCggKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAge2l0ZW0ub3B0aW9ufVxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1idG5cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnZvdGVPcHRpb24uYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW5kZXggPSB7aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1wicG9zaXRpb25cIjpcInJlbGF0aXZlXCJ9fVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUudm90YWJsZT8nJzonZGlzYWJsZWQnfVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzVm90aW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH5+dGhpcy5zdGF0ZS52b3RpbmdJbmRleCA9PT0gaW5kZXg/PFNwbmluZyAvPjonVm90ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3VsPlxuXG4gICAgICAgICAgICB7IF9yZXN1bHQub3B0aW9ucy5sZW5ndGggIT09IF9jb3VudFplcm8gJiZcbiAgICAgICAgICAgICAgPFBpZUNoYXJ0XG4gICAgICAgICAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgICAgICAgICB3aWR0aD17X3dpZHRofVxuICAgICAgICAgICAgICAgIGhlaWdodD17X2hlaWdodH1cbiAgICAgICAgICAgICAgICBtYXJnaW49e3sgdG9wOiAxMCwgYm90dG9tOiAxMCwgbGVmdDogMTAwLCByaWdodDogMTAwIH19XG4gICAgICAgICAgICAgICAgc29ydD17bnVsbH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkaW5nUG9wICYmIDxMb2FkaW5nIC8+fVxuICAgICAgICB7IXRoaXMuc3RhdGUubG9hZGluZ1BvcCAmJlxuICAgICAgICAgIHRoaXMuc3RhdGUucG9sbERldGFpbERhdGEubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgPGRpdj4gbm8gcmVzdWx0IH4gPC9kaXY+XG4gICAgICAgIH1cblx0XHRcdFx0PEZvb3RlciAvPlxuXHRcdFx0PC9kaXY+XG4gICAgKTtcbiAgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBEZXRhaWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jbGllbnQvZGV0YWlsLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=")},,,,,function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }return target;\n};\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Axis = __webpack_require__(19);\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _Path = __webpack_require__(41);\n\nvar _Path2 = _interopRequireDefault(_Path);\n\nvar _Tooltip = __webpack_require__(21);\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = __webpack_require__(18);\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _StackAccessorMixin = __webpack_require__(28);\n\nvar _StackAccessorMixin2 = _interopRequireDefault(_StackAccessorMixin);\n\nvar _StackDataMixin = __webpack_require__(29);\n\nvar _StackDataMixin2 = _interopRequireDefault(_StackDataMixin);\n\nvar _DefaultScalesMixin = __webpack_require__(20);\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\nvar string = _react.PropTypes.string;\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        data: array.isRequired,\n        area: func.isRequired,\n        line: func.isRequired,\n        colorScale: func.isRequired,\n        stroke: func.isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var data = _props.data;\n        var area = _props.area;\n        var colorScale = _props.colorScale;\n        var values = _props.values;\n        var label = _props.label;\n        var onMouseEnter = _props.onMouseEnter;\n        var onMouseLeave = _props.onMouseLeave;\n\n        var areas = data.map(function (stack, index) {\n            return _react2.default.createElement(_Path2.default, {\n                key: label(stack) + '.' + index,\n                className: 'area',\n                stroke: 'none',\n                fill: colorScale(label(stack)),\n                d: area(values(stack)),\n                onMouseEnter: onMouseEnter,\n                onMouseLeave: onMouseLeave,\n                data: data\n            });\n        });\n\n        return _react2.default.createElement('g', null, areas);\n    }\n});\n\nvar AreaChart = _react2.default.createClass({\n    displayName: 'AreaChart',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _StackAccessorMixin2.default, _StackDataMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n\n    propTypes: {\n        interpolate: string,\n        stroke: func\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            interpolate: 'linear',\n            stroke: _d2.default.scale.category20()\n        };\n    },\n    _tooltipHtml: function _tooltipHtml(d, position) {\n        var _props2 = this.props;\n        var x = _props2.x;\n        var y0 = _props2.y0;\n        var y = _props2.y;\n        var values = _props2.values;\n\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var xValueCursor = xScale.invert(position[0]);\n\n        var xBisector = _d2.default.bisector(function (e) {\n            return x(e);\n        }).right;\n        var xIndex = xBisector(values(d[0]), xScale.invert(position[0]));\n        xIndex = xIndex == values(d[0]).length ? xIndex - 1 : xIndex;\n\n        var xIndexRight = xIndex == values(d[0]).length ? xIndex - 1 : xIndex;\n        var xValueRight = x(values(d[0])[xIndexRight]);\n\n        var xIndexLeft = xIndex == 0 ? xIndex : xIndex - 1;\n        var xValueLeft = x(values(d[0])[xIndexLeft]);\n\n        if (Math.abs(xValueCursor - xValueRight) < Math.abs(xValueCursor - xValueLeft)) {\n            xIndex = xIndexRight;\n        } else {\n            xIndex = xIndexLeft;\n        }\n\n        var yValueCursor = yScale.invert(position[1]);\n\n        var yBisector = _d2.default.bisector(function (e) {\n            return y0(values(e)[xIndex]) + y(values(e)[xIndex]);\n        }).left;\n        var yIndex = yBisector(d, yValueCursor);\n        yIndex = yIndex == d.length ? yIndex - 1 : yIndex;\n\n        var yValue = y(values(d[yIndex])[xIndex]);\n        var yValueCumulative = y0(values(d[d.length - 1])[xIndex]) + y(values(d[d.length - 1])[xIndex]);\n\n        var xValue = x(values(d[yIndex])[xIndex]);\n\n        var xPos = xScale(xValue);\n        var yPos = yScale(y0(values(d[yIndex])[xIndex]) + yValue);\n\n        return [this.props.tooltipHtml(yValue, yValueCumulative, xValue), xPos, yPos];\n    },\n    render: function render() {\n        var _props3 = this.props;\n        var height = _props3.height;\n        var width = _props3.width;\n        var margin = _props3.margin;\n        var colorScale = _props3.colorScale;\n        var interpolate = _props3.interpolate;\n        var stroke = _props3.stroke;\n        var values = _props3.values;\n        var label = _props3.label;\n        var x = _props3.x;\n        var y = _props3.y;\n        var y0 = _props3.y0;\n        var xAxis = _props3.xAxis;\n        var yAxis = _props3.yAxis;\n        var yOrientation = _props3.yOrientation;\n\n        var data = this._data;\n        var innerWidth = this._innerWidth;\n        var innerHeight = this._innerHeight;\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var line = _d2.default.svg.line().x(function (e) {\n            return xScale(x(e));\n        }).y(function (e) {\n            return yScale(y0(e) + y(e));\n        }).interpolate(interpolate);\n\n        var area = _d2.default.svg.area().x(function (e) {\n            return xScale(x(e));\n        }).y0(function (e) {\n            return yScale(yScale.domain()[0] + y0(e));\n        }).y1(function (e) {\n            return yScale(y0(e) + y(e));\n        }).interpolate(interpolate);\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: height, width: width, margin: margin }, _react2.default.createElement(DataSet, {\n            data: data,\n            line: line,\n            area: area,\n            colorScale: colorScale,\n            stroke: stroke,\n            label: label,\n            values: values,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave\n        }), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'x axis',\n            orientation: 'bottom',\n            scale: xScale,\n            height: innerHeight,\n            width: innerWidth\n        }, xAxis)), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'y axis',\n            orientation: yOrientation ? yOrientation : 'left',\n            scale: yScale,\n            height: innerHeight,\n            width: innerWidth\n        }, yAxis)), this.props.children), _react2.default.createElement(_Tooltip2.default, this.state.tooltip));\n    }\n});\n\nexports.default = AreaChart;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }return target;\n};\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Axis = __webpack_require__(19);\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _Bar = __webpack_require__(40);\n\nvar _Bar2 = _interopRequireDefault(_Bar);\n\nvar _Tooltip = __webpack_require__(21);\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = __webpack_require__(18);\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _StackAccessorMixin = __webpack_require__(28);\n\nvar _StackAccessorMixin2 = _interopRequireDefault(_StackAccessorMixin);\n\nvar _StackDataMixin = __webpack_require__(29);\n\nvar _StackDataMixin2 = _interopRequireDefault(_StackDataMixin);\n\nvar _DefaultScalesMixin = __webpack_require__(20);\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        data: array.isRequired,\n        xScale: func.isRequired,\n        yScale: func.isRequired,\n        colorScale: func.isRequired,\n        values: func.isRequired,\n        label: func.isRequired,\n        x: func.isRequired,\n        y: func.isRequired,\n        y0: func.isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var data = _props.data;\n        var xScale = _props.xScale;\n        var yScale = _props.yScale;\n        var colorScale = _props.colorScale;\n        var values = _props.values;\n        var label = _props.label;\n        var x = _props.x;\n        var y = _props.y;\n        var y0 = _props.y0;\n        var onMouseEnter = _props.onMouseEnter;\n        var onMouseLeave = _props.onMouseLeave;\n        var groupedBars = _props.groupedBars;\n        var colorByLabel = _props.colorByLabel;\n\n        var bars = void 0;\n        if (groupedBars) {\n            bars = data.map(function (stack, serieIndex) {\n                return values(stack).map(function (e, index) {\n                    var yVal = y(e) < 0 ? yScale(0) : yScale(y(e));\n                    return _react2.default.createElement(_Bar2.default, {\n                        key: label(stack) + '.' + index,\n                        width: xScale.rangeBand() / data.length,\n                        height: Math.abs(yScale(0) - yScale(y(e))),\n                        x: xScale(x(e)) + xScale.rangeBand() * serieIndex / data.length,\n                        y: yVal,\n                        fill: colorScale(label(stack)),\n                        data: e,\n                        onMouseEnter: onMouseEnter,\n                        onMouseLeave: onMouseLeave\n                    });\n                });\n            });\n        } else {\n            bars = data.map(function (stack) {\n                return values(stack).map(function (e, index) {\n                    var color = colorByLabel ? colorScale(label(stack)) : colorScale(x(e));\n                    var yVal = y(e) < 0 ? yScale(y0(e)) : yScale(y0(e) + y(e));\n                    return _react2.default.createElement(_Bar2.default, {\n                        key: label(stack) + '.' + index,\n                        width: xScale.rangeBand(),\n                        height: Math.abs(yScale(y0(e) + y(e)) - yScale(y0(e))),\n                        x: xScale(x(e)),\n                        y: yVal,\n                        fill: color,\n                        data: e,\n                        onMouseEnter: onMouseEnter,\n                        onMouseLeave: onMouseLeave\n                    });\n                });\n            });\n        }\n\n        return _react2.default.createElement('g', null, bars);\n    }\n});\n\nvar BarChart = _react2.default.createClass({\n    displayName: 'BarChart',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _StackAccessorMixin2.default, _StackDataMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            colorByLabel: true\n        };\n    },\n    _tooltipHtml: function _tooltipHtml(d) {\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var html = this.props.tooltipHtml(this.props.x(d), this.props.y0(d), this.props.y(d));\n\n        var midPoint = xScale.rangeBand() / 2;\n        var xPos = midPoint + xScale(this.props.x(d));\n\n        var topStack = this._data[this._data.length - 1].values;\n        var topElement = null;\n\n        // TODO: this might not scale if dataset is huge.\n        // consider pre-computing yPos for each X\n        for (var i = 0; i < topStack.length; i++) {\n            if (this.props.x(topStack[i]) === this.props.x(d)) {\n                topElement = topStack[i];\n                break;\n            }\n        }\n        var yPos = yScale(this.props.y0(topElement) + this.props.y(topElement));\n\n        return [html, xPos, yPos];\n    },\n    render: function render() {\n        var _props2 = this.props;\n        var xAxis = _props2.xAxis;\n        var yAxis = _props2.yAxis;\n        var height = _props2.height;\n        var width = _props2.width;\n        var margin = _props2.margin;\n        var colorScale = _props2.colorScale;\n        var values = _props2.values;\n        var label = _props2.label;\n        var y = _props2.y;\n        var y0 = _props2.y0;\n        var x = _props2.x;\n        var groupedBars = _props2.groupedBars;\n        var colorByLabel = _props2.colorByLabel;\n        var tickFormat = _props2.tickFormat;\n\n        var data = this._data;\n        var innerWidth = this._innerWidth;\n        var innerHeight = this._innerHeight;\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n        var yIntercept = this._yIntercept;\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: height, width: width, margin: margin }, _react2.default.createElement(DataSet, {\n            data: data,\n            xScale: xScale,\n            yScale: yScale,\n            colorScale: colorScale,\n            values: values,\n            label: label,\n            y: y,\n            y0: y0,\n            x: x,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave,\n            groupedBars: groupedBars,\n            colorByLabel: colorByLabel\n        }), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'x axis',\n            orientation: 'bottom',\n            scale: xScale,\n            height: innerHeight,\n            width: innerWidth,\n            zero: yIntercept,\n            tickFormat: tickFormat\n        }, xAxis)), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'y axis',\n            orientation: 'left',\n            scale: yScale,\n            height: innerHeight,\n            width: innerWidth,\n            tickFormat: tickFormat\n        }, yAxis)), this.props.children), _react2.default.createElement(_Tooltip2.default, this.state.tooltip));\n    }\n});\n\nexports.default = BarChart;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL0JhckNoYXJ0LmpzPzQzYTgiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfQ2hhcnQiLCJfQ2hhcnQyIiwiX0F4aXMiLCJfQXhpczIiLCJfQmFyIiwiX0JhcjIiLCJfVG9vbHRpcCIsIl9Ub29sdGlwMiIsIl9EZWZhdWx0UHJvcHNNaXhpbiIsIl9EZWZhdWx0UHJvcHNNaXhpbjIiLCJfSGVpZ2h0V2lkdGhNaXhpbiIsIl9IZWlnaHRXaWR0aE1peGluMiIsIl9BcnJheWlmeU1peGluIiwiX0FycmF5aWZ5TWl4aW4yIiwiX1N0YWNrQWNjZXNzb3JNaXhpbiIsIl9TdGFja0FjY2Vzc29yTWl4aW4yIiwiX1N0YWNrRGF0YU1peGluIiwiX1N0YWNrRGF0YU1peGluMiIsIl9EZWZhdWx0U2NhbGVzTWl4aW4iLCJfRGVmYXVsdFNjYWxlc01peGluMiIsIl9Ub29sdGlwTWl4aW4iLCJfVG9vbHRpcE1peGluMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiYXJyYXkiLCJQcm9wVHlwZXMiLCJmdW5jIiwiRGF0YVNldCIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJkYXRhIiwiaXNSZXF1aXJlZCIsInhTY2FsZSIsInlTY2FsZSIsImNvbG9yU2NhbGUiLCJ2YWx1ZXMiLCJsYWJlbCIsIngiLCJ5IiwieTAiLCJyZW5kZXIiLCJfcHJvcHMiLCJwcm9wcyIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImdyb3VwZWRCYXJzIiwiY29sb3JCeUxhYmVsIiwiYmFycyIsIm1hcCIsInN0YWNrIiwic2VyaWVJbmRleCIsImUiLCJpbmRleCIsInlWYWwiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJyYW5nZUJhbmQiLCJoZWlnaHQiLCJNYXRoIiwiYWJzIiwiZmlsbCIsImNvbG9yIiwiQmFyQ2hhcnQiLCJtaXhpbnMiLCJnZXREZWZhdWx0UHJvcHMiLCJfdG9vbHRpcEh0bWwiLCJkIiwiX3hTY2FsZSIsIl95U2NhbGUiLCJodG1sIiwidG9vbHRpcEh0bWwiLCJtaWRQb2ludCIsInhQb3MiLCJ0b3BTdGFjayIsIl9kYXRhIiwidG9wRWxlbWVudCIsInlQb3MiLCJfcHJvcHMyIiwieEF4aXMiLCJ5QXhpcyIsIm1hcmdpbiIsInRpY2tGb3JtYXQiLCJpbm5lcldpZHRoIiwiX2lubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIl9pbm5lckhlaWdodCIsInlJbnRlcmNlcHQiLCJfeUludGVyY2VwdCIsImNsYXNzTmFtZSIsIm9yaWVudGF0aW9uIiwic2NhbGUiLCJ6ZXJvIiwiY2hpbGRyZW4iLCJzdGF0ZSIsInRvb2x0aXAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUN6Q0MsV0FBTztBQURrQyxDQUE3Qzs7QUFJQSxJQUFJQyxXQUFXSixPQUFPSyxNQUFQLElBQWlCLFVBQVVDLE1BQVYsRUFBa0I7QUFBRSxTQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUMsVUFBVUMsTUFBOUIsRUFBc0NGLEdBQXRDLEVBQTJDO0FBQUUsWUFBSUcsU0FBU0YsVUFBVUQsQ0FBVixDQUFiLENBQTJCLEtBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7QUFBRSxnQkFBSVYsT0FBT1ksU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDSixNQUFyQyxFQUE2Q0MsR0FBN0MsQ0FBSixFQUF1RDtBQUFFTCx1QkFBT0ssR0FBUCxJQUFjRCxPQUFPQyxHQUFQLENBQWQ7QUFBNEI7QUFBRTtBQUFFLEtBQUMsT0FBT0wsTUFBUDtBQUFnQixDQUFoUTs7QUFFQSxJQUFJUyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjs7QUFFQSxJQUFJQyxVQUFVQyx1QkFBdUJILE1BQXZCLENBQWQ7O0FBRUEsSUFBSUksU0FBUyxtQkFBQUgsQ0FBUSxFQUFSLENBQWI7O0FBRUEsSUFBSUksVUFBVUYsdUJBQXVCQyxNQUF2QixDQUFkOztBQUVBLElBQUlFLFFBQVEsbUJBQUFMLENBQVEsRUFBUixDQUFaOztBQUVBLElBQUlNLFNBQVNKLHVCQUF1QkcsS0FBdkIsQ0FBYjs7QUFFQSxJQUFJRSxPQUFPLG1CQUFBUCxDQUFRLEVBQVIsQ0FBWDs7QUFFQSxJQUFJUSxRQUFRTix1QkFBdUJLLElBQXZCLENBQVo7O0FBRUEsSUFBSUUsV0FBVyxtQkFBQVQsQ0FBUSxFQUFSLENBQWY7O0FBRUEsSUFBSVUsWUFBWVIsdUJBQXVCTyxRQUF2QixDQUFoQjs7QUFFQSxJQUFJRSxxQkFBcUIsbUJBQUFYLENBQVEsRUFBUixDQUF6Qjs7QUFFQSxJQUFJWSxzQkFBc0JWLHVCQUF1QlMsa0JBQXZCLENBQTFCOztBQUVBLElBQUlFLG9CQUFvQixtQkFBQWIsQ0FBUSxFQUFSLENBQXhCOztBQUVBLElBQUljLHFCQUFxQlosdUJBQXVCVyxpQkFBdkIsQ0FBekI7O0FBRUEsSUFBSUUsaUJBQWlCLG1CQUFBZixDQUFRLEVBQVIsQ0FBckI7O0FBRUEsSUFBSWdCLGtCQUFrQmQsdUJBQXVCYSxjQUF2QixDQUF0Qjs7QUFFQSxJQUFJRSxzQkFBc0IsbUJBQUFqQixDQUFRLEVBQVIsQ0FBMUI7O0FBRUEsSUFBSWtCLHVCQUF1QmhCLHVCQUF1QmUsbUJBQXZCLENBQTNCOztBQUVBLElBQUlFLGtCQUFrQixtQkFBQW5CLENBQVEsRUFBUixDQUF0Qjs7QUFFQSxJQUFJb0IsbUJBQW1CbEIsdUJBQXVCaUIsZUFBdkIsQ0FBdkI7O0FBRUEsSUFBSUUsc0JBQXNCLG1CQUFBckIsQ0FBUSxFQUFSLENBQTFCOztBQUVBLElBQUlzQix1QkFBdUJwQix1QkFBdUJtQixtQkFBdkIsQ0FBM0I7O0FBRUEsSUFBSUUsZ0JBQWdCLG1CQUFBdkIsQ0FBUSxFQUFSLENBQXBCOztBQUVBLElBQUl3QixpQkFBaUJ0Qix1QkFBdUJxQixhQUF2QixDQUFyQjs7QUFFQSxTQUFTckIsc0JBQVQsQ0FBZ0N1QixHQUFoQyxFQUFxQztBQUFFLFdBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLFNBQVNGLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLElBQUlHLFFBQVE3QixPQUFPOEIsU0FBUCxDQUFpQkQsS0FBN0I7QUFDQSxJQUFJRSxPQUFPL0IsT0FBTzhCLFNBQVAsQ0FBaUJDLElBQTVCOztBQUdBLElBQUlDLFVBQVU5QixRQUFRMEIsT0FBUixDQUFnQkssV0FBaEIsQ0FBNEI7QUFDdENDLGlCQUFhLFNBRHlCOztBQUd0Q0MsZUFBVztBQUNQQyxjQUFNUCxNQUFNUSxVQURMO0FBRVBDLGdCQUFRUCxLQUFLTSxVQUZOO0FBR1BFLGdCQUFRUixLQUFLTSxVQUhOO0FBSVBHLG9CQUFZVCxLQUFLTSxVQUpWO0FBS1BJLGdCQUFRVixLQUFLTSxVQUxOO0FBTVBLLGVBQU9YLEtBQUtNLFVBTkw7QUFPUE0sV0FBR1osS0FBS00sVUFQRDtBQVFQTyxXQUFHYixLQUFLTSxVQVJEO0FBU1BRLFlBQUlkLEtBQUtNO0FBVEYsS0FIMkI7O0FBZXRDUyxZQUFRLFNBQVNBLE1BQVQsR0FBa0I7QUFDdEIsWUFBSUMsU0FBUyxLQUFLQyxLQUFsQjtBQUNBLFlBQUlaLE9BQU9XLE9BQU9YLElBQWxCO0FBQ0EsWUFBSUUsU0FBU1MsT0FBT1QsTUFBcEI7QUFDQSxZQUFJQyxTQUFTUSxPQUFPUixNQUFwQjtBQUNBLFlBQUlDLGFBQWFPLE9BQU9QLFVBQXhCO0FBQ0EsWUFBSUMsU0FBU00sT0FBT04sTUFBcEI7QUFDQSxZQUFJQyxRQUFRSyxPQUFPTCxLQUFuQjtBQUNBLFlBQUlDLElBQUlJLE9BQU9KLENBQWY7QUFDQSxZQUFJQyxJQUFJRyxPQUFPSCxDQUFmO0FBQ0EsWUFBSUMsS0FBS0UsT0FBT0YsRUFBaEI7QUFDQSxZQUFJSSxlQUFlRixPQUFPRSxZQUExQjtBQUNBLFlBQUlDLGVBQWVILE9BQU9HLFlBQTFCO0FBQ0EsWUFBSUMsY0FBY0osT0FBT0ksV0FBekI7QUFDQSxZQUFJQyxlQUFlTCxPQUFPSyxZQUExQjs7QUFHQSxZQUFJQyxPQUFPLEtBQUssQ0FBaEI7QUFDQSxZQUFJRixXQUFKLEVBQWlCO0FBQ2JFLG1CQUFPakIsS0FBS2tCLEdBQUwsQ0FBUyxVQUFVQyxLQUFWLEVBQWlCQyxVQUFqQixFQUE2QjtBQUN6Qyx1QkFBT2YsT0FBT2MsS0FBUCxFQUFjRCxHQUFkLENBQWtCLFVBQVVHLENBQVYsRUFBYUMsS0FBYixFQUFvQjtBQUN6Qyx3QkFBSUMsT0FBT2YsRUFBRWEsQ0FBRixJQUFPLENBQVAsR0FBV2xCLE9BQU8sQ0FBUCxDQUFYLEdBQXVCQSxPQUFPSyxFQUFFYSxDQUFGLENBQVAsQ0FBbEM7QUFDQSwyQkFBT3ZELFFBQVEwQixPQUFSLENBQWdCZ0MsYUFBaEIsQ0FBOEJuRCxNQUFNbUIsT0FBcEMsRUFBNkM7QUFDaERoQyw2QkFBSzhDLE1BQU1hLEtBQU4sSUFBZSxHQUFmLEdBQXFCRyxLQURzQjtBQUVoREcsK0JBQU92QixPQUFPd0IsU0FBUCxLQUFxQjFCLEtBQUsxQyxNQUZlO0FBR2hEcUUsZ0NBQVFDLEtBQUtDLEdBQUwsQ0FBUzFCLE9BQU8sQ0FBUCxJQUFZQSxPQUFPSyxFQUFFYSxDQUFGLENBQVAsQ0FBckIsQ0FId0M7QUFJaERkLDJCQUFHTCxPQUFPSyxFQUFFYyxDQUFGLENBQVAsSUFBZW5CLE9BQU93QixTQUFQLEtBQXFCTixVQUFyQixHQUFrQ3BCLEtBQUsxQyxNQUpUO0FBS2hEa0QsMkJBQUdlLElBTDZDO0FBTWhETyw4QkFBTTFCLFdBQVdFLE1BQU1hLEtBQU4sQ0FBWCxDQU4wQztBQU9oRG5CLDhCQUFNcUIsQ0FQMEM7QUFRaERSLHNDQUFjQSxZQVJrQztBQVNoREMsc0NBQWNBO0FBVGtDLHFCQUE3QyxDQUFQO0FBV0gsaUJBYk0sQ0FBUDtBQWNILGFBZk0sQ0FBUDtBQWdCSCxTQWpCRCxNQWlCTztBQUNIRyxtQkFBT2pCLEtBQUtrQixHQUFMLENBQVMsVUFBVUMsS0FBVixFQUFpQjtBQUM3Qix1QkFBT2QsT0FBT2MsS0FBUCxFQUFjRCxHQUFkLENBQWtCLFVBQVVHLENBQVYsRUFBYUMsS0FBYixFQUFvQjtBQUN6Qyx3QkFBSVMsUUFBUWYsZUFBZVosV0FBV0UsTUFBTWEsS0FBTixDQUFYLENBQWYsR0FBMENmLFdBQVdHLEVBQUVjLENBQUYsQ0FBWCxDQUF0RDtBQUNBLHdCQUFJRSxPQUFPZixFQUFFYSxDQUFGLElBQU8sQ0FBUCxHQUFXbEIsT0FBT00sR0FBR1ksQ0FBSCxDQUFQLENBQVgsR0FBMkJsQixPQUFPTSxHQUFHWSxDQUFILElBQVFiLEVBQUVhLENBQUYsQ0FBZixDQUF0QztBQUNBLDJCQUFPdkQsUUFBUTBCLE9BQVIsQ0FBZ0JnQyxhQUFoQixDQUE4Qm5ELE1BQU1tQixPQUFwQyxFQUE2QztBQUNoRGhDLDZCQUFLOEMsTUFBTWEsS0FBTixJQUFlLEdBQWYsR0FBcUJHLEtBRHNCO0FBRWhERywrQkFBT3ZCLE9BQU93QixTQUFQLEVBRnlDO0FBR2hEQyxnQ0FBUUMsS0FBS0MsR0FBTCxDQUFTMUIsT0FBT00sR0FBR1ksQ0FBSCxJQUFRYixFQUFFYSxDQUFGLENBQWYsSUFBdUJsQixPQUFPTSxHQUFHWSxDQUFILENBQVAsQ0FBaEMsQ0FId0M7QUFJaERkLDJCQUFHTCxPQUFPSyxFQUFFYyxDQUFGLENBQVAsQ0FKNkM7QUFLaERiLDJCQUFHZSxJQUw2QztBQU1oRE8sOEJBQU1DLEtBTjBDO0FBT2hEL0IsOEJBQU1xQixDQVAwQztBQVFoRFIsc0NBQWNBLFlBUmtDO0FBU2hEQyxzQ0FBY0E7QUFUa0MscUJBQTdDLENBQVA7QUFXSCxpQkFkTSxDQUFQO0FBZUgsYUFoQk0sQ0FBUDtBQWlCSDs7QUFFRCxlQUFPaEQsUUFBUTBCLE9BQVIsQ0FBZ0JnQyxhQUFoQixDQUNILEdBREcsRUFFSCxJQUZHLEVBR0hQLElBSEcsQ0FBUDtBQUtIO0FBM0VxQyxDQUE1QixDQUFkOztBQThFQSxJQUFJZSxXQUFXbEUsUUFBUTBCLE9BQVIsQ0FBZ0JLLFdBQWhCLENBQTRCO0FBQ3ZDQyxpQkFBYSxVQUQwQjs7QUFHdkNtQyxZQUFRLENBQUN4RCxvQkFBb0JlLE9BQXJCLEVBQThCYixtQkFBbUJhLE9BQWpELEVBQTBEWCxnQkFBZ0JXLE9BQTFFLEVBQW1GVCxxQkFBcUJTLE9BQXhHLEVBQWlIUCxpQkFBaUJPLE9BQWxJLEVBQTJJTCxxQkFBcUJLLE9BQWhLLEVBQXlLSCxlQUFlRyxPQUF4TCxDQUgrQjs7QUFLdkMwQyxxQkFBaUIsU0FBU0EsZUFBVCxHQUEyQjtBQUN4QyxlQUFPO0FBQ0hsQiwwQkFBYztBQURYLFNBQVA7QUFHSCxLQVRzQztBQVV2Q21CLGtCQUFjLFNBQVNBLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ25DLFlBQUlsQyxTQUFTLEtBQUttQyxPQUFsQjtBQUNBLFlBQUlsQyxTQUFTLEtBQUttQyxPQUFsQjs7QUFFQSxZQUFJQyxPQUFPLEtBQUszQixLQUFMLENBQVc0QixXQUFYLENBQXVCLEtBQUs1QixLQUFMLENBQVdMLENBQVgsQ0FBYTZCLENBQWIsQ0FBdkIsRUFBd0MsS0FBS3hCLEtBQUwsQ0FBV0gsRUFBWCxDQUFjMkIsQ0FBZCxDQUF4QyxFQUEwRCxLQUFLeEIsS0FBTCxDQUFXSixDQUFYLENBQWE0QixDQUFiLENBQTFELENBQVg7O0FBRUEsWUFBSUssV0FBV3ZDLE9BQU93QixTQUFQLEtBQXFCLENBQXBDO0FBQ0EsWUFBSWdCLE9BQU9ELFdBQVd2QyxPQUFPLEtBQUtVLEtBQUwsQ0FBV0wsQ0FBWCxDQUFhNkIsQ0FBYixDQUFQLENBQXRCOztBQUVBLFlBQUlPLFdBQVcsS0FBS0MsS0FBTCxDQUFXLEtBQUtBLEtBQUwsQ0FBV3RGLE1BQVgsR0FBb0IsQ0FBL0IsRUFBa0MrQyxNQUFqRDtBQUNBLFlBQUl3QyxhQUFhLElBQWpCOztBQUVBO0FBQ0E7QUFDQSxhQUFLLElBQUl6RixJQUFJLENBQWIsRUFBZ0JBLElBQUl1RixTQUFTckYsTUFBN0IsRUFBcUNGLEdBQXJDLEVBQTBDO0FBQ3RDLGdCQUFJLEtBQUt3RCxLQUFMLENBQVdMLENBQVgsQ0FBYW9DLFNBQVN2RixDQUFULENBQWIsTUFBOEIsS0FBS3dELEtBQUwsQ0FBV0wsQ0FBWCxDQUFhNkIsQ0FBYixDQUFsQyxFQUFtRDtBQUMvQ1MsNkJBQWFGLFNBQVN2RixDQUFULENBQWI7QUFDQTtBQUNIO0FBQ0o7QUFDRCxZQUFJMEYsT0FBTzNDLE9BQU8sS0FBS1MsS0FBTCxDQUFXSCxFQUFYLENBQWNvQyxVQUFkLElBQTRCLEtBQUtqQyxLQUFMLENBQVdKLENBQVgsQ0FBYXFDLFVBQWIsQ0FBbkMsQ0FBWDs7QUFFQSxlQUFPLENBQUNOLElBQUQsRUFBT0csSUFBUCxFQUFhSSxJQUFiLENBQVA7QUFDSCxLQWpDc0M7QUFrQ3ZDcEMsWUFBUSxTQUFTQSxNQUFULEdBQWtCO0FBQ3RCLFlBQUlxQyxVQUFVLEtBQUtuQyxLQUFuQjtBQUNBLFlBQUlvQyxRQUFRRCxRQUFRQyxLQUFwQjtBQUNBLFlBQUlDLFFBQVFGLFFBQVFFLEtBQXBCO0FBQ0EsWUFBSXRCLFNBQVNvQixRQUFRcEIsTUFBckI7QUFDQSxZQUFJRixRQUFRc0IsUUFBUXRCLEtBQXBCO0FBQ0EsWUFBSXlCLFNBQVNILFFBQVFHLE1BQXJCO0FBQ0EsWUFBSTlDLGFBQWEyQyxRQUFRM0MsVUFBekI7QUFDQSxZQUFJQyxTQUFTMEMsUUFBUTFDLE1BQXJCO0FBQ0EsWUFBSUMsUUFBUXlDLFFBQVF6QyxLQUFwQjtBQUNBLFlBQUlFLElBQUl1QyxRQUFRdkMsQ0FBaEI7QUFDQSxZQUFJQyxLQUFLc0MsUUFBUXRDLEVBQWpCO0FBQ0EsWUFBSUYsSUFBSXdDLFFBQVF4QyxDQUFoQjtBQUNBLFlBQUlRLGNBQWNnQyxRQUFRaEMsV0FBMUI7QUFDQSxZQUFJQyxlQUFlK0IsUUFBUS9CLFlBQTNCO0FBQ0EsWUFBSW1DLGFBQWFKLFFBQVFJLFVBQXpCOztBQUdBLFlBQUluRCxPQUFPLEtBQUs0QyxLQUFoQjtBQUNBLFlBQUlRLGFBQWEsS0FBS0MsV0FBdEI7QUFDQSxZQUFJQyxjQUFjLEtBQUtDLFlBQXZCO0FBQ0EsWUFBSXJELFNBQVMsS0FBS21DLE9BQWxCO0FBQ0EsWUFBSWxDLFNBQVMsS0FBS21DLE9BQWxCO0FBQ0EsWUFBSWtCLGFBQWEsS0FBS0MsV0FBdEI7O0FBRUEsZUFBTzNGLFFBQVEwQixPQUFSLENBQWdCZ0MsYUFBaEIsQ0FDSCxLQURHLEVBRUgsSUFGRyxFQUdIMUQsUUFBUTBCLE9BQVIsQ0FBZ0JnQyxhQUFoQixDQUNJdkQsUUFBUXVCLE9BRFosRUFFSSxFQUFFbUMsUUFBUUEsTUFBVixFQUFrQkYsT0FBT0EsS0FBekIsRUFBZ0N5QixRQUFRQSxNQUF4QyxFQUZKLEVBR0lwRixRQUFRMEIsT0FBUixDQUFnQmdDLGFBQWhCLENBQThCNUIsT0FBOUIsRUFBdUM7QUFDbkNJLGtCQUFNQSxJQUQ2QjtBQUVuQ0Usb0JBQVFBLE1BRjJCO0FBR25DQyxvQkFBUUEsTUFIMkI7QUFJbkNDLHdCQUFZQSxVQUp1QjtBQUtuQ0Msb0JBQVFBLE1BTDJCO0FBTW5DQyxtQkFBT0EsS0FONEI7QUFPbkNFLGVBQUdBLENBUGdDO0FBUW5DQyxnQkFBSUEsRUFSK0I7QUFTbkNGLGVBQUdBLENBVGdDO0FBVW5DTSwwQkFBYyxLQUFLQSxZQVZnQjtBQVduQ0MsMEJBQWMsS0FBS0EsWUFYZ0I7QUFZbkNDLHlCQUFhQSxXQVpzQjtBQWFuQ0MsMEJBQWNBO0FBYnFCLFNBQXZDLENBSEosRUFrQklsRCxRQUFRMEIsT0FBUixDQUFnQmdDLGFBQWhCLENBQThCckQsT0FBT3FCLE9BQXJDLEVBQThDdkMsU0FBUztBQUNuRHlHLHVCQUFXLFFBRHdDO0FBRW5EQyx5QkFBYSxRQUZzQztBQUduREMsbUJBQU8xRCxNQUg0QztBQUluRHlCLG9CQUFRMkIsV0FKMkM7QUFLbkQ3QixtQkFBTzJCLFVBTDRDO0FBTW5EUyxrQkFBTUwsVUFONkM7QUFPbkRMLHdCQUFZQTtBQVB1QyxTQUFULEVBUTNDSCxLQVIyQyxDQUE5QyxDQWxCSixFQTJCSWxGLFFBQVEwQixPQUFSLENBQWdCZ0MsYUFBaEIsQ0FBOEJyRCxPQUFPcUIsT0FBckMsRUFBOEN2QyxTQUFTO0FBQ25EeUcsdUJBQVcsUUFEd0M7QUFFbkRDLHlCQUFhLE1BRnNDO0FBR25EQyxtQkFBT3pELE1BSDRDO0FBSW5Ed0Isb0JBQVEyQixXQUoyQztBQUtuRDdCLG1CQUFPMkIsVUFMNEM7QUFNbkRELHdCQUFZQTtBQU51QyxTQUFULEVBTzNDRixLQVAyQyxDQUE5QyxDQTNCSixFQW1DSSxLQUFLckMsS0FBTCxDQUFXa0QsUUFuQ2YsQ0FIRyxFQXdDSGhHLFFBQVEwQixPQUFSLENBQWdCZ0MsYUFBaEIsQ0FBOEJqRCxVQUFVaUIsT0FBeEMsRUFBaUQsS0FBS3VFLEtBQUwsQ0FBV0MsT0FBNUQsQ0F4Q0csQ0FBUDtBQTBDSDtBQXJHc0MsQ0FBNUIsQ0FBZjs7QUF3R0FqSCxRQUFReUMsT0FBUixHQUFrQndDLFFBQWxCIiwiZmlsZSI6IjY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9DaGFydCA9IHJlcXVpcmUoJy4vQ2hhcnQnKTtcblxudmFyIF9DaGFydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaGFydCk7XG5cbnZhciBfQXhpcyA9IHJlcXVpcmUoJy4vQXhpcycpO1xuXG52YXIgX0F4aXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXhpcyk7XG5cbnZhciBfQmFyID0gcmVxdWlyZSgnLi9CYXInKTtcblxudmFyIF9CYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmFyKTtcblxudmFyIF9Ub29sdGlwID0gcmVxdWlyZSgnLi9Ub29sdGlwJyk7XG5cbnZhciBfVG9vbHRpcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub29sdGlwKTtcblxudmFyIF9EZWZhdWx0UHJvcHNNaXhpbiA9IHJlcXVpcmUoJy4vRGVmYXVsdFByb3BzTWl4aW4nKTtcblxudmFyIF9EZWZhdWx0UHJvcHNNaXhpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZWZhdWx0UHJvcHNNaXhpbik7XG5cbnZhciBfSGVpZ2h0V2lkdGhNaXhpbiA9IHJlcXVpcmUoJy4vSGVpZ2h0V2lkdGhNaXhpbicpO1xuXG52YXIgX0hlaWdodFdpZHRoTWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSGVpZ2h0V2lkdGhNaXhpbik7XG5cbnZhciBfQXJyYXlpZnlNaXhpbiA9IHJlcXVpcmUoJy4vQXJyYXlpZnlNaXhpbicpO1xuXG52YXIgX0FycmF5aWZ5TWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXJyYXlpZnlNaXhpbik7XG5cbnZhciBfU3RhY2tBY2Nlc3Nvck1peGluID0gcmVxdWlyZSgnLi9TdGFja0FjY2Vzc29yTWl4aW4nKTtcblxudmFyIF9TdGFja0FjY2Vzc29yTWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RhY2tBY2Nlc3Nvck1peGluKTtcblxudmFyIF9TdGFja0RhdGFNaXhpbiA9IHJlcXVpcmUoJy4vU3RhY2tEYXRhTWl4aW4nKTtcblxudmFyIF9TdGFja0RhdGFNaXhpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdGFja0RhdGFNaXhpbik7XG5cbnZhciBfRGVmYXVsdFNjYWxlc01peGluID0gcmVxdWlyZSgnLi9EZWZhdWx0U2NhbGVzTWl4aW4nKTtcblxudmFyIF9EZWZhdWx0U2NhbGVzTWl4aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGVmYXVsdFNjYWxlc01peGluKTtcblxudmFyIF9Ub29sdGlwTWl4aW4gPSByZXF1aXJlKCcuL1Rvb2x0aXBNaXhpbicpO1xuXG52YXIgX1Rvb2x0aXBNaXhpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub29sdGlwTWl4aW4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYXJyYXkgPSBfcmVhY3QuUHJvcFR5cGVzLmFycmF5O1xudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG5cblxudmFyIERhdGFTZXQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnRGF0YVNldCcsXG5cbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgZGF0YTogYXJyYXkuaXNSZXF1aXJlZCxcbiAgICAgICAgeFNjYWxlOiBmdW5jLmlzUmVxdWlyZWQsXG4gICAgICAgIHlTY2FsZTogZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgICBjb2xvclNjYWxlOiBmdW5jLmlzUmVxdWlyZWQsXG4gICAgICAgIHZhbHVlczogZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgICBsYWJlbDogZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgICB4OiBmdW5jLmlzUmVxdWlyZWQsXG4gICAgICAgIHk6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgICAgeTA6IGZ1bmMuaXNSZXF1aXJlZFxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHZhciBkYXRhID0gX3Byb3BzLmRhdGE7XG4gICAgICAgIHZhciB4U2NhbGUgPSBfcHJvcHMueFNjYWxlO1xuICAgICAgICB2YXIgeVNjYWxlID0gX3Byb3BzLnlTY2FsZTtcbiAgICAgICAgdmFyIGNvbG9yU2NhbGUgPSBfcHJvcHMuY29sb3JTY2FsZTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IF9wcm9wcy52YWx1ZXM7XG4gICAgICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICAgICAgdmFyIHggPSBfcHJvcHMueDtcbiAgICAgICAgdmFyIHkgPSBfcHJvcHMueTtcbiAgICAgICAgdmFyIHkwID0gX3Byb3BzLnkwO1xuICAgICAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICAgICAgdmFyIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmU7XG4gICAgICAgIHZhciBncm91cGVkQmFycyA9IF9wcm9wcy5ncm91cGVkQmFycztcbiAgICAgICAgdmFyIGNvbG9yQnlMYWJlbCA9IF9wcm9wcy5jb2xvckJ5TGFiZWw7XG5cblxuICAgICAgICB2YXIgYmFycyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGdyb3VwZWRCYXJzKSB7XG4gICAgICAgICAgICBiYXJzID0gZGF0YS5tYXAoZnVuY3Rpb24gKHN0YWNrLCBzZXJpZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcyhzdGFjaykubWFwKGZ1bmN0aW9uIChlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeVZhbCA9IHkoZSkgPCAwID8geVNjYWxlKDApIDogeVNjYWxlKHkoZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0JhcjIuZGVmYXVsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBsYWJlbChzdGFjaykgKyAnLicgKyBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB4U2NhbGUucmFuZ2VCYW5kKCkgLyBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5hYnMoeVNjYWxlKDApIC0geVNjYWxlKHkoZSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHhTY2FsZSh4KGUpKSArIHhTY2FsZS5yYW5nZUJhbmQoKSAqIHNlcmllSW5kZXggLyBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHlWYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBjb2xvclNjYWxlKGxhYmVsKHN0YWNrKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFycyA9IGRhdGEubWFwKGZ1bmN0aW9uIChzdGFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMoc3RhY2spLm1hcChmdW5jdGlvbiAoZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gY29sb3JCeUxhYmVsID8gY29sb3JTY2FsZShsYWJlbChzdGFjaykpIDogY29sb3JTY2FsZSh4KGUpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHlWYWwgPSB5KGUpIDwgMCA/IHlTY2FsZSh5MChlKSkgOiB5U2NhbGUoeTAoZSkgKyB5KGUpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CYXIyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogbGFiZWwoc3RhY2spICsgJy4nICsgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogeFNjYWxlLnJhbmdlQmFuZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyh5U2NhbGUoeTAoZSkgKyB5KGUpKSAtIHlTY2FsZSh5MChlKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogeFNjYWxlKHgoZSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeVZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiBvbk1vdXNlTGVhdmVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdnJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBiYXJzXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbnZhciBCYXJDaGFydCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdCYXJDaGFydCcsXG5cbiAgICBtaXhpbnM6IFtfRGVmYXVsdFByb3BzTWl4aW4yLmRlZmF1bHQsIF9IZWlnaHRXaWR0aE1peGluMi5kZWZhdWx0LCBfQXJyYXlpZnlNaXhpbjIuZGVmYXVsdCwgX1N0YWNrQWNjZXNzb3JNaXhpbjIuZGVmYXVsdCwgX1N0YWNrRGF0YU1peGluMi5kZWZhdWx0LCBfRGVmYXVsdFNjYWxlc01peGluMi5kZWZhdWx0LCBfVG9vbHRpcE1peGluMi5kZWZhdWx0XSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sb3JCeUxhYmVsOiB0cnVlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBfdG9vbHRpcEh0bWw6IGZ1bmN0aW9uIF90b29sdGlwSHRtbChkKSB7XG4gICAgICAgIHZhciB4U2NhbGUgPSB0aGlzLl94U2NhbGU7XG4gICAgICAgIHZhciB5U2NhbGUgPSB0aGlzLl95U2NhbGU7XG5cbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLnByb3BzLnRvb2x0aXBIdG1sKHRoaXMucHJvcHMueChkKSwgdGhpcy5wcm9wcy55MChkKSwgdGhpcy5wcm9wcy55KGQpKTtcblxuICAgICAgICB2YXIgbWlkUG9pbnQgPSB4U2NhbGUucmFuZ2VCYW5kKCkgLyAyO1xuICAgICAgICB2YXIgeFBvcyA9IG1pZFBvaW50ICsgeFNjYWxlKHRoaXMucHJvcHMueChkKSk7XG5cbiAgICAgICAgdmFyIHRvcFN0YWNrID0gdGhpcy5fZGF0YVt0aGlzLl9kYXRhLmxlbmd0aCAtIDFdLnZhbHVlcztcbiAgICAgICAgdmFyIHRvcEVsZW1lbnQgPSBudWxsO1xuXG4gICAgICAgIC8vIFRPRE86IHRoaXMgbWlnaHQgbm90IHNjYWxlIGlmIGRhdGFzZXQgaXMgaHVnZS5cbiAgICAgICAgLy8gY29uc2lkZXIgcHJlLWNvbXB1dGluZyB5UG9zIGZvciBlYWNoIFhcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3BTdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMueCh0b3BTdGFja1tpXSkgPT09IHRoaXMucHJvcHMueChkKSkge1xuICAgICAgICAgICAgICAgIHRvcEVsZW1lbnQgPSB0b3BTdGFja1tpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgeVBvcyA9IHlTY2FsZSh0aGlzLnByb3BzLnkwKHRvcEVsZW1lbnQpICsgdGhpcy5wcm9wcy55KHRvcEVsZW1lbnQpKTtcblxuICAgICAgICByZXR1cm4gW2h0bWwsIHhQb3MsIHlQb3NdO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIHhBeGlzID0gX3Byb3BzMi54QXhpcztcbiAgICAgICAgdmFyIHlBeGlzID0gX3Byb3BzMi55QXhpcztcbiAgICAgICAgdmFyIGhlaWdodCA9IF9wcm9wczIuaGVpZ2h0O1xuICAgICAgICB2YXIgd2lkdGggPSBfcHJvcHMyLndpZHRoO1xuICAgICAgICB2YXIgbWFyZ2luID0gX3Byb3BzMi5tYXJnaW47XG4gICAgICAgIHZhciBjb2xvclNjYWxlID0gX3Byb3BzMi5jb2xvclNjYWxlO1xuICAgICAgICB2YXIgdmFsdWVzID0gX3Byb3BzMi52YWx1ZXM7XG4gICAgICAgIHZhciBsYWJlbCA9IF9wcm9wczIubGFiZWw7XG4gICAgICAgIHZhciB5ID0gX3Byb3BzMi55O1xuICAgICAgICB2YXIgeTAgPSBfcHJvcHMyLnkwO1xuICAgICAgICB2YXIgeCA9IF9wcm9wczIueDtcbiAgICAgICAgdmFyIGdyb3VwZWRCYXJzID0gX3Byb3BzMi5ncm91cGVkQmFycztcbiAgICAgICAgdmFyIGNvbG9yQnlMYWJlbCA9IF9wcm9wczIuY29sb3JCeUxhYmVsO1xuICAgICAgICB2YXIgdGlja0Zvcm1hdCA9IF9wcm9wczIudGlja0Zvcm1hdDtcblxuXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIGlubmVyV2lkdGggPSB0aGlzLl9pbm5lcldpZHRoO1xuICAgICAgICB2YXIgaW5uZXJIZWlnaHQgPSB0aGlzLl9pbm5lckhlaWdodDtcbiAgICAgICAgdmFyIHhTY2FsZSA9IHRoaXMuX3hTY2FsZTtcbiAgICAgICAgdmFyIHlTY2FsZSA9IHRoaXMuX3lTY2FsZTtcbiAgICAgICAgdmFyIHlJbnRlcmNlcHQgPSB0aGlzLl95SW50ZXJjZXB0O1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIF9DaGFydDIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICB7IGhlaWdodDogaGVpZ2h0LCB3aWR0aDogd2lkdGgsIG1hcmdpbjogbWFyZ2luIH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGF0YVNldCwge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICB4U2NhbGU6IHhTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgeVNjYWxlOiB5U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yU2NhbGU6IGNvbG9yU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIHk6IHksXG4gICAgICAgICAgICAgICAgICAgIHkwOiB5MCxcbiAgICAgICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZEJhcnM6IGdyb3VwZWRCYXJzLFxuICAgICAgICAgICAgICAgICAgICBjb2xvckJ5TGFiZWw6IGNvbG9yQnlMYWJlbFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9BeGlzMi5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ggYXhpcycsXG4gICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IHhTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBpbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGlubmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHplcm86IHlJbnRlcmNlcHQsXG4gICAgICAgICAgICAgICAgICAgIHRpY2tGb3JtYXQ6IHRpY2tGb3JtYXRcbiAgICAgICAgICAgICAgICB9LCB4QXhpcykpLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9BeGlzMi5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3kgYXhpcycsXG4gICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiB5U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0aWNrRm9ybWF0OiB0aWNrRm9ybWF0XG4gICAgICAgICAgICAgICAgfSwgeUF4aXMpKSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Rvb2x0aXAyLmRlZmF1bHQsIHRoaXMuc3RhdGUudG9vbHRpcClcbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmFyQ2hhcnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kMy1jb21wb25lbnRzL2xpYi9CYXJDaGFydC5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }return target;\n};\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(38);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Axis = __webpack_require__(19);\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// Adapted for React from https://github.com/mbostock/d3/blob/master/src/svg/brush.js\n// TODO: Add D3 License\nvar _d3SvgBrushCursor = {\n    n: 'ns-resize',\n    e: 'ew-resize',\n    s: 'ns-resize',\n    w: 'ew-resize',\n    nw: 'nwse-resize',\n    ne: 'nesw-resize',\n    se: 'nwse-resize',\n    sw: 'nesw-resize'\n};\n\nvar _d3SvgBrushResizes = [['n', 'e', 's', 'w', 'nw', 'ne', 'se', 'sw'], ['e', 'w'], ['n', 's'], []];\n\n// TODO: add y axis support\nvar Brush = _react2.default.createClass({\n    displayName: 'Brush',\n\n    mixins: [_HeightWidthMixin2.default],\n\n    getInitialState: function getInitialState() {\n        return {\n            resizers: _d3SvgBrushResizes[0],\n            xExtent: [0, 0],\n            yExtent: [0, 0],\n            xExtentDomain: undefined,\n            yExtentDomain: undefined\n        };\n    },\n    getDefaultProps: function getDefaultProps() {\n        return {\n            xScale: null,\n            yScale: null\n        };\n    },\n    componentWillMount: function componentWillMount() {\n        this._extent(this.props.extent);\n\n        this.setState({\n            resizers: _d3SvgBrushResizes[!this.props.xScale << 1 | !this.props.yScale]\n        });\n    },\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n        // when <Brush/> is used inside a component\n        // we should not set the extent prop on every redraw of the parent, because it will\n        // stop us from actually setting the extent with the brush.\n        if (nextProps.xScale !== this.props.xScale) {\n            this._extent(nextProps.extent, nextProps.xScale);\n            this.setState({\n                resizers: _d3SvgBrushResizes[!this.props.xScale << 1 | !this.props.yScale]\n            });\n        }\n    },\n    render: function render() {\n        var _this = this;\n\n        // TODO: remove this.state this.props\n        var xRange = this.props.xScale ? this._d3ScaleRange(this.props.xScale) : null;\n        var yRange = this.props.yScale ? this._d3ScaleRange(this.props.yScale) : null;\n\n        var background = _react2.default.createElement('rect', {\n            className: 'background',\n            style: { visibility: 'visible', cursor: 'crosshair' },\n            x: xRange ? xRange[0] : '',\n            width: xRange ? xRange[1] - xRange[0] : '',\n            y: yRange ? yRange[0] : '',\n            height: yRange ? yRange[1] - yRange[0] : this._innerHeight,\n            onMouseDown: this._onMouseDownBackground\n        });\n\n        // TODO: it seems like actually we can have both x and y scales at the same time. need to find example.\n\n        var extent = void 0;\n        if (this.props.xScale) {\n            extent = _react2.default.createElement('rect', {\n                className: 'extent',\n                style: { cursor: 'move' },\n                x: this.state.xExtent[0],\n                width: this.state.xExtent[1] - this.state.xExtent[0],\n                height: this._innerHeight,\n                onMouseDown: this._onMouseDownExtent\n            });\n        }\n\n        var resizers = this.state.resizers.map(function (e) {\n            return _react2.default.createElement('g', {\n                key: e,\n                className: 'resize ' + e,\n                style: { cursor: _d3SvgBrushCursor[e] },\n                transform: 'translate(' + _this.state.xExtent[+/e$/.test(e)] + ', ' + _this.state.yExtent[+/^s/.test(e)] + ')',\n                onMouseDown: function onMouseDown(event) {\n                    _this._onMouseDownResizer(event, e);\n                }\n            }, _react2.default.createElement('rect', {\n                x: /[ew]$/.test(e) ? -3 : null,\n                y: /^[ns]/.test(e) ? -3 : null,\n                width: '6',\n                height: _this._innerHeight,\n                style: { visibility: 'hidden', display: _this._empty() ? 'none' : null }\n            }));\n        });\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: this.props.height, width: this.props.width, margin: this.props.margin }, _react2.default.createElement('g', {\n            style: { pointerEvents: 'all' },\n            onMouseUp: this._onMouseUp,\n            onMouseMove: this._onMouseMove\n        }, background, extent, resizers), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'x axis',\n            orientation: 'bottom',\n            scale: this.props.xScale,\n            height: this._innerHeight,\n            width: this._innerWidth\n        }, this.props.xAxis)), this.props.children));\n    },\n\n    // TODO: Code duplicated in TooltipMixin.jsx, move outside.\n    _getMousePosition: function _getMousePosition(e) {\n        var svg = _reactDom2.default.findDOMNode(this).getElementsByTagName('svg')[0];\n        var position = void 0;\n        if (svg.createSVGPoint) {\n            var point = svg.createSVGPoint();\n            point.x = e.clientX;\n            point.y = e.clientY;\n            point = point.matrixTransform(svg.getScreenCTM().inverse());\n            position = [point.x - this.props.margin.left, point.y - this.props.margin.top];\n        } else {\n            var rect = svg.getBoundingClientRect();\n            position = [e.clientX - rect.left - svg.clientLeft - this.props.margin.left, e.clientY - rect.top - svg.clientTop - this.props.margin.left];\n        }\n\n        return position;\n    },\n    _onMouseDownBackground: function _onMouseDownBackground(e) {\n        e.preventDefault();\n        var range = this._d3ScaleRange(this.props.xScale);\n        var point = this._getMousePosition(e);\n\n        var size = this.state.xExtent[1] - this.state.xExtent[0];\n\n        range[1] -= size;\n\n        var min = Math.max(range[0], Math.min(range[1], point[0]));\n        this.setState({ xExtent: [min, min + size] });\n    },\n\n    // TODO: use constants instead of strings\n    _onMouseDownExtent: function _onMouseDownExtent(e) {\n        e.preventDefault();\n        this._mouseMode = 'drag';\n\n        var point = this._getMousePosition(e);\n        var distanceFromBorder = point[0] - this.state.xExtent[0];\n\n        this._startPosition = distanceFromBorder;\n    },\n    _onMouseDownResizer: function _onMouseDownResizer(e, dir) {\n        e.preventDefault();\n        this._mouseMode = 'resize';\n        this._resizeDir = dir;\n    },\n    _onDrag: function _onDrag(e) {\n        var range = this._d3ScaleRange(this.props.xScale);\n        var point = this._getMousePosition(e);\n\n        var size = this.state.xExtent[1] - this.state.xExtent[0];\n\n        range[1] -= size;\n\n        var min = Math.max(range[0], Math.min(range[1], point[0] - this._startPosition));\n\n        this.setState({ xExtent: [min, min + size], xExtentDomain: null });\n    },\n    _onResize: function _onResize(e) {\n        var range = this._d3ScaleRange(this.props.xScale);\n        var point = this._getMousePosition(e);\n        // Don't let the extent go outside of its limits\n        // TODO: support clamp argument of D3\n        var min = Math.max(range[0], Math.min(range[1], point[0]));\n\n        if (this._resizeDir == 'w') {\n            if (min > this.state.xExtent[1]) {\n                this.setState({ xExtent: [this.state.xExtent[1], min], xExtentDomain: null });\n                this._resizeDir = 'e';\n            } else {\n                this.setState({ xExtent: [min, this.state.xExtent[1]], xExtentDomain: null });\n            }\n        } else if (this._resizeDir == 'e') {\n            if (min < this.state.xExtent[0]) {\n                this.setState({ xExtent: [min, this.state.xExtent[0]], xExtentDomain: null });\n                this._resizeDir = 'w';\n            } else {\n                this.setState({ xExtent: [this.state.xExtent[0], min], xExtentDomain: null });\n            }\n        }\n    },\n    _onMouseMove: function _onMouseMove(e) {\n        e.preventDefault();\n\n        if (this._mouseMode == 'resize') {\n            this._onResize(e);\n        } else if (this._mouseMode == 'drag') {\n            this._onDrag(e);\n        }\n    },\n    _onMouseUp: function _onMouseUp(e) {\n        e.preventDefault();\n\n        this._mouseMode = null;\n\n        this.props.onChange(this._extent());\n    },\n    _extent: function _extent(z, xScale) {\n        var x = xScale || this.props.xScale;\n        var y = this.props.yScale;\n\n        var _state = this.state;\n        var xExtent = _state.xExtent;\n        var yExtent = _state.yExtent;\n        var xExtentDomain = _state.xExtentDomain;\n        var yExtentDomain = _state.yExtentDomain;\n\n        var x0 = void 0,\n            x1 = void 0,\n            y0 = void 0,\n            y1 = void 0,\n            t = void 0;\n\n        // Invert the pixel extent to data-space.\n        if (!arguments.length) {\n            if (x) {\n                if (xExtentDomain) {\n                    x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n                } else {\n                    x0 = xExtent[0], x1 = xExtent[1];\n                    if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n                    if (x1 < x0) t = x0, x0 = x1, x1 = t;\n                }\n            }\n            if (y) {\n                if (yExtentDomain) {\n                    y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n                } else {\n                    y0 = yExtent[0], y1 = yExtent[1];\n                    if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n                    if (y1 < y0) t = y0, y0 = y1, y1 = t;\n                }\n            }\n            return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1];\n        }\n\n        // Scale the data-space extent to pixels.\n        if (x) {\n            x0 = z[0], x1 = z[1];\n            if (y) x0 = x0[0], x1 = x1[0];\n            xExtentDomain = [x0, x1];\n            if (x.invert) x0 = x(x0), x1 = x(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n            if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1]; // copy-on-write\n        }\n        if (y) {\n            y0 = z[0], y1 = z[1];\n            if (x) y0 = y0[1], y1 = y1[1];\n            yExtentDomain = [y0, y1];\n            if (y.invert) y0 = y(y0), y1 = y(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n            if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1]; // copy-on-write\n        }\n\n        this.setState({ xExtent: xExtent, yExtent: yExtent, xExtentDomain: xExtentDomain, yExtentDomain: yExtentDomain });\n    },\n    _empty: function _empty() {\n        return !!this.props.xScale && this.state.xExtent[0] == this.state.xExtent[1] || !!this.props.yScale && this.state.yExtent[0] == this.state.yExtent[1];\n    },\n\n    // TODO: Code duplicated in Axis.jsx, move outside.\n    _d3ScaleExtent: function _d3ScaleExtent(domain) {\n        var start = domain[0];\n        var stop = domain[domain.length - 1];\n        return start < stop ? [start, stop] : [stop, start];\n    },\n    _d3ScaleRange: function _d3ScaleRange(scale) {\n        return scale.rangeExtent ? scale.rangeExtent() : this._d3ScaleExtent(scale.range());\n    }\n});\n\nexports.default = Brush;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }return target;\n};\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Axis = __webpack_require__(19);\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _Path = __webpack_require__(41);\n\nvar _Path2 = _interopRequireDefault(_Path);\n\nvar _Tooltip = __webpack_require__(21);\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = __webpack_require__(18);\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _AccessorMixin = __webpack_require__(27);\n\nvar _AccessorMixin2 = _interopRequireDefault(_AccessorMixin);\n\nvar _DefaultScalesMixin = __webpack_require__(20);\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\nvar string = _react.PropTypes.string;\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        data: array.isRequired,\n        line: func.isRequired,\n        colorScale: func.isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var width = _props.width;\n        var height = _props.height;\n        var data = _props.data;\n        var line = _props.line;\n        var strokeWidth = _props.strokeWidth;\n        var strokeLinecap = _props.strokeLinecap;\n        var strokeDasharray = _props.strokeDasharray;\n        var colorScale = _props.colorScale;\n        var values = _props.values;\n        var label = _props.label;\n        var onMouseEnter = _props.onMouseEnter;\n        var _onMouseLeave = _props.onMouseLeave;\n\n        var sizeId = width + 'x' + height;\n\n        var lines = data.map(function (stack, index) {\n            return _react2.default.createElement(_Path2.default, {\n                key: label(stack) + '.' + index,\n                className: 'line',\n                d: line(values(stack)),\n                stroke: colorScale(label(stack)),\n                strokeWidth: typeof strokeWidth === 'function' ? strokeWidth(label(stack)) : strokeWidth,\n                strokeLinecap: typeof strokeLinecap === 'function' ? strokeLinecap(label(stack)) : strokeLinecap,\n                strokeDasharray: typeof strokeDasharray === 'function' ? strokeDasharray(label(stack)) : strokeDasharray,\n                data: values(stack),\n                onMouseEnter: onMouseEnter,\n                onMouseLeave: _onMouseLeave,\n                style: { clipPath: 'url(#lineClip_' + sizeId + ')' }\n            });\n        });\n\n        /*\n         The <rect> below is needed in case we want to show the tooltip no matter where on the chart the mouse is.\n         Not sure if this should be used.\n         */\n        return _react2.default.createElement('g', null, _react2.default.createElement('defs', null, _react2.default.createElement('clipPath', { id: 'lineClip_' + sizeId }, _react2.default.createElement('rect', { width: width, height: height }))), lines, _react2.default.createElement('rect', {\n            width: width,\n            height: height,\n            fill: 'none',\n            stroke: 'none',\n            style: { pointerEvents: 'all' },\n            onMouseMove: function onMouseMove(evt) {\n                onMouseEnter(evt, data);\n            },\n            onMouseLeave: function onMouseLeave(evt) {\n                _onMouseLeave(evt);\n            }\n        }));\n    }\n});\n\nvar LineChart = _react2.default.createClass({\n    displayName: 'LineChart',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _AccessorMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n\n    propTypes: {\n        interpolate: string,\n        defined: func\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            interpolate: 'linear',\n            defined: function defined() {\n                return true;\n            },\n            shape: 'circle',\n            shapeColor: null\n        };\n    },\n\n    /*\n     The code below supports finding the data values for the line closest to the mouse cursor.\n     Since it gets all events from the Rect overlaying the Chart the tooltip gets shown everywhere.\n     For now I don't want to use this method.\n     */\n    _tooltipHtml: function _tooltipHtml(data, position) {\n        var _props2 = this.props;\n        var x = _props2.x;\n        var y = _props2.y;\n        var values = _props2.values;\n        var label = _props2.label;\n\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var xValueCursor = xScale.invert(position[0]);\n        var yValueCursor = yScale.invert(position[1]);\n\n        var xBisector = _d2.default.bisector(function (e) {\n            return x(e);\n        }).left;\n        var valuesAtX = data.map(function (stack) {\n            var idx = xBisector(values(stack), xValueCursor);\n\n            var indexRight = idx === values(stack).length ? idx - 1 : idx;\n            var valueRight = x(values(stack)[indexRight]);\n\n            var indexLeft = idx === 0 ? idx : idx - 1;\n            var valueLeft = x(values(stack)[indexLeft]);\n\n            var index = void 0;\n            if (Math.abs(xValueCursor - valueRight) < Math.abs(xValueCursor - valueLeft)) {\n                index = indexRight;\n            } else {\n                index = indexLeft;\n            }\n\n            return { label: label(stack), value: values(stack)[index] };\n        });\n\n        valuesAtX.sort(function (a, b) {\n            return y(a.value) - y(b.value);\n        });\n\n        var yBisector = _d2.default.bisector(function (e) {\n            return y(e.value);\n        }).left;\n        var yIndex = yBisector(valuesAtX, yValueCursor);\n\n        var yIndexRight = yIndex === valuesAtX.length ? yIndex - 1 : yIndex;\n        var yIndexLeft = yIndex === 0 ? yIndex : yIndex - 1;\n\n        var yValueRight = y(valuesAtX[yIndexRight].value);\n        var yValueLeft = y(valuesAtX[yIndexLeft].value);\n\n        var index = void 0;\n        if (Math.abs(yValueCursor - yValueRight) < Math.abs(yValueCursor - yValueLeft)) {\n            index = yIndexRight;\n        } else {\n            index = yIndexLeft;\n        }\n\n        this._tooltipData = valuesAtX[index];\n\n        var html = this.props.tooltipHtml(valuesAtX[index].label, valuesAtX[index].value);\n\n        var xPos = xScale(valuesAtX[index].value.x);\n        var yPos = yScale(valuesAtX[index].value.y);\n\n        return [html, xPos, yPos];\n    },\n\n    /*\n    _tooltipHtml(data, position) {\n        let {x, y0, y, values, label} = this.props;\n        let [xScale, yScale] = [this._xScale, this._yScale];\n         let xValueCursor = xScale.invert(position[0]);\n        let yValueCursor = yScale.invert(position[1]);\n         let xBisector = d3.bisector(e => { return x(e); }).left;\n        let xIndex = xBisector(data, xScale.invert(position[0]));\n         let indexRight = xIndex == data.length ? xIndex - 1 : xIndex;\n        let valueRight = x(data[indexRight]);\n         let indexLeft = xIndex == 0 ? xIndex : xIndex - 1;\n        let valueLeft = x(data[indexLeft]);\n         let index;\n        if (Math.abs(xValueCursor - valueRight) < Math.abs(xValueCursor - valueLeft)) {\n            index = indexRight;\n        } else {\n            index = indexLeft;\n        }\n         let yValue = y(data[index]);\n        let cursorValue = d3.round(yScale.invert(position[1]), 2);\n         return this.props.tooltipHtml(yValue, cursorValue);\n    },\n     */\n\n    /*\n             stroke,\n             strokeWidth,\n             strokeLinecap,\n             strokeDasharray,\n     */\n    render: function render() {\n        var _this = this;\n\n        var _props3 = this.props;\n        var height = _props3.height;\n        var width = _props3.width;\n        var margin = _props3.margin;\n        var colorScale = _props3.colorScale;\n        var interpolate = _props3.interpolate;\n        var defined = _props3.defined;\n        var stroke = _props3.stroke;\n        var values = _props3.values;\n        var label = _props3.label;\n        var x = _props3.x;\n        var y = _props3.y;\n        var xAxis = _props3.xAxis;\n        var yAxis = _props3.yAxis;\n        var shape = _props3.shape;\n        var shapeColor = _props3.shapeColor;\n\n        var data = this._data;\n        var innerWidth = this._innerWidth;\n        var innerHeight = this._innerHeight;\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n        var xIntercept = this._xIntercept;\n        var yIntercept = this._yIntercept;\n\n        var line = _d2.default.svg.line().x(function (e) {\n            return xScale(x(e));\n        }).y(function (e) {\n            return yScale(y(e));\n        }).interpolate(interpolate).defined(defined);\n\n        var tooltipSymbol = null;\n        if (!this.state.tooltip.hidden) {\n            var symbol = _d2.default.svg.symbol().type(shape);\n            var symbolColor = shapeColor ? shapeColor : colorScale(this._tooltipData.label);\n\n            var translate = this._tooltipData ? 'translate(' + xScale(x(this._tooltipData.value)) + ', ' + yScale(y(this._tooltipData.value)) + ')' : '';\n            tooltipSymbol = this.state.tooltip.hidden ? null : _react2.default.createElement('path', {\n                className: 'dot',\n                d: symbol(),\n                transform: translate,\n                fill: symbolColor,\n                onMouseEnter: function onMouseEnter(evt) {\n                    return _this.onMouseEnter(evt, data);\n                },\n                onMouseLeave: function onMouseLeave(evt) {\n                    return _this.onMouseLeave(evt);\n                }\n            });\n        }\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: height, width: width, margin: margin }, _react2.default.createElement(_Axis2.default, _extends({\n            className: 'x axis',\n            orientation: 'bottom',\n            scale: xScale,\n            height: innerHeight,\n            width: innerWidth,\n            zero: yIntercept\n        }, xAxis)), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'y axis',\n            orientation: 'left',\n            scale: yScale,\n            height: innerHeight,\n            width: innerWidth,\n            zero: xIntercept\n        }, yAxis)), _react2.default.createElement(DataSet, _extends({\n            height: innerHeight,\n            width: innerWidth,\n            data: data,\n            line: line,\n            colorScale: colorScale,\n            values: values,\n            label: label,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave\n        }, stroke)), this.props.children, tooltipSymbol), _react2.default.createElement(_Tooltip2.default, this.state.tooltip));\n    }\n});\n\nexports.default = LineChart;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Tooltip = __webpack_require__(21);\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _AccessorMixin = __webpack_require__(27);\n\nvar _AccessorMixin2 = _interopRequireDefault(_AccessorMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar string = _react.PropTypes.string;\nvar array = _react.PropTypes.array;\nvar number = _react.PropTypes.number;\nvar bool = _react.PropTypes.bool;\nvar func = _react.PropTypes.func;\nvar any = _react.PropTypes.any;\n\nvar Wedge = _react2.default.createClass({\n    displayName: 'Wedge',\n\n    propTypes: {\n        d: string.isRequired,\n        fill: string.isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var fill = _props.fill;\n        var d = _props.d;\n        var data = _props.data;\n        var onMouseEnter = _props.onMouseEnter;\n        var _onMouseLeave = _props.onMouseLeave;\n\n        return _react2.default.createElement('path', {\n            fill: fill,\n            d: d,\n            onMouseMove: function onMouseMove(evt) {\n                return onMouseEnter(evt, data);\n            },\n            onMouseLeave: function onMouseLeave(evt) {\n                return _onMouseLeave(evt);\n            }\n        });\n    }\n});\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        pie: array.isRequired,\n        arc: func.isRequired,\n        outerArc: func.isRequired,\n        colorScale: func.isRequired,\n        radius: number.isRequired,\n        strokeWidth: number,\n        stroke: string,\n        fill: string,\n        opacity: number,\n        x: func.isRequired,\n        hideLabels: bool\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            strokeWidth: 2,\n            stroke: '#000',\n            fill: 'none',\n            opacity: 0.3,\n            hideLabels: false\n        };\n    },\n    renderLabel: function renderLabel(wedge) {\n        var _props2 = this.props;\n        var arc = _props2.arc;\n        var outerArc = _props2.outerArc;\n        var radius = _props2.radius;\n        var strokeWidth = _props2.strokeWidth;\n        var stroke = _props2.stroke;\n        var fill = _props2.fill;\n        var opacity = _props2.opacity;\n        var x = _props2.x;\n\n        var labelPos = outerArc.centroid(wedge);\n        labelPos[0] = radius * (this.midAngle(wedge) < Math.PI ? 1 : -1);\n\n        var linePos = outerArc.centroid(wedge);\n        linePos[0] = radius * 0.95 * (this.midAngle(wedge) < Math.PI ? 1 : -1);\n\n        var textAnchor = this.midAngle(wedge) < Math.PI ? 'start' : 'end';\n\n        return _react2.default.createElement('g', null, _react2.default.createElement('polyline', {\n            opacity: opacity,\n            strokeWidth: strokeWidth,\n            stroke: stroke,\n            fill: fill,\n            points: [arc.centroid(wedge), outerArc.centroid(wedge), linePos]\n        }), _react2.default.createElement('text', {\n            dy: '.35em',\n            x: labelPos[0],\n            y: labelPos[1],\n            textAnchor: textAnchor }, x(wedge.data)));\n    },\n    render: function render() {\n        var _this = this;\n\n        var _props3 = this.props;\n        var pie = _props3.pie;\n        var arc = _props3.arc;\n        var colorScale = _props3.colorScale;\n        var x = _props3.x;\n        var y = _props3.y;\n        var onMouseEnter = _props3.onMouseEnter;\n        var onMouseLeave = _props3.onMouseLeave;\n        var hideLabels = _props3.hideLabels;\n\n        var wedges = pie.map(function (e, index) {\n            var labelFits = e.endAngle - e.startAngle >= 10 * Math.PI / 180;\n\n            return _react2.default.createElement('g', { key: x(e.data) + '.' + y(e.data) + '.' + index, className: 'arc' }, _react2.default.createElement(Wedge, {\n                data: e.data,\n                fill: colorScale(x(e.data)),\n                d: arc(e),\n                onMouseEnter: onMouseEnter,\n                onMouseLeave: onMouseLeave\n            }), !hideLabels && !!e.value && labelFits && _this.renderLabel(e));\n        });\n\n        return _react2.default.createElement('g', null, wedges);\n    },\n    midAngle: function midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n});\n\nvar PieChart = _react2.default.createClass({\n    displayName: 'PieChart',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _AccessorMixin2.default, _TooltipMixin2.default],\n\n    propTypes: {\n        innerRadius: number,\n        outerRadius: number,\n        labelRadius: number,\n        padRadius: string,\n        cornerRadius: number,\n        sort: any,\n        hideLabels: bool\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            innerRadius: null,\n            outerRadius: null,\n            labelRadius: null,\n            padRadius: 'auto',\n            cornerRadius: 0,\n            sort: undefined,\n            hideLabels: false\n        };\n    },\n    _tooltipHtml: function _tooltipHtml(d) {\n        var html = this.props.tooltipHtml(this.props.x(d), this.props.y(d));\n\n        return [html, 0, 0];\n    },\n    render: function render() {\n        var _props4 = this.props;\n        var data = _props4.data;\n        var width = _props4.width;\n        var height = _props4.height;\n        var margin = _props4.margin;\n        var colorScale = _props4.colorScale;\n        var padRadius = _props4.padRadius;\n        var cornerRadius = _props4.cornerRadius;\n        var sort = _props4.sort;\n        var x = _props4.x;\n        var y = _props4.y;\n        var values = _props4.values;\n        var hideLabels = _props4.hideLabels;\n        var _props5 = this.props;\n        var innerRadius = _props5.innerRadius;\n        var outerRadius = _props5.outerRadius;\n        var labelRadius = _props5.labelRadius;\n\n        var innerWidth = this._innerWidth;\n        var innerHeight = this._innerHeight;\n\n        var pie = _d2.default.layout.pie().value(function (e) {\n            return y(e);\n        });\n\n        if (typeof sort !== 'undefined') {\n            pie = pie.sort(sort);\n        }\n\n        var radius = Math.min(innerWidth, innerHeight) / 2;\n        if (!innerRadius) {\n            innerRadius = radius * 0.8;\n        }\n\n        if (!outerRadius) {\n            outerRadius = radius * 0.4;\n        }\n\n        if (!labelRadius) {\n            labelRadius = radius * 0.9;\n        }\n\n        var arc = _d2.default.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius).padRadius(padRadius).cornerRadius(cornerRadius);\n\n        var outerArc = _d2.default.svg.arc().innerRadius(labelRadius).outerRadius(labelRadius);\n\n        var pieData = pie(values(data));\n\n        var translation = 'translate(' + innerWidth / 2 + ', ' + innerHeight / 2 + ')';\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: height, width: width, margin: margin }, _react2.default.createElement('g', { transform: translation }, _react2.default.createElement(DataSet, {\n            width: innerWidth,\n            height: innerHeight,\n            colorScale: colorScale,\n            pie: pieData,\n            arc: arc,\n            outerArc: outerArc,\n            radius: radius,\n            x: x,\n            y: y,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave,\n            hideLabels: hideLabels\n        })), this.props.children), _react2.default.createElement(_Tooltip2.default, this.state.tooltip));\n    }\n});\n\nexports.default = PieChart;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }return target;\n};\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d = __webpack_require__(5);\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Axis = __webpack_require__(19);\n\nvar _Axis2 = _interopRequireDefault(_Axis);\n\nvar _Tooltip = __webpack_require__(21);\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = __webpack_require__(18);\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _AccessorMixin = __webpack_require__(27);\n\nvar _AccessorMixin2 = _interopRequireDefault(_AccessorMixin);\n\nvar _DefaultScalesMixin = __webpack_require__(20);\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\nvar string = _react.PropTypes.string;\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        data: array.isRequired,\n        symbol: func.isRequired,\n        xScale: func.isRequired,\n        yScale: func.isRequired,\n        colorScale: func.isRequired,\n        onMouseEnter: func,\n        onMouseLeave: func\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var data = _props.data;\n        var symbol = _props.symbol;\n        var xScale = _props.xScale;\n        var yScale = _props.yScale;\n        var colorScale = _props.colorScale;\n        var label = _props.label;\n        var values = _props.values;\n        var x = _props.x;\n        var y = _props.y;\n        var onMouseEnter = _props.onMouseEnter;\n        var _onMouseLeave = _props.onMouseLeave;\n\n        var circles = data.map(function (stack) {\n            return values(stack).map(function (e, index) {\n                var translate = 'translate(' + xScale(x(e)) + ', ' + yScale(y(e)) + ')';\n                return _react2.default.createElement('path', {\n                    key: label(stack) + '.' + index,\n                    className: 'dot',\n                    d: symbol(),\n                    transform: translate,\n                    fill: colorScale(label(stack)),\n                    onMouseOver: function onMouseOver(evt) {\n                        return onMouseEnter(evt, e);\n                    },\n                    onMouseLeave: function onMouseLeave(evt) {\n                        return _onMouseLeave(evt);\n                    }\n                });\n            });\n        });\n\n        return _react2.default.createElement('g', null, circles);\n    }\n});\n\nvar ScatterPlot = _react2.default.createClass({\n    displayName: 'ScatterPlot',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _AccessorMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n\n    propTypes: {\n        rScale: func,\n        shape: string\n    },\n\n    getDefaultProps: function getDefaultProps() {\n        return {\n            rScale: null,\n            shape: 'circle'\n        };\n    },\n    _tooltipHtml: function _tooltipHtml(d) {\n        var html = this.props.tooltipHtml(this.props.x(d), this.props.y(d));\n\n        var xPos = this._xScale(this.props.x(d));\n        var yPos = this._yScale(this.props.y(d));\n\n        return [html, xPos, yPos];\n    },\n    render: function render() {\n        var _props2 = this.props;\n        var height = _props2.height;\n        var width = _props2.width;\n        var margin = _props2.margin;\n        var colorScale = _props2.colorScale;\n        var rScale = _props2.rScale;\n        var shape = _props2.shape;\n        var label = _props2.label;\n        var values = _props2.values;\n        var x = _props2.x;\n        var y = _props2.y;\n        var xAxis = _props2.xAxis;\n        var yAxis = _props2.yAxis;\n\n        var data = this._data;\n        var innerWidth = this._innerWidth;\n        var innerHeight = this._innerHeight;\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n        var xIntercept = this._xIntercept;\n        var yIntercept = this._yIntercept;\n\n        var symbol = _d2.default.svg.symbol().type(shape);\n\n        if (rScale) {\n            symbol = symbol.size(rScale);\n        }\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, { height: height, width: width, margin: margin }, _react2.default.createElement(_Axis2.default, _extends({\n            className: 'x axis',\n            orientation: 'bottom',\n            scale: xScale,\n            height: innerHeight,\n            width: innerWidth,\n            zero: yIntercept\n        }, xAxis)), _react2.default.createElement(_Axis2.default, _extends({\n            className: 'y axis',\n            orientation: 'left',\n            scale: yScale,\n            height: innerHeight,\n            width: innerWidth,\n            zero: xIntercept\n        }, yAxis)), _react2.default.createElement(DataSet, {\n            data: data,\n            xScale: xScale,\n            yScale: yScale,\n            colorScale: colorScale,\n            symbol: symbol,\n            label: label,\n            values: values,\n            x: x,\n            y: y,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave\n        }), this.props.children), _react2.default.createElement(_Tooltip2.default, this.state.tooltip));\n    }\n});\n\nexports.default = ScatterPlot;//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Chart = __webpack_require__(10);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nvar _Bar = __webpack_require__(40);\n\nvar _Bar2 = _interopRequireDefault(_Bar);\n\nvar _DefaultPropsMixin = __webpack_require__(12);\n\nvar _DefaultPropsMixin2 = _interopRequireDefault(_DefaultPropsMixin);\n\nvar _HeightWidthMixin = __webpack_require__(11);\n\nvar _HeightWidthMixin2 = _interopRequireDefault(_HeightWidthMixin);\n\nvar _ArrayifyMixin = __webpack_require__(18);\n\nvar _ArrayifyMixin2 = _interopRequireDefault(_ArrayifyMixin);\n\nvar _StackAccessorMixin = __webpack_require__(28);\n\nvar _StackAccessorMixin2 = _interopRequireDefault(_StackAccessorMixin);\n\nvar _StackDataMixin = __webpack_require__(29);\n\nvar _StackDataMixin2 = _interopRequireDefault(_StackDataMixin);\n\nvar _DefaultScalesMixin = __webpack_require__(20);\n\nvar _DefaultScalesMixin2 = _interopRequireDefault(_DefaultScalesMixin);\n\nvar _TooltipMixin = __webpack_require__(13);\n\nvar _TooltipMixin2 = _interopRequireDefault(_TooltipMixin);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar array = _react.PropTypes.array;\nvar func = _react.PropTypes.func;\n\n// receive array and return a subsampled array of size n\n//\n// a= the array;\n// n= number of sample you want output\n\nvar subSample = function subSample(a, n) {\n    var returnArray = [];\n    var m = a.length;\n    var samplingRatio = m / n;\n\n    //just round down for now in case of comma separated\n    for (var i = 0; i < m;) {\n        returnArray.push(a[Math.floor(i)]);\n        i += samplingRatio;\n    }\n    return returnArray;\n};\n\nvar DataSet = _react2.default.createClass({\n    displayName: 'DataSet',\n\n    propTypes: {\n        data: array.isRequired,\n        xScale: func.isRequired,\n        yScale: func.isRequired,\n        colorScale: func.isRequired,\n        values: func.isRequired,\n        label: func.isRequired,\n        x: func.isRequired,\n        y: func.isRequired,\n        y0: func.isRequired\n    },\n\n    render: function render() {\n        var _props = this.props;\n        var data = _props.data;\n        var yScale = _props.yScale;\n        var colorScale = _props.colorScale;\n        var values = _props.values;\n        var label = _props.label;\n        var y = _props.y;\n        var x0 = _props.x0;\n        var onMouseEnter = _props.onMouseEnter;\n        var onMouseLeave = _props.onMouseLeave;\n\n        var height = yScale(yScale.domain()[0]);\n        var bars = data.map(function (stack) {\n            return values(stack).map(function (e, index) {\n                // maps the range [0,1] to the range [0, yDomain]\n                var yValue = height * y(e);\n                // center vertically to have upper and lower part of the waveform\n                var vy = height / 2 - yValue / 2;\n                //position x(e) * width * 2 because we want equal sapce.\n                var vx = 2 * x0 * index;\n\n                return _react2.default.createElement(_Bar2.default, {\n                    key: label(stack) + '.' + index,\n                    width: x0,\n                    height: yValue,\n                    x: vx,\n                    y: vy,\n                    fill: colorScale(Math.floor(vx)),\n                    data: e,\n                    onMouseEnter: onMouseEnter,\n                    onMouseLeave: onMouseLeave\n                });\n            });\n        });\n\n        return _react2.default.createElement('g', null, bars);\n    }\n});\n\nvar Waveform = _react2.default.createClass({\n    displayName: 'Waveform',\n\n    mixins: [_DefaultPropsMixin2.default, _HeightWidthMixin2.default, _ArrayifyMixin2.default, _StackAccessorMixin2.default, _StackDataMixin2.default, _DefaultScalesMixin2.default, _TooltipMixin2.default],\n\n    getDefaultProps: function getDefaultProps() {\n        return {};\n    },\n    _tooltipHtml: function _tooltipHtml(d) {\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var html = this.props.tooltipHtml(this.props.x(d), this.props.y0(d), this.props.y(d));\n\n        var midPoint = xScale.rangeBand() / 2;\n        var xPos = midPoint + xScale(this.props.x(d));\n\n        var topStack = this._data[this._data.length - 1].values;\n        var topElement = null;\n\n        // TODO: this might not scale if dataset is huge.\n        // consider pre-computing yPos for each X\n        for (var i = 0; i < topStack.length; i++) {\n            if (this.props.x(topStack[i]) === this.props.x(d)) {\n                topElement = topStack[i];\n                break;\n            }\n        }\n        var yPos = yScale(this.props.y0(topElement) + this.props.y(topElement));\n\n        return [html, xPos, yPos];\n    },\n    render: function render() {\n        var _props2 = this.props;\n        var height = _props2.height;\n        var width = _props2.width;\n        var margin = _props2.margin;\n        var colorScale = _props2.colorScale;\n        var values = _props2.values;\n        var label = _props2.label;\n        var y = _props2.y;\n        var y0 = _props2.y0;\n        var x = _props2.x;\n\n        var data = this._data;\n        var innerWidth = this._innerWidth;\n        var xScale = this._xScale;\n        var yScale = this._yScale;\n\n        var preserveAspectRatio = 'none';\n        var viewBox = '0 0 ' + width + ' ' + height;\n\n        // there are two options, if the samples are less than the space available\n        // we'll stretch the width of bar and inbetween spaces.\n        // Otherwise we just subSample the dataArray.\n        var barWidth = void 0;\n        if (data[0].values.length > innerWidth / 2) {\n            data[0].values = subSample(data[0].values, innerWidth / 2);\n            barWidth = 1;\n        } else {\n            barWidth = innerWidth / 2 / data[0].values.length;\n        }\n\n        return _react2.default.createElement('div', null, _react2.default.createElement(_Chart2.default, {\n            height: height,\n            width: width,\n            margin: margin,\n            viewBox: viewBox,\n            preserveAspectRatio: preserveAspectRatio\n        }, _react2.default.createElement(DataSet, {\n            data: data,\n            xScale: xScale,\n            yScale: yScale,\n            colorScale: colorScale,\n            label: label,\n            values: values,\n            x: x,\n            y: y,\n            y0: y0,\n            x0: barWidth,\n            onMouseEnter: this.onMouseEnter,\n            onMouseLeave: this.onMouseLeave\n        }, this.props.children)));\n    }\n});\n\nexports.default = Waveform;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.d3 = exports.Brush = exports.AreaChart = exports.LineChart = exports.ScatterPlot = exports.PieChart = exports.Waveform = exports.BarChart = undefined;\n\nvar _BarChart = __webpack_require__(66);\n\nObject.defineProperty(exports, 'BarChart', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_BarChart).default;\n  }\n});\n\nvar _Waveform = __webpack_require__(71);\n\nObject.defineProperty(exports, 'Waveform', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Waveform).default;\n  }\n});\n\nvar _PieChart = __webpack_require__(69);\n\nObject.defineProperty(exports, 'PieChart', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_PieChart).default;\n  }\n});\n\nvar _ScatterPlot = __webpack_require__(70);\n\nObject.defineProperty(exports, 'ScatterPlot', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ScatterPlot).default;\n  }\n});\n\nvar _LineChart = __webpack_require__(68);\n\nObject.defineProperty(exports, 'LineChart', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_LineChart).default;\n  }\n});\n\nvar _AreaChart = __webpack_require__(65);\n\nObject.defineProperty(exports, 'AreaChart', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_AreaChart).default;\n  }\n});\n\nvar _Brush = __webpack_require__(67);\n\nObject.defineProperty(exports, 'Brush', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Brush).default;\n  }\n});\n\nvar _d2 = __webpack_require__(5);\n\nvar _d3 = _interopRequireDefault(_d2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nexports.d3 = _d3.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWQzLWNvbXBvbmVudHMvbGliL2luZGV4LmpzPzhjZjUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkMyIsIkJydXNoIiwiQXJlYUNoYXJ0IiwiTGluZUNoYXJ0IiwiU2NhdHRlclBsb3QiLCJQaWVDaGFydCIsIldhdmVmb3JtIiwiQmFyQ2hhcnQiLCJ1bmRlZmluZWQiLCJfQmFyQ2hhcnQiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwiX1dhdmVmb3JtIiwiX1BpZUNoYXJ0IiwiX1NjYXR0ZXJQbG90IiwiX0xpbmVDaGFydCIsIl9BcmVhQ2hhcnQiLCJfQnJ1c2giLCJfZDIiLCJfZDMiLCJvYmoiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU87QUFEb0MsQ0FBN0M7QUFHQUQsUUFBUUUsRUFBUixHQUFhRixRQUFRRyxLQUFSLEdBQWdCSCxRQUFRSSxTQUFSLEdBQW9CSixRQUFRSyxTQUFSLEdBQW9CTCxRQUFRTSxXQUFSLEdBQXNCTixRQUFRTyxRQUFSLEdBQW1CUCxRQUFRUSxRQUFSLEdBQW1CUixRQUFRUyxRQUFSLEdBQW1CQyxTQUFwSjs7QUFFQSxJQUFJQyxZQUFZLG1CQUFBQyxDQUFRLEVBQVIsQ0FBaEI7O0FBRUFkLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFVBQS9CLEVBQTJDO0FBQ3pDYSxjQUFZLElBRDZCO0FBRXpDQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPQyx1QkFBdUJKLFNBQXZCLEVBQWtDSyxPQUF6QztBQUNEO0FBSndDLENBQTNDOztBQU9BLElBQUlDLFlBQVksbUJBQUFMLENBQVEsRUFBUixDQUFoQjs7QUFFQWQsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsVUFBL0IsRUFBMkM7QUFDekNhLGNBQVksSUFENkI7QUFFekNDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9DLHVCQUF1QkUsU0FBdkIsRUFBa0NELE9BQXpDO0FBQ0Q7QUFKd0MsQ0FBM0M7O0FBT0EsSUFBSUUsWUFBWSxtQkFBQU4sQ0FBUSxFQUFSLENBQWhCOztBQUVBZCxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixVQUEvQixFQUEyQztBQUN6Q2EsY0FBWSxJQUQ2QjtBQUV6Q0MsT0FBSyxTQUFTQSxHQUFULEdBQWU7QUFDbEIsV0FBT0MsdUJBQXVCRyxTQUF2QixFQUFrQ0YsT0FBekM7QUFDRDtBQUp3QyxDQUEzQzs7QUFPQSxJQUFJRyxlQUFlLG1CQUFBUCxDQUFRLEVBQVIsQ0FBbkI7O0FBRUFkLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLGFBQS9CLEVBQThDO0FBQzVDYSxjQUFZLElBRGdDO0FBRTVDQyxPQUFLLFNBQVNBLEdBQVQsR0FBZTtBQUNsQixXQUFPQyx1QkFBdUJJLFlBQXZCLEVBQXFDSCxPQUE1QztBQUNEO0FBSjJDLENBQTlDOztBQU9BLElBQUlJLGFBQWEsbUJBQUFSLENBQVEsRUFBUixDQUFqQjs7QUFFQWQsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsV0FBL0IsRUFBNEM7QUFDMUNhLGNBQVksSUFEOEI7QUFFMUNDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9DLHVCQUF1QkssVUFBdkIsRUFBbUNKLE9BQTFDO0FBQ0Q7QUFKeUMsQ0FBNUM7O0FBT0EsSUFBSUssYUFBYSxtQkFBQVQsQ0FBUSxFQUFSLENBQWpCOztBQUVBZCxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixXQUEvQixFQUE0QztBQUMxQ2EsY0FBWSxJQUQ4QjtBQUUxQ0MsT0FBSyxTQUFTQSxHQUFULEdBQWU7QUFDbEIsV0FBT0MsdUJBQXVCTSxVQUF2QixFQUFtQ0wsT0FBMUM7QUFDRDtBQUp5QyxDQUE1Qzs7QUFPQSxJQUFJTSxTQUFTLG1CQUFBVixDQUFRLEVBQVIsQ0FBYjs7QUFFQWQsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFDdENhLGNBQVksSUFEMEI7QUFFdENDLE9BQUssU0FBU0EsR0FBVCxHQUFlO0FBQ2xCLFdBQU9DLHVCQUF1Qk8sTUFBdkIsRUFBK0JOLE9BQXRDO0FBQ0Q7QUFKcUMsQ0FBeEM7O0FBT0EsSUFBSU8sTUFBTSxtQkFBQVgsQ0FBUSxDQUFSLENBQVY7O0FBRUEsSUFBSVksTUFBTVQsdUJBQXVCUSxHQUF2QixDQUFWOztBQUVBLFNBQVNSLHNCQUFULENBQWdDVSxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVULFNBQVNTLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GekIsUUFBUUUsRUFBUixHQUFhc0IsSUFBSVIsT0FBakIiLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmQzID0gZXhwb3J0cy5CcnVzaCA9IGV4cG9ydHMuQXJlYUNoYXJ0ID0gZXhwb3J0cy5MaW5lQ2hhcnQgPSBleHBvcnRzLlNjYXR0ZXJQbG90ID0gZXhwb3J0cy5QaWVDaGFydCA9IGV4cG9ydHMuV2F2ZWZvcm0gPSBleHBvcnRzLkJhckNoYXJ0ID0gdW5kZWZpbmVkO1xuXG52YXIgX0JhckNoYXJ0ID0gcmVxdWlyZSgnLi9CYXJDaGFydCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0JhckNoYXJ0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmFyQ2hhcnQpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1dhdmVmb3JtID0gcmVxdWlyZSgnLi9XYXZlZm9ybScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1dhdmVmb3JtJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfV2F2ZWZvcm0pLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BpZUNoYXJ0ID0gcmVxdWlyZSgnLi9QaWVDaGFydCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1BpZUNoYXJ0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGllQ2hhcnQpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NjYXR0ZXJQbG90ID0gcmVxdWlyZSgnLi9TY2F0dGVyUGxvdCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NjYXR0ZXJQbG90Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2NhdHRlclBsb3QpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpbmVDaGFydCA9IHJlcXVpcmUoJy4vTGluZUNoYXJ0Jyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnTGluZUNoYXJ0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluZUNoYXJ0KS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9BcmVhQ2hhcnQgPSByZXF1aXJlKCcuL0FyZWFDaGFydCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FyZWFDaGFydCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FyZWFDaGFydCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQnJ1c2ggPSByZXF1aXJlKCcuL0JydXNoJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQnJ1c2gnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CcnVzaCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfZDIgPSByZXF1aXJlKCdkMycpO1xuXG52YXIgX2QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmQzID0gX2QzLmRlZmF1bHQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kMy1jb21wb25lbnRzL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=")}]);